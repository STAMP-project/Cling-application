import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader54);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator18.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray44);
        boolean boolean49 = generatorStrategy24.equals((java.lang.Object) classArray35);
        boolean boolean51 = generatorStrategy24.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator16.getStrategy();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        boolean boolean65 = generatorStrategy53.equals((java.lang.Object) mixin64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        boolean boolean78 = generatorStrategy53.equals((java.lang.Object) objArray74);
        generator0.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class<?> wildcardClass81 = mixin80.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator65.getNamingPolicy();
        generator65.setAttemptLoad(true);
        boolean boolean92 = generatorStrategy62.equals((java.lang.Object) generator65);
        generator65.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator65.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator50.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = null;
        generator50.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        boolean boolean81 = generatorStrategy56.equals((java.lang.Object) classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray67);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = namingPolicy12.equals((java.lang.Object) generator13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator13.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator42.getStrategy();
        generator19.setStrategy(generatorStrategy46);
        generator13.setStrategy(generatorStrategy46);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        generator13.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator13.getNamingPolicy();
        boolean boolean79 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator80.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = null;
        generator80.setStrategy(generatorStrategy82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator80.getStrategy();
        generator13.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator13.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = generatorStrategy5.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy86);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        generator52.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin51.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        generator0.setClasses(classArray35);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        java.lang.Class<?> wildcardClass14 = generator7.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        // The following exception was thrown during execution in test generation
        try {
            generator7.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        boolean boolean61 = generatorStrategy34.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean63 = generator0.getUseCache();
        boolean boolean64 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = namingPolicy46.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator47.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        boolean boolean74 = namingPolicy69.equals((java.lang.Object) classLoader72);
        generator53.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator76.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator76.getStrategy();
        generator53.setStrategy(generatorStrategy80);
        generator47.setStrategy(generatorStrategy80);
        boolean boolean83 = generatorStrategy37.equals((java.lang.Object) generator47);
        boolean boolean84 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator47.getNamingPolicy();
        generator47.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader88 = generator47.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getUseCache();
        boolean boolean44 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin48 = generator0.create();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray24);
        generator0.setClasses(classArray15);
        java.lang.Class<?> wildcardClass30 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        boolean boolean29 = namingPolicy25.equals((java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator26.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        boolean boolean53 = namingPolicy48.equals((java.lang.Object) classLoader51);
        generator32.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator55.getStrategy();
        generator32.setStrategy(generatorStrategy59);
        generator26.setStrategy(generatorStrategy59);
        generator26.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader89 = generator64.getClassLoader();
        generator26.setClassLoader(classLoader89);
        boolean boolean91 = generator26.getUseCache();
        java.lang.ClassLoader classLoader92 = generator26.getClassLoader();
        boolean boolean93 = namingPolicy18.equals((java.lang.Object) generator26);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator26.getNamingPolicy();
        generator26.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator26.getStrategy();
        java.lang.ClassLoader classLoader99 = generator26.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator29.getClassLoader();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray63);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        boolean boolean39 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass42 = generator41.getClass();
        boolean boolean43 = namingPolicy40.equals((java.lang.Object) generator41);
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin62.newInstance(objArray82);
        boolean boolean88 = namingPolicy49.equals((java.lang.Object) objArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator0.setDelegates(objArray82);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator52.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = null;
        generator52.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator52.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        boolean boolean83 = generatorStrategy58.equals((java.lang.Object) classArray69);
        boolean boolean85 = generatorStrategy58.equals((java.lang.Object) (short) 10);
        boolean boolean87 = generatorStrategy58.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean40 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        java.lang.Class[] classArray0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator38.setNamingPolicy(namingPolicy39);
        boolean boolean41 = namingPolicy37.equals((java.lang.Object) generator38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator38.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        boolean boolean65 = namingPolicy60.equals((java.lang.Object) classLoader63);
        generator44.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator67.getStrategy();
        generator44.setStrategy(generatorStrategy71);
        generator38.setStrategy(generatorStrategy71);
        generator19.setStrategy(generatorStrategy71);
        boolean boolean75 = generator19.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray76 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setDelegates(objArray34);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator26.getNamingPolicy();
        boolean boolean39 = generator26.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        generator40.setUseCache(false);
        java.lang.ClassLoader classLoader54 = generator40.getClassLoader();
        generator26.setClassLoader(classLoader54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray75);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray80);
        boolean boolean83 = generatorStrategy25.equals((java.lang.Object) classLoader54);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator84.setAttemptLoad(true);
        generator84.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator84.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator4.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator4.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass16 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin4 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        boolean boolean69 = namingPolicy65.equals((java.lang.Object) generator66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator66.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator66.getStrategy();
        generator0.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin9.newInstance((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setClasses(classArray59);
        java.lang.ClassLoader classLoader61 = generator47.getClassLoader();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray81);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin46.newInstance((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        generator17.setUseCache(true);
        boolean boolean24 = namingPolicy15.equals((java.lang.Object) true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass30 = generator25.getClass();
        boolean boolean31 = namingPolicy15.equals((java.lang.Object) generator25);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator47.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = null;
        generator47.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator47.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray73);
        boolean boolean78 = generatorStrategy53.equals((java.lang.Object) classArray64);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setDelegates(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin80.newInstance(objArray89);
        java.lang.Object[] objArray96 = null;
        org.mockito.cglib.proxy.Mixin mixin97 = mixin80.newInstance(objArray96);
        org.mockito.cglib.core.Predicate predicate98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = namingPolicy15.getClassName("hi!", "hi!", (java.lang.Object) mixin97, predicate98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        boolean boolean59 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setAttemptLoad(true);
        generator70.setAttemptLoad(false);
        boolean boolean75 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = null;
        generator70.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        generator79.setNamingPolicy(namingPolicy80);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator79.setDelegates((java.lang.Object[]) classArray91);
        generator70.setClasses(classArray91);
        generator67.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator67.getStrategy();
        generator62.setStrategy(generatorStrategy95);
        generator0.setStrategy(generatorStrategy95);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        generator10.setUseCache(false);
        generator10.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        boolean boolean52 = generatorStrategy25.equals((java.lang.Object) (short) 10);
        generator17.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator17.getStrategy();
        generator10.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator0.setStrategy(generatorStrategy57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.core.ClassGenerator classGenerator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = generatorStrategy11.generate(classGenerator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        boolean boolean22 = generator0.getUseCache();
        boolean boolean23 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        generator14.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin32 = generator14.create();
        boolean boolean33 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator14.getStrategy();
        java.lang.ClassLoader classLoader36 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator0.setDelegates(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator53.setStrategy(generatorStrategy59);
        generator53.setAttemptLoad(false);
        generator53.setStyle((int) (byte) 0);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        generator53.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(false);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        generator8.setClasses(classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        boolean boolean79 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass80 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        java.lang.ClassLoader classLoader60 = null;
        generator0.setClassLoader(classLoader60);
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        boolean boolean13 = generator7.getUseCache();
        boolean boolean14 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        boolean boolean18 = generator15.getUseCache();
        java.lang.Class[] classArray19 = null;
        generator15.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy25);
        generator7.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        generator29.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator34.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader38 = null;
        generator34.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator34.getStrategy();
        java.lang.Object obj41 = null;
        boolean boolean42 = generatorStrategy40.equals(obj41);
        generator29.setStrategy(generatorStrategy40);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray44 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class<?> wildcardClass90 = classArray87.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator67.setStrategy(generatorStrategy73);
        generator67.setAttemptLoad(false);
        boolean boolean77 = generator67.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = null;
        generator84.setNamingPolicy(namingPolicy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = null;
        generator84.setNamingPolicy(namingPolicy87);
        boolean boolean89 = generator84.getUseCache();
        java.lang.Class[] classArray90 = null;
        generator84.setClasses(classArray90);
        org.mockito.cglib.core.Predicate predicate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = namingPolicy79.getClassName("hi!", "hi!", (java.lang.Object) generator84, predicate92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getAttemptLoad();
        boolean boolean73 = generator7.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        boolean boolean25 = namingPolicy20.equals((java.lang.Object) classLoader23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        boolean boolean40 = namingPolicy20.equals((java.lang.Object) mixin39);
        generator0.setNamingPolicy(namingPolicy20);
        boolean boolean42 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin46 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        boolean boolean74 = generator7.getUseCache();
        boolean boolean75 = generator7.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin76 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mixin23);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        generator0.setStyle(2);
        boolean boolean97 = generator0.getUseCache();
        boolean boolean98 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader27 = null;
        generator13.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator32.getNamingPolicy();
        java.lang.ClassLoader classLoader57 = generator32.getClassLoader();
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classLoader57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader57);
        org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
        java.lang.Object[] objArray87 = null;
        org.mockito.cglib.proxy.Mixin mixin88 = mixin86.newInstance(objArray87);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        boolean boolean10 = generatorStrategy7.equals((java.lang.Object) namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = generatorStrategy7.generate((org.mockito.cglib.core.ClassGenerator) generator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator19.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) classLoader48);
        generator29.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator29.setStrategy(generatorStrategy56);
        generator19.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        boolean boolean85 = generatorStrategy56.equals((java.lang.Object) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        boolean boolean10 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator13.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator13.setClasses(classArray46);
        generator4.setClasses(classArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator53.setAttemptLoad(false);
        boolean boolean69 = generator53.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        generator70.setUseCache(false);
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator70.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator78.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        boolean boolean83 = generator78.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator78.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy84);
        generator53.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        generator17.setUseCache(true);
        boolean boolean24 = namingPolicy15.equals((java.lang.Object) true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator40.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = null;
        generator40.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray66);
        boolean boolean71 = generatorStrategy46.equals((java.lang.Object) classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator74.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin73.newInstance(objArray82);
        java.lang.Object[] objArray89 = null;
        org.mockito.cglib.proxy.Mixin mixin90 = mixin73.newInstance(objArray89);
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy15.getClassName("", "", (java.lang.Object) mixin90, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        boolean boolean13 = generator7.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setDelegates((java.lang.Object[]) classArray26);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator32.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        generator32.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        boolean boolean63 = generatorStrategy38.equals((java.lang.Object) classArray49);
        boolean boolean65 = generatorStrategy38.equals((java.lang.Object) (short) 10);
        generator30.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator30.getStrategy();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        boolean boolean79 = generatorStrategy67.equals((java.lang.Object) mixin78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator80.setDelegates(objArray88);
        boolean boolean92 = generatorStrategy67.equals((java.lang.Object) objArray88);
        generator14.setDelegates(objArray88);
        generator14.setAttemptLoad(false);
        boolean boolean96 = generator14.getUseCache();
        boolean boolean97 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator14.getStrategy();
        boolean boolean99 = generatorStrategy13.equals((java.lang.Object) generator14);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = namingPolicy28.getClassName("", "", (java.lang.Object) generator31, predicate34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        boolean boolean44 = generatorStrategy19.equals((java.lang.Object) classArray30);
        boolean boolean46 = generatorStrategy19.equals((java.lang.Object) (short) 10);
        generator11.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader54 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        boolean boolean81 = namingPolicy53.equals((java.lang.Object) classArray76);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        boolean boolean83 = generatorStrategy48.equals((java.lang.Object) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator0.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.Object obj16 = null;
        boolean boolean17 = namingPolicy15.equals(obj16);
        java.lang.Class<?> wildcardClass18 = namingPolicy15.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator51.setStrategy(generatorStrategy57);
        generator51.setAttemptLoad(false);
        generator51.setStyle((int) (byte) 0);
        generator51.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator65.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator67.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        generator67.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator67.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator67.getNamingPolicy();
        generator65.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        generator76.setAttemptLoad(false);
        boolean boolean81 = namingPolicy74.equals((java.lang.Object) false);
        generator51.setNamingPolicy(namingPolicy74);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = generatorStrategy50.generate((org.mockito.cglib.core.ClassGenerator) generator51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin44.newInstance(objArray64);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin69.newInstance(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator18.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator0.setClasses(classArray82);
        boolean boolean86 = generator0.getUseCache();
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        java.lang.Object[] objArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        boolean boolean42 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        boolean boolean44 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classArray56);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin28.newInstance((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator66.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(objArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray91);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator66.setClasses(classArray96);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator0.setDelegates(objArray47);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        generator52.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        generator52.setClasses(classArray67);
        generator0.setClasses(classArray67);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        boolean boolean10 = generatorStrategy7.equals((java.lang.Object) namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader42 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        boolean boolean69 = namingPolicy41.equals((java.lang.Object) classArray64);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray70);
        boolean boolean72 = namingPolicy9.equals((java.lang.Object) classArray70);
        java.lang.Object obj75 = null;
        org.mockito.cglib.core.Predicate predicate76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = namingPolicy9.getClassName("", "hi!", obj75, predicate76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        generator19.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        generator33.setAttemptLoad(false);
        boolean boolean38 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator33.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator42.setNamingPolicy(namingPolicy43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setDelegates((java.lang.Object[]) classArray54);
        generator33.setClasses(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = generator33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        generator19.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.Predicate predicate61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = namingPolicy15.getClassName("", "hi!", (java.lang.Object) generator19, predicate61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        java.lang.Object obj16 = null;
        org.mockito.cglib.core.Predicate predicate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = namingPolicy13.getClassName("", "", obj16, predicate17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator18.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray44);
        boolean boolean49 = generatorStrategy24.equals((java.lang.Object) classArray35);
        boolean boolean51 = generatorStrategy24.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator16.getStrategy();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        boolean boolean65 = generatorStrategy53.equals((java.lang.Object) mixin64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        boolean boolean78 = generatorStrategy53.equals((java.lang.Object) objArray74);
        generator0.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class<?> wildcardClass81 = objArray74.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        boolean boolean38 = namingPolicy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator35.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        boolean boolean62 = namingPolicy57.equals((java.lang.Object) classLoader60);
        generator41.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        generator41.setStrategy(generatorStrategy68);
        generator35.setStrategy(generatorStrategy68);
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray78 = new java.lang.Object[] { true, (-1), 0.0f, generator77 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        generator35.setDelegates(objArray78);
        generator0.setDelegates(objArray78);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator65.getNamingPolicy();
        generator65.setAttemptLoad(true);
        boolean boolean92 = generatorStrategy62.equals((java.lang.Object) generator65);
        generator65.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator65.getStrategy();
        generator65.setUseCache(false);
        java.lang.ClassLoader classLoader98 = null;
        generator65.setClassLoader(classLoader98);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (-1), 0.0f, generator31 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin36.newInstance((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        java.lang.ClassLoader classLoader94 = generator80.getClassLoader();
        generator0.setClassLoader(classLoader94);
        java.lang.Object[] objArray96 = null;
        generator0.setDelegates(objArray96);
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean40 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.Object obj10 = null;
        boolean boolean11 = generatorStrategy9.equals(obj10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        boolean boolean63 = generatorStrategy36.equals((java.lang.Object) (short) 10);
        generator28.setStrategy(generatorStrategy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator28.getStrategy();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        boolean boolean77 = generatorStrategy65.equals((java.lang.Object) mixin76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setDelegates(objArray86);
        boolean boolean90 = generatorStrategy65.equals((java.lang.Object) objArray86);
        generator12.setDelegates(objArray86);
        generator12.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator5.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        generator5.setClasses(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setAttemptLoad(true);
        boolean boolean37 = generator34.getUseCache();
        boolean boolean38 = generator34.getAttemptLoad();
        java.lang.Class<?> wildcardClass39 = generator34.getClass();
        boolean boolean40 = namingPolicy33.equals((java.lang.Object) wildcardClass39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator41.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray64 = new java.lang.Object[] { true, (-1), 0.0f, generator63 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        generator46.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray86);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        generator46.setDelegates(objArray86);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        boolean boolean95 = namingPolicy45.equals((java.lang.Object) mixin94);
        boolean boolean96 = namingPolicy33.equals((java.lang.Object) mixin94);
        boolean boolean97 = generatorStrategy4.equals((java.lang.Object) namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator13.setStrategy(generatorStrategy19);
        generator13.setAttemptLoad(false);
        generator13.setStyle((int) (byte) 0);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        generator13.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray39);
        java.lang.Object[] objArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        generator25.setUseCache(false);
        java.lang.ClassLoader classLoader39 = null;
        generator25.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy42);
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        generator46.setClasses(classArray65);
        generator25.setClasses(classArray65);
        java.lang.ClassLoader classLoader82 = generator25.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
        java.lang.Class<?> wildcardClass16 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        java.lang.Object obj40 = null;
        boolean boolean41 = namingPolicy27.equals(obj40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator42.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator45.setNamingPolicy(namingPolicy46);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setClasses(classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray86);
        generator42.setClasses(classArray72);
        boolean boolean89 = generator42.getUseCache();
        boolean boolean90 = generator42.getAttemptLoad();
        boolean boolean91 = namingPolicy27.equals((java.lang.Object) boolean90);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(objArray12);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(objArray12);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray51);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin59.newInstance((java.lang.Object[]) classArray86);
        generator0.setDelegates((java.lang.Object[]) classArray86);
        boolean boolean89 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        java.lang.Object obj12 = null;
        boolean boolean13 = generatorStrategy11.equals(obj12);
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator15.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        generator15.setClasses(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator15.getNamingPolicy();
        boolean boolean40 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = generator15.getClassLoader();
        generator15.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator15.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        boolean boolean28 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        boolean boolean93 = generatorStrategy77.equals((java.lang.Object) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        boolean boolean16 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator13.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = generatorStrategy12.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        boolean boolean10 = generator7.getUseCache();
        java.lang.Class[] classArray11 = null;
        generator7.setClasses(classArray11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        generator16.setUseCache(false);
        boolean boolean30 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.ClassGenerator classGenerator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = generatorStrategy33.generate(classGenerator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        boolean boolean10 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator13.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator13.setClasses(classArray46);
        generator4.setClasses(classArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator53.setAttemptLoad(false);
        boolean boolean69 = generator53.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader71 = null;
        generator70.setClassLoader(classLoader71);
        generator70.setUseCache(false);
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator70.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator78.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        boolean boolean83 = generator78.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator78.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy84);
        generator53.setNamingPolicy(namingPolicy84);
        generator0.setNamingPolicy(namingPolicy84);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class[] classArray6 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        generator7.setAttemptLoad(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator7.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setDelegates((java.lang.Object[]) classArray28);
        generator7.setClasses(classArray28);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray43);
        boolean boolean81 = namingPolicy5.equals((java.lang.Object) mixin80);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator5.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator38.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setDelegates((java.lang.Object[]) classArray59);
        generator38.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray59);
        generator20.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        boolean boolean67 = generator64.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator64.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy68);
        generator20.setAttemptLoad(true);
        boolean boolean72 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        java.lang.Object[] objArray89 = null;
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray87, objArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        boolean boolean61 = generatorStrategy34.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class<?> wildcardClass67 = generator64.getClass();
        boolean boolean68 = generatorStrategy63.equals((java.lang.Object) wildcardClass67);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray44);
        generator0.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class<?> wildcardClass50 = mixin49.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class<?> wildcardClass28 = classArray27.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator35.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        boolean boolean66 = generatorStrategy41.equals((java.lang.Object) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin21.newInstance((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        boolean boolean39 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        java.lang.Object obj12 = null;
        boolean boolean13 = generatorStrategy11.equals(obj12);
        generator0.setStrategy(generatorStrategy11);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        generator0.setClasses(classArray19);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator43.setNamingPolicy(namingPolicy44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        generator40.setClasses(classArray55);
        generator40.setUseCache(false);
        boolean boolean61 = generator40.getAttemptLoad();
        boolean boolean62 = generator40.getAttemptLoad();
        org.mockito.cglib.core.Predicate predicate63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = namingPolicy37.getClassName("", "", (java.lang.Object) boolean62, predicate63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        generator8.setUseCache(false);
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator8.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator22.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator52.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy85);
        generator22.setNamingPolicy(namingPolicy85);
        boolean boolean88 = generator22.getAttemptLoad();
        boolean boolean89 = namingPolicy21.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator22.getStrategy();
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator22.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy93);
        generator0.setNamingPolicy(namingPolicy93);
        java.lang.Class<?> wildcardClass96 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator19.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setDelegates((java.lang.Object[]) classArray40);
        generator19.setClasses(classArray40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator19.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(true);
        boolean boolean47 = generatorStrategy18.equals((java.lang.Object) true);
        org.mockito.cglib.core.ClassGenerator classGenerator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray49 = generatorStrategy18.generate(classGenerator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader9 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator10.setNamingPolicy(namingPolicy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray22);
        generator0.setClasses(classArray22);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin21.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator61.setClasses(classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin77 = mixin48.newInstance((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class<?> wildcardClass79 = classArray60.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator0.setDelegates(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        java.lang.Class<?> wildcardClass52 = objArray47.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setUseCache(false);
        java.lang.ClassLoader classLoader78 = generator7.getClassLoader();
        java.lang.Object[] objArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator0.setDelegates((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class<?> wildcardClass25 = mixin24.getClass();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        boolean boolean54 = namingPolicy47.equals((java.lang.Object) generator48);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        generator55.setClasses(classArray70);
        generator55.setUseCache(false);
        java.lang.ClassLoader classLoader76 = generator55.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator55.getNamingPolicy();
        boolean boolean78 = namingPolicy47.equals((java.lang.Object) generator55);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator30.setStrategy(generatorStrategy36);
        generator30.setAttemptLoad(false);
        generator30.setStyle((int) (byte) 0);
        generator30.setAttemptLoad(false);
        boolean boolean44 = generator30.getUseCache();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin50 = generator0.create();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator8.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setDelegates((java.lang.Object[]) classArray29);
        generator8.setClasses(classArray29);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator45.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = null;
        generator45.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray71);
        boolean boolean76 = generatorStrategy51.equals((java.lang.Object) classArray62);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        generator0.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setClasses(classArray64);
        generator50.setDelegates((java.lang.Object[]) classArray64);
        boolean boolean67 = generator50.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setDelegates(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        generator50.setDelegates(objArray76);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator50.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator83.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = null;
        generator83.setStrategy(generatorStrategy85);
        generator83.setAttemptLoad(false);
        boolean boolean89 = generator83.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator83.getStrategy();
        generator50.setStrategy(generatorStrategy90);
        generator50.setUseCache(false);
        boolean boolean94 = generatorStrategy48.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        boolean boolean61 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setDelegates(objArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        generator39.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin48 = generator39.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        boolean boolean54 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        generator46.setUseCache(false);
        java.lang.ClassLoader classLoader60 = null;
        generator46.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy63);
        generator0.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        boolean boolean67 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray35);
        boolean boolean40 = generatorStrategy15.equals((java.lang.Object) classArray26);
        boolean boolean42 = generatorStrategy15.equals((java.lang.Object) (short) 10);
        generator7.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        boolean boolean46 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        boolean boolean52 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator47.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator56.setNamingPolicy(namingPolicy57);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator56.setDelegates((java.lang.Object[]) classArray68);
        generator47.setClasses(classArray68);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator47.getNamingPolicy();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator47.setDelegates((java.lang.Object[]) classArray84);
        boolean boolean86 = generator47.getUseCache();
        java.lang.ClassLoader classLoader87 = generator47.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin88 = generator47.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator47.getStrategy();
        generator0.setStrategy(generatorStrategy89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.core.Predicate predicate48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = namingPolicy33.getClassName("", "", (java.lang.Object) mixin47, predicate48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass26 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean71 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        generator0.setDelegates(objArray80);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        generator24.setUseCache(false);
        generator24.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator24.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy32);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator4.setClasses(classArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        boolean boolean24 = namingPolicy19.equals((java.lang.Object) classLoader22);
        generator3.setNamingPolicy(namingPolicy19);
        generator3.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        generator3.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = null;
        generator58.setClassLoader(classLoader61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator63.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader67 = null;
        generator63.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray89);
        boolean boolean94 = generatorStrategy69.equals((java.lang.Object) classArray80);
        generator58.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        boolean boolean97 = namingPolicy57.equals((java.lang.Object) mixin96);
        boolean boolean98 = generatorStrategy2.equals((java.lang.Object) namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        generator1.setUseCache(false);
        generator1.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator8.setNamingPolicy(namingPolicy9);
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator8.setDelegates((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator61.setClasses(classArray71);
        generator61.setUseCache(false);
        java.lang.ClassLoader classLoader75 = null;
        generator61.setClassLoader(classLoader75);
        java.lang.Object[] objArray77 = new java.lang.Object[] { objArray54, (byte) 100, generator61 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray54);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator1.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray20);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator42.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = null;
        generator42.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        boolean boolean73 = generatorStrategy48.equals((java.lang.Object) classArray59);
        boolean boolean75 = generatorStrategy48.equals((java.lang.Object) (short) 10);
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator40.getNamingPolicy();
        boolean boolean79 = generator40.getAttemptLoad();
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean73 = generator5.getUseCache();
        generator5.setStyle(2);
        generator5.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator5.getNamingPolicy();
        generator5.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setDelegates((java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin33.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        generator60.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        generator60.setClassLoader(classLoader74);
        java.lang.Object[] objArray76 = new java.lang.Object[] { objArray53, (byte) 100, generator60 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray53);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator79.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin78.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        generator0.setDelegates((java.lang.Object[]) classArray94);
        generator0.setUseCache(false);
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin17.newInstance(objArray37);
        boolean boolean43 = namingPolicy4.equals((java.lang.Object) objArray37);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        java.lang.ClassLoader classLoader53 = generator41.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.ClassLoader classLoader67 = generator55.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator55.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = generator41.getClassLoader();
        org.mockito.cglib.core.Predicate predicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = namingPolicy38.getClassName("", "", (java.lang.Object) classLoader71, predicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray24);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        boolean boolean44 = generator32.getAttemptLoad();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        generator49.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy55);
        generator49.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator49.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setClasses(classArray29);
        generator15.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin33 = generator15.create();
        boolean boolean34 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator15.getStrategy();
        org.mockito.cglib.core.Predicate predicate36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = namingPolicy12.getClassName("hi!", "", (java.lang.Object) generatorStrategy35, predicate36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator37.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = null;
        generator37.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator37.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        boolean boolean68 = generatorStrategy43.equals((java.lang.Object) classArray54);
        boolean boolean70 = generatorStrategy43.equals((java.lang.Object) (short) 10);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setDelegates(objArray79);
        java.lang.Class<?> wildcardClass83 = generator71.getClass();
        boolean boolean84 = generatorStrategy43.equals((java.lang.Object) wildcardClass83);
        generator0.setStrategy(generatorStrategy43);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader28 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader28 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = generatorStrategy84.generate(classGenerator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator46.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = null;
        generator46.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray72);
        boolean boolean77 = generatorStrategy52.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray45);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        generator0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass15 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        boolean boolean25 = namingPolicy20.equals((java.lang.Object) classLoader23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        boolean boolean40 = namingPolicy20.equals((java.lang.Object) mixin39);
        generator0.setNamingPolicy(namingPolicy20);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        boolean boolean51 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader85 = null;
        generator84.setClassLoader(classLoader85);
        generator84.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator84.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator84.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator84.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) generator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        generator0.setNamingPolicy(namingPolicy48);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (-1), 0.0f, generator20 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin25.newInstance((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = generator7.getClassLoader();
        java.lang.Class<?> wildcardClass73 = classLoader72.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        boolean boolean50 = generatorStrategy23.equals((java.lang.Object) (short) 10);
        boolean boolean52 = generatorStrategy23.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        generator54.setUseCache(false);
        generator54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator54.getNamingPolicy();
        boolean boolean63 = generatorStrategy23.equals((java.lang.Object) generator54);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator54.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        boolean boolean53 = generatorStrategy28.equals((java.lang.Object) classArray39);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray39);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray56 = new java.lang.Object[] { true, (-1), 0.0f, generator55 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin51.newInstance(objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator59.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray85);
        boolean boolean90 = generatorStrategy65.equals((java.lang.Object) classArray76);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin51.newInstance((java.lang.Object[]) classArray98);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        boolean boolean40 = generatorStrategy13.equals((java.lang.Object) (short) 10);
        generator5.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        generator0.setDelegates(objArray64);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        boolean boolean73 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Object[] objArray37 = null;
        generator0.setDelegates(objArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin39 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (-1), 0.0f, generator16 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin21.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        generator0.setClasses(classArray45);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        generator36.setDelegates((java.lang.Object[]) classArray50);
        java.lang.ClassLoader classLoader53 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        generator54.setAttemptLoad(false);
        boolean boolean59 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator54.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator63.setNamingPolicy(namingPolicy64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator63.setDelegates((java.lang.Object[]) classArray75);
        generator54.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray75);
        generator36.setClasses(classArray75);
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray86 = null;
        java.lang.Object[] objArray93 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray86, objArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray93);
        generator85.setClasses(classArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        boolean boolean59 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = null;
        generator62.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setAttemptLoad(true);
        generator70.setAttemptLoad(false);
        boolean boolean75 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = null;
        generator70.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        generator79.setNamingPolicy(namingPolicy80);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator79.setDelegates((java.lang.Object[]) classArray91);
        generator70.setClasses(classArray91);
        generator67.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator67.getStrategy();
        generator62.setStrategy(generatorStrategy95);
        generator0.setStrategy(generatorStrategy95);
        java.lang.Class<?> wildcardClass98 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        boolean boolean43 = generatorStrategy18.equals((java.lang.Object) classArray29);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy63);
        generator48.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin67 = generator48.create();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin67.newInstance((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        boolean boolean19 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        generator0.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        java.lang.ClassLoader classLoader98 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
        org.junit.Assert.assertNotNull(classLoader98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator33.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = null;
        generator33.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator33.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray59);
        boolean boolean64 = generatorStrategy39.equals((java.lang.Object) classArray50);
        boolean boolean66 = generatorStrategy39.equals((java.lang.Object) (short) 10);
        generator31.setStrategy(generatorStrategy39);
        generator23.setStrategy(generatorStrategy39);
        generator23.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        generator23.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin98 = generator23.create();
        byte[] byteArray99 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(byteArray99);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        boolean boolean94 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator8.setStrategy(generatorStrategy14);
        generator8.setAttemptLoad(false);
        generator8.setStyle((int) (byte) 0);
        generator8.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin59.newInstance(objArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator8.setClasses(classArray72);
        boolean boolean74 = namingPolicy7.equals((java.lang.Object) generator8);
        // The following exception was thrown during execution in test generation
        try {
            generator8.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        generator18.setUseCache(false);
        java.lang.ClassLoader classLoader32 = null;
        generator18.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator37.getClassLoader();
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classLoader62);
        generator0.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator65.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        java.lang.Class<?> wildcardClass68 = namingPolicy66.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setAttemptLoad(true);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator84.getNamingPolicy();
        generator70.setNamingPolicy(namingPolicy85);
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        generator70.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator70.getStrategy();
        boolean boolean92 = generator70.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator70.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setDelegates((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin40.newInstance(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        generator67.setUseCache(false);
        java.lang.ClassLoader classLoader81 = null;
        generator67.setClassLoader(classLoader81);
        java.lang.Object[] objArray83 = new java.lang.Object[] { objArray60, (byte) 100, generator67 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray60);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin13.newInstance((java.lang.Object[]) classArray26);
        java.lang.Object[] objArray87 = null;
        org.mockito.cglib.proxy.Mixin mixin88 = mixin13.newInstance(objArray87);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        boolean boolean47 = generator35.getAttemptLoad();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(true);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        generator35.setDelegates((java.lang.Object[]) classArray61);
        generator35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator35.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy68);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        generator18.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator32.getNamingPolicy();
        java.lang.ClassLoader classLoader57 = generator32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator32.getStrategy();
        generator18.setStrategy(generatorStrategy58);
        boolean boolean60 = generatorStrategy17.equals((java.lang.Object) generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        generator61.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator61.getStrategy();
        boolean boolean68 = generatorStrategy58.equals((java.lang.Object) generatorStrategy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator69.setAttemptLoad(true);
        generator69.setAttemptLoad(false);
        boolean boolean74 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator69.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        boolean boolean79 = namingPolicy75.equals((java.lang.Object) generator76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator76.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray81 = generatorStrategy58.generate((org.mockito.cglib.core.ClassGenerator) generator76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass15 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator8.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray34);
        boolean boolean39 = generatorStrategy14.equals((java.lang.Object) classArray25);
        boolean boolean41 = generatorStrategy14.equals((java.lang.Object) (short) 10);
        boolean boolean43 = generatorStrategy14.equals((java.lang.Object) 10);
        generator5.setStrategy(generatorStrategy14);
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        generator46.setUseCache(false);
        generator46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator55.setStrategy(generatorStrategy61);
        generator55.setAttemptLoad(false);
        generator55.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator67.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        generator67.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator67.getStrategy();
        generator55.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator75.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        generator78.setNamingPolicy(namingPolicy79);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator78.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        generator75.setClasses(classArray90);
        generator75.setUseCache(false);
        java.lang.ClassLoader classLoader96 = generator75.getClassLoader();
        boolean boolean97 = generatorStrategy73.equals((java.lang.Object) generator75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator75.getStrategy();
        generator0.setStrategy(generatorStrategy98);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.ClassLoader classLoader25 = generator13.getClassLoader();
        java.lang.ClassLoader classLoader26 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray31 = new java.lang.Object[] { true, (-1), 0.0f, generator30 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin35.newInstance((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader7 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray12 = new java.lang.Object[] { true, (-1), 0.0f, generator11 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray12);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(objArray12);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        org.mockito.cglib.core.Predicate predicate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = namingPolicy4.getClassName("", "", (java.lang.Object) objArray12, predicate18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator37.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator37.setAttemptLoad(true);
        generator37.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(false);
        boolean boolean56 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy58);
        generator37.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setClasses(classArray73);
        java.lang.ClassLoader classLoader75 = generator61.getClassLoader();
        boolean boolean76 = namingPolicy58.equals((java.lang.Object) classLoader75);
        generator0.setClassLoader(classLoader75);
        boolean boolean78 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class<?> wildcardClass12 = objArray7.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin44.newInstance((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray72 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin29.newInstance((java.lang.Object[]) classArray72);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        generator22.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator51.setDelegates((java.lang.Object[]) classArray65);
        boolean boolean68 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass71 = generator70.getClass();
        boolean boolean72 = namingPolicy69.equals((java.lang.Object) generator70);
        generator22.setNamingPolicy(namingPolicy69);
        boolean boolean74 = generator22.getUseCache();
        boolean boolean75 = generatorStrategy21.equals((java.lang.Object) generator22);
        java.lang.Class<?> wildcardClass76 = generator22.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        java.lang.Object obj82 = null;
        org.mockito.cglib.core.Predicate predicate83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = namingPolicy79.getClassName("", "hi!", obj82, predicate83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        boolean boolean21 = generator19.getUseCache();
        generator19.setAttemptLoad(false);
        boolean boolean24 = namingPolicy18.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator47.getStrategy();
        generator35.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        generator56.setAttemptLoad(false);
        boolean boolean61 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator56.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator65.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setDelegates((java.lang.Object[]) classArray77);
        generator56.setClasses(classArray77);
        generator53.setDelegates((java.lang.Object[]) classArray77);
        boolean boolean81 = generatorStrategy51.equals((java.lang.Object) classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator82.setAttemptLoad(true);
        boolean boolean85 = generator82.getUseCache();
        java.lang.Class[] classArray86 = null;
        generator82.setClasses(classArray86);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator82.getNamingPolicy();
        boolean boolean89 = generatorStrategy51.equals((java.lang.Object) generator82);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator82.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy32.getClassName("", "", (java.lang.Object) generator82, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        boolean boolean38 = namingPolicy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator35.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        boolean boolean62 = namingPolicy57.equals((java.lang.Object) classLoader60);
        generator41.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        generator41.setStrategy(generatorStrategy68);
        generator35.setStrategy(generatorStrategy68);
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray78 = new java.lang.Object[] { true, (-1), 0.0f, generator77 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        generator35.setDelegates(objArray78);
        generator0.setDelegates(objArray78);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass24 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass32 = generator31.getClass();
        boolean boolean33 = generatorStrategy30.equals((java.lang.Object) generator31);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Object[] objArray37 = null;
        generator0.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        generator39.setUseCache(false);
        boolean boolean53 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator55.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator55.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray91);
        generator39.setClassLoader(classLoader80);
        generator0.setClassLoader(classLoader80);
        boolean boolean96 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        boolean boolean59 = generator0.getAttemptLoad();
        boolean boolean60 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classArray53);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator61.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        generator61.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray87);
        boolean boolean92 = generatorStrategy67.equals((java.lang.Object) classArray78);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray98);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        generator26.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator26.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setClasses(classArray67);
        generator26.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator26.getStrategy();
        org.mockito.cglib.core.Predicate predicate73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = namingPolicy23.getClassName("hi!", "hi!", (java.lang.Object) generator26, predicate73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        generator56.setAttemptLoad(false);
        boolean boolean61 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator56.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator65.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setDelegates((java.lang.Object[]) classArray77);
        generator56.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        boolean boolean82 = namingPolicy54.equals((java.lang.Object) classArray77);
        generator47.setDelegates((java.lang.Object[]) classArray77);
        boolean boolean84 = generatorStrategy45.equals((java.lang.Object) generator47);
        generator47.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator47.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Object[] objArray30 = null;
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        boolean boolean40 = generatorStrategy13.equals((java.lang.Object) (short) 10);
        generator5.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean51 = namingPolicy31.equals((java.lang.Object) mixin50);
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray60);
        generator0.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
        generator0.setStyle((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator0.setDelegates(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class<?> wildcardClass53 = objArray47.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        generator40.setUseCache(false);
        boolean boolean54 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator40.setNamingPolicy(namingPolicy55);
        boolean boolean57 = generator40.getAttemptLoad();
        boolean boolean58 = generator40.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray59 = generatorStrategy39.generate((org.mockito.cglib.core.ClassGenerator) generator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator0.getUseCache();
        boolean boolean37 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean71 = generator0.getAttemptLoad();
        java.lang.Object[] objArray72 = null;
        generator0.setDelegates(objArray72);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        generator4.setUseCache(false);
        boolean boolean18 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator4.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin39 = generator23.create();
        generator23.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = generatorStrategy21.generate((org.mockito.cglib.core.ClassGenerator) generator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        generator0.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        boolean boolean3 = namingPolicy1.equals((java.lang.Object) ' ');
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator6.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator6.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.Predicate predicate45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = namingPolicy1.getClassName("hi!", "hi!", (java.lang.Object) generatorStrategy16, predicate45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        generator0.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass19 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        generator10.setStyle(0);
        generator10.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = namingPolicy7.getClassName("hi!", "hi!", (java.lang.Object) generator10, predicate37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        generator7.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        generator4.setUseCache(false);
        boolean boolean18 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator4.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader24 = null;
        generator23.setClassLoader(classLoader24);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        generator23.setClasses(classArray38);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator23.getNamingPolicy();
        boolean boolean54 = generatorStrategy21.equals((java.lang.Object) namingPolicy53);
        java.lang.Object obj57 = null;
        org.mockito.cglib.core.Predicate predicate58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = namingPolicy53.getClassName("", "hi!", obj57, predicate58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator5.setNamingPolicy(namingPolicy6);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        generator5.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        generator5.setDelegates(objArray45);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean54 = namingPolicy4.equals((java.lang.Object) mixin53);
        java.lang.Class<?> wildcardClass55 = mixin53.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.io.Serializable");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray74);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin47 = generator0.create();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getUseCache();
        boolean boolean44 = generator0.getAttemptLoad();
        boolean boolean45 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        boolean boolean86 = generatorStrategy59.equals((java.lang.Object) (short) 10);
        generator51.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator51.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator51.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator27.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = null;
        generator27.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        boolean boolean58 = generatorStrategy33.equals((java.lang.Object) classArray44);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray74 = new java.lang.Object[] { true, (-1), 0.0f, generator73 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        generator65.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin64.newInstance(objArray74);
        generator0.setDelegates(objArray74);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator30.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        boolean boolean48 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator34.getNamingPolicy();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        boolean boolean60 = namingPolicy49.equals((java.lang.Object) objArray57);
        generator30.setNamingPolicy(namingPolicy49);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray62 = generatorStrategy29.generate((org.mockito.cglib.core.ClassGenerator) generator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator10.setStrategy(generatorStrategy16);
        generator10.setAttemptLoad(false);
        generator10.setStyle((int) (byte) 0);
        generator10.setAttemptLoad(false);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin36.newInstance(objArray56);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin61.newInstance(objArray69);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator10.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.ClassLoader classLoader77 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray82 = new java.lang.Object[] { true, (-1), 0.0f, generator81 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin76.newInstance(objArray82);
        boolean boolean88 = generatorStrategy9.equals((java.lang.Object) mixin76);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray51);
        boolean boolean56 = generatorStrategy6.equals((java.lang.Object) objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator71.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        boolean boolean77 = namingPolicy72.equals((java.lang.Object) classLoader75);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        boolean boolean92 = namingPolicy72.equals((java.lang.Object) mixin91);
        boolean boolean93 = generatorStrategy6.equals((java.lang.Object) boolean92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean73 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin74 = generator5.create();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator5.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin74);
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader27 = null;
        generator13.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator32.getNamingPolicy();
        java.lang.ClassLoader classLoader57 = generator32.getClassLoader();
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classLoader57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader57);
        org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        generator22.setUseCache(false);
        java.lang.ClassLoader classLoader36 = null;
        generator22.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator22.getStrategy();
        java.lang.ClassLoader classLoader39 = generator22.getClassLoader();
        boolean boolean40 = generator22.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        boolean boolean62 = namingPolicy57.equals((java.lang.Object) classLoader60);
        generator41.setNamingPolicy(namingPolicy57);
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        generator41.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator41.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin98 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator18.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray44);
        boolean boolean49 = generatorStrategy24.equals((java.lang.Object) classArray35);
        boolean boolean51 = generatorStrategy24.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator16.getStrategy();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        boolean boolean65 = generatorStrategy53.equals((java.lang.Object) mixin64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        boolean boolean78 = generatorStrategy53.equals((java.lang.Object) objArray74);
        generator0.setDelegates(objArray74);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean84 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        generator4.setUseCache(false);
        boolean boolean18 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator4.getNamingPolicy();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        boolean boolean30 = namingPolicy19.equals((java.lang.Object) objArray27);
        generator0.setNamingPolicy(namingPolicy19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader82 = null;
        generator81.setClassLoader(classLoader82);
        boolean boolean84 = namingPolicy79.equals((java.lang.Object) classLoader82);
        generator63.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator86.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = null;
        generator86.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator86.getStrategy();
        generator63.setStrategy(generatorStrategy90);
        generator0.setStrategy(generatorStrategy90);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator11.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        boolean boolean42 = generatorStrategy17.equals((java.lang.Object) classArray28);
        boolean boolean44 = generatorStrategy17.equals((java.lang.Object) (short) 10);
        generator9.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator9.getStrategy();
        generator9.setAttemptLoad(true);
        boolean boolean49 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        boolean boolean72 = namingPolicy67.equals((java.lang.Object) classLoader70);
        generator51.setNamingPolicy(namingPolicy67);
        generator51.setStyle(0);
        generator51.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator51.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy78);
        generator0.setNamingPolicy(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        boolean boolean56 = namingPolicy41.equals((java.lang.Object) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        boolean boolean60 = generator57.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray66 = new java.lang.Object[] { true, (-1), 0.0f, generator65 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        generator57.setDelegates(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        java.lang.ClassLoader classLoader71 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray76 = new java.lang.Object[] { true, (-1), 0.0f, generator75 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin80.newInstance((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin70.newInstance((java.lang.Object[]) classArray90);
        boolean boolean95 = namingPolicy41.equals((java.lang.Object) mixin94);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator16.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = null;
        generator16.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        boolean boolean47 = generatorStrategy22.equals((java.lang.Object) classArray33);
        boolean boolean49 = generatorStrategy22.equals((java.lang.Object) (short) 10);
        generator14.setStrategy(generatorStrategy22);
        generator6.setStrategy(generatorStrategy22);
        generator0.setStrategy(generatorStrategy22);
        boolean boolean53 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = generator27.getClassLoader();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray81);
        boolean boolean86 = generatorStrategy61.equals((java.lang.Object) classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray72);
        generator0.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = null;
        generator0.setNamingPolicy(namingPolicy93);
        java.lang.Class<?> wildcardClass95 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator32.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        generator32.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator32.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        boolean boolean46 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator41.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setDelegates((java.lang.Object[]) classArray62);
        generator41.setClasses(classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator41.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator41.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray77);
        generator30.setClassLoader(classLoader66);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        generator30.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray35);
        boolean boolean40 = generatorStrategy15.equals((java.lang.Object) classArray26);
        boolean boolean42 = generatorStrategy15.equals((java.lang.Object) (short) 10);
        generator7.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        boolean boolean46 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        boolean boolean52 = generator47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator47.setStrategy(generatorStrategy53);
        generator47.setAttemptLoad(false);
        generator47.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator59.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader63 = null;
        generator59.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator59.getStrategy();
        generator47.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator47.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        generator68.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator68.getStrategy();
        boolean boolean74 = namingPolicy67.equals((java.lang.Object) generatorStrategy73);
        generator0.setNamingPolicy(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        generator8.setUseCache(false);
        java.lang.ClassLoader classLoader22 = null;
        generator8.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(false);
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator36.setDelegates((java.lang.Object[]) classArray48);
        generator27.setClasses(classArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator27.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = generator27.getClassLoader();
        boolean boolean53 = namingPolicy25.equals((java.lang.Object) classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray66);
        generator0.setClassLoader(classLoader52);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin71 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setClasses(classArray62);
        generator48.setDelegates((java.lang.Object[]) classArray62);
        boolean boolean65 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        generator48.setDelegates(objArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator81.setStrategy(generatorStrategy83);
        generator81.setAttemptLoad(false);
        boolean boolean87 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator81.getStrategy();
        generator48.setStrategy(generatorStrategy88);
        generator48.setUseCache(false);
        boolean boolean92 = generatorStrategy47.equals((java.lang.Object) generator48);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator48.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray66 = new java.lang.Object[] { true, (-1), 0.0f, generator65 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        generator0.setDelegates(objArray66);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        generator20.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader27 = null;
        generator26.setClassLoader(classLoader27);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator31.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator36.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = null;
        generator36.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        boolean boolean67 = generatorStrategy42.equals((java.lang.Object) classArray53);
        boolean boolean69 = generatorStrategy42.equals((java.lang.Object) (short) 10);
        generator34.setStrategy(generatorStrategy42);
        generator26.setStrategy(generatorStrategy42);
        generator20.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setClasses(classArray83);
        generator73.setUseCache(false);
        boolean boolean87 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator73.getNamingPolicy();
        generator73.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator73.getStrategy();
        java.lang.ClassLoader classLoader92 = generator73.getClassLoader();
        generator20.setClassLoader(classLoader92);
        org.mockito.cglib.core.Predicate predicate94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = namingPolicy17.getClassName("", "hi!", (java.lang.Object) classLoader92, predicate94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = namingPolicy11.equals((java.lang.Object) generator12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator12.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        boolean boolean39 = namingPolicy34.equals((java.lang.Object) classLoader37);
        generator18.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator41.getStrategy();
        generator18.setStrategy(generatorStrategy45);
        generator12.setStrategy(generatorStrategy45);
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        generator12.setClassLoader(classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        generator12.setClasses(classArray89);
        generator0.setClasses(classArray89);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        boolean boolean97 = generator0.getUseCache();
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        generator60.setAttemptLoad(false);
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator60.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        boolean boolean70 = namingPolicy66.equals((java.lang.Object) generator67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator67.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator67.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator67.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = generatorStrategy59.generate((org.mockito.cglib.core.ClassGenerator) generator67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean71 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator19.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setDelegates((java.lang.Object[]) classArray40);
        generator19.setClasses(classArray40);
        generator16.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator16.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = generator45.getClassLoader();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray79);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray69);
        generator16.setDelegates((java.lang.Object[]) classArray69);
        generator16.setAttemptLoad(true);
        boolean boolean90 = namingPolicy15.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        boolean boolean42 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        boolean boolean44 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        generator0.setDelegates(objArray56);
        boolean boolean63 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getAttemptLoad();
        boolean boolean86 = generator0.getUseCache();
        java.lang.Object[] objArray87 = null;
        generator0.setDelegates(objArray87);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        generator22.setUseCache(false);
        java.lang.ClassLoader classLoader36 = null;
        generator22.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator22.getStrategy();
        java.lang.ClassLoader classLoader39 = generator22.getClassLoader();
        boolean boolean40 = generator22.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        boolean boolean62 = namingPolicy57.equals((java.lang.Object) classLoader60);
        generator41.setNamingPolicy(namingPolicy57);
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        generator41.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator41.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setAttemptLoad(true);
        boolean boolean39 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator36.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = namingPolicy33.getClassName("hi!", "", (java.lang.Object) namingPolicy40, predicate41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        generator47.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader86 = generator61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator61.getStrategy();
        generator47.setStrategy(generatorStrategy87);
        boolean boolean89 = generator47.getUseCache();
        java.lang.ClassLoader classLoader90 = generator47.getClassLoader();
        generator39.setClassLoader(classLoader90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin92 = generator39.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        generator18.setStrategy(generatorStrategy36);
        generator18.setUseCache(false);
        generator18.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = generatorStrategy16.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setDelegates(objArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        boolean boolean28 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator29.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        generator29.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator29.getStrategy();
        generator14.setStrategy(generatorStrategy36);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = generatorStrategy13.generate((org.mockito.cglib.core.ClassGenerator) generator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass95 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin76 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        java.lang.Object[] objArray89 = null;
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray87, objArray89);
        java.lang.Class<?> wildcardClass91 = classArray87.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        generator0.setStyle(2);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        generator15.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator40.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = null;
        generator40.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray66);
        boolean boolean71 = generatorStrategy46.equals((java.lang.Object) classArray57);
        boolean boolean73 = generatorStrategy46.equals((java.lang.Object) (short) 10);
        generator38.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator38.getStrategy();
        boolean boolean76 = namingPolicy31.equals((java.lang.Object) generatorStrategy75);
        generator0.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        generator78.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        generator78.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray84 = generatorStrategy75.generate((org.mockito.cglib.core.ClassGenerator) generator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        boolean boolean34 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass35 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        boolean boolean85 = generator0.getAttemptLoad();
        boolean boolean86 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass87 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader10 = null;
        generator9.setClassLoader(classLoader10);
        java.lang.ClassLoader classLoader12 = null;
        generator9.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator14.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        boolean boolean45 = generatorStrategy20.equals((java.lang.Object) classArray31);
        generator9.setDelegates((java.lang.Object[]) classArray31);
        generator0.setClasses(classArray31);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        boolean boolean42 = namingPolicy37.equals((java.lang.Object) classLoader40);
        generator21.setNamingPolicy(namingPolicy37);
        generator21.setStyle(0);
        generator21.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        boolean boolean60 = generator48.getAttemptLoad();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(true);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        generator48.setDelegates((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray86);
        generator21.setDelegates((java.lang.Object[]) classArray74);
        boolean boolean92 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator21.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator21.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray95 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        boolean boolean44 = generatorStrategy19.equals((java.lang.Object) classArray30);
        boolean boolean46 = generatorStrategy19.equals((java.lang.Object) (short) 10);
        generator11.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader54 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        boolean boolean81 = namingPolicy53.equals((java.lang.Object) classArray76);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        boolean boolean83 = generatorStrategy48.equals((java.lang.Object) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator0.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray84);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        boolean boolean22 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray36 = new java.lang.Object[] { true, (-1), 0.0f, generator35 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin40.newInstance((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray73);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray64);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        generator0.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin82.newInstance((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass32 = mixin31.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray66 = new java.lang.Object[] { true, (-1), 0.0f, generator65 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        generator0.setDelegates(objArray66);
        java.lang.Class<?> wildcardClass71 = objArray66.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.Object[] objArray19 = null;
        org.mockito.cglib.proxy.Mixin mixin20 = mixin18.newInstance(objArray19);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin20);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.ClassLoader classLoader74 = generator7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator7.getStrategy();
        boolean boolean76 = generator7.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        boolean boolean16 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray48);
        generator13.setClasses(classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray63);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin12.newInstance((java.lang.Object[]) classArray68);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        generator18.setDelegates((java.lang.Object[]) classArray32);
        boolean boolean35 = generator18.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin36 = generator18.create();
        boolean boolean37 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin39 = generator18.create();
        boolean boolean40 = generatorStrategy17.equals((java.lang.Object) generator18);
        java.lang.ClassLoader classLoader41 = generator18.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator18.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader28 = null;
        generator14.setClassLoader(classLoader28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        generator33.setAttemptLoad(false);
        boolean boolean38 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator33.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator42.setNamingPolicy(namingPolicy43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setDelegates((java.lang.Object[]) classArray54);
        generator33.setClasses(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator33.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = generator33.getClassLoader();
        boolean boolean59 = namingPolicy31.equals((java.lang.Object) classLoader58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin70.newInstance((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray83);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = generator27.getClassLoader();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray81);
        boolean boolean86 = generatorStrategy61.equals((java.lang.Object) classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray72);
        generator0.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setDelegates(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray44 = new java.lang.Object[] { true, (-1), 0.0f, generator43 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        generator26.setDelegates(objArray44);
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray87);
        generator26.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader91 = generator26.getClassLoader();
        generator14.setClassLoader(classLoader91);
        boolean boolean93 = namingPolicy13.equals((java.lang.Object) classLoader91);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass36 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setDelegates((java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin33.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        generator60.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        generator60.setClassLoader(classLoader74);
        java.lang.Object[] objArray76 = new java.lang.Object[] { objArray53, (byte) 100, generator60 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray53);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator79.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin78.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        generator0.setDelegates((java.lang.Object[]) classArray94);
        boolean boolean96 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean99 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        generator28.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin27.newInstance((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        boolean boolean72 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass11 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray46);
        generator0.setClasses(classArray46);
        generator0.setStyle((int) (short) 0);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        generator9.setNamingPolicy(namingPolicy25);
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        generator9.setDelegates((java.lang.Object[]) classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        generator13.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator13.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray64);
        generator13.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray64);
        java.lang.Class<?> wildcardClass70 = classArray64.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        boolean boolean31 = namingPolicy27.equals((java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator28.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        boolean boolean55 = namingPolicy50.equals((java.lang.Object) classLoader53);
        generator34.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator57.getStrategy();
        generator34.setStrategy(generatorStrategy61);
        generator28.setStrategy(generatorStrategy61);
        generator9.setStrategy(generatorStrategy61);
        boolean boolean65 = generator9.getUseCache();
        java.lang.ClassLoader classLoader66 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader66);
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        boolean boolean44 = generatorStrategy19.equals((java.lang.Object) classArray30);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator52.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator61.setNamingPolicy(namingPolicy62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setDelegates((java.lang.Object[]) classArray73);
        generator52.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        boolean boolean78 = namingPolicy50.equals((java.lang.Object) classArray73);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator7.setAttemptLoad(true);
        boolean boolean74 = generator7.getUseCache();
        generator7.setStyle((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin77 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        boolean boolean27 = generator22.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator22.setStrategy(generatorStrategy28);
        generator22.setAttemptLoad(false);
        generator22.setStyle((int) (byte) 0);
        generator22.setAttemptLoad(false);
        boolean boolean36 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator22.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = generatorStrategy21.generate((org.mockito.cglib.core.ClassGenerator) generator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        generator7.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator7.getNamingPolicy();
        boolean boolean25 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setClasses(classArray40);
        generator26.setDelegates((java.lang.Object[]) classArray40);
        boolean boolean43 = generator26.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin44 = generator26.create();
        boolean boolean45 = generator26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator26.getStrategy();
        java.lang.ClassLoader classLoader48 = generator26.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator49.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator49.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray64);
        generator7.setClassLoader(classLoader48);
        generator0.setClassLoader(classLoader48);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray78);
        java.lang.Class<?> wildcardClass83 = classLoader48.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator38.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = null;
        generator38.setClassLoader(classLoader42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        boolean boolean69 = generatorStrategy44.equals((java.lang.Object) classArray55);
        boolean boolean71 = generatorStrategy44.equals((java.lang.Object) (short) 10);
        generator36.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator36.getStrategy();
        boolean boolean74 = namingPolicy29.equals((java.lang.Object) generatorStrategy73);
        generator0.setStrategy(generatorStrategy73);
        java.lang.Class<?> wildcardClass76 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        generator1.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator39.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classArray66);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        boolean boolean73 = generatorStrategy38.equals((java.lang.Object) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray24);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        boolean boolean44 = generator32.getAttemptLoad();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader50 = null;
        generator49.setClassLoader(classLoader50);
        generator49.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy55);
        generator49.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator49.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin mixin63 = generator0.create();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin62 = generator0.create();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator8.setStrategy(generatorStrategy14);
        generator8.setAttemptLoad(false);
        generator8.setStyle((int) (byte) 0);
        generator8.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin59.newInstance(objArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator8.setClasses(classArray72);
        boolean boolean74 = namingPolicy7.equals((java.lang.Object) generator8);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator75.setAttemptLoad(true);
        generator75.setAttemptLoad(false);
        boolean boolean80 = generator75.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator75.setStrategy(generatorStrategy81);
        generator75.setAttemptLoad(false);
        generator75.setStyle((int) (byte) 0);
        generator75.setAttemptLoad(false);
        boolean boolean89 = generator75.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator75.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy90);
        java.lang.ClassLoader classLoader92 = generator8.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator8.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator8.setStrategy(generatorStrategy14);
        generator8.setAttemptLoad(false);
        generator8.setStyle((int) (byte) 0);
        generator8.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin59.newInstance(objArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator8.setClasses(classArray72);
        boolean boolean74 = namingPolicy7.equals((java.lang.Object) generator8);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator8.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator0.setStrategy(generatorStrategy67);
        generator0.setUseCache(true);
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        generator14.setDelegates((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator14.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy77);
        generator14.setNamingPolicy(namingPolicy77);
        boolean boolean80 = generator14.getAttemptLoad();
        boolean boolean81 = namingPolicy13.equals((java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator14.getStrategy();
        generator14.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader3 = null;
        generator2.setClassLoader(classLoader3);
        generator2.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        generator7.setAttemptLoad(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = namingPolicy13.equals((java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator14.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        boolean boolean41 = namingPolicy36.equals((java.lang.Object) classLoader39);
        generator20.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator43.getStrategy();
        generator20.setStrategy(generatorStrategy47);
        generator14.setStrategy(generatorStrategy47);
        generator14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator52.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator61.setNamingPolicy(namingPolicy62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setDelegates((java.lang.Object[]) classArray73);
        generator52.setClasses(classArray73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader77 = generator52.getClassLoader();
        generator14.setClassLoader(classLoader77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator79.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        generator14.setClasses(classArray91);
        generator2.setClasses(classArray91);
        generator2.setAttemptLoad(false);
        java.lang.ClassLoader classLoader98 = generator2.getClassLoader();
        generator0.setClassLoader(classLoader98);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classLoader98);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        boolean boolean43 = generatorStrategy18.equals((java.lang.Object) classArray29);
        org.mockito.cglib.proxy.Mixin mixin44 = mixin11.newInstance((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        boolean boolean48 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray54 = new java.lang.Object[] { true, (-1), 0.0f, generator53 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        generator45.setDelegates(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin44.newInstance(objArray54);
        java.lang.Class<?> wildcardClass60 = objArray54.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        boolean boolean40 = generatorStrategy13.equals((java.lang.Object) (short) 10);
        generator5.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        generator0.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        boolean boolean47 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator24.getStrategy();
        generator12.setStrategy(generatorStrategy28);
        generator0.setStrategy(generatorStrategy28);
        boolean boolean31 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        java.lang.ClassLoader classLoader16 = generator2.getClassLoader();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray36);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray36);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin43.newInstance((java.lang.Object[]) classArray54);
        generator1.setClasses(classArray54);
        generator1.setUseCache(false);
        boolean boolean62 = generator1.getAttemptLoad();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator1.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray74);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        boolean boolean32 = generator29.getUseCache();
        boolean boolean33 = generator29.getAttemptLoad();
        java.lang.Class<?> wildcardClass34 = generator29.getClass();
        boolean boolean35 = namingPolicy28.equals((java.lang.Object) wildcardClass34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        generator36.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator36.setClassLoader(classLoader41);
        generator36.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        generator45.setUseCache(false);
        java.lang.ClassLoader classLoader59 = null;
        generator45.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader89 = generator64.getClassLoader();
        boolean boolean90 = namingPolicy62.equals((java.lang.Object) classLoader89);
        generator36.setClassLoader(classLoader89);
        boolean boolean92 = generator36.getUseCache();
        generator36.setUseCache(false);
        java.lang.Object[] objArray95 = null;
        generator36.setDelegates(objArray95);
        java.lang.ClassLoader classLoader97 = generator36.getClassLoader();
        boolean boolean98 = namingPolicy28.equals((java.lang.Object) classLoader97);
        java.lang.Class<?> wildcardClass99 = namingPolicy28.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        java.lang.ClassLoader classLoader46 = generator32.getClassLoader();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray66);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray66);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        boolean boolean73 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator74.getStrategy();
        generator7.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader82 = null;
        generator81.setClassLoader(classLoader82);
        generator81.setUseCache(false);
        java.lang.ClassLoader classLoader86 = null;
        generator81.setClassLoader(classLoader86);
        boolean boolean88 = namingPolicy80.equals((java.lang.Object) classLoader86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(objArray20);
        org.mockito.cglib.core.Predicate predicate24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = namingPolicy10.getClassName("", "", (java.lang.Object) objArray20, predicate24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setStyle(1);
        boolean boolean52 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified class interface java.lang.Comparable is incompatible with delegate class class java.lang.Class (index 1)");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        generator52.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin51.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class<?> wildcardClass39 = classArray17.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        generator7.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator7.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        boolean boolean34 = namingPolicy32.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy54);
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator39.setDelegates(objArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray70);
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        generator47.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader86 = generator61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator61.getStrategy();
        generator47.setStrategy(generatorStrategy87);
        boolean boolean89 = generator47.getUseCache();
        java.lang.ClassLoader classLoader90 = generator47.getClassLoader();
        generator39.setClassLoader(classLoader90);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator39.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        boolean boolean29 = namingPolicy25.equals((java.lang.Object) generator26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator26.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader51 = null;
        generator50.setClassLoader(classLoader51);
        boolean boolean53 = namingPolicy48.equals((java.lang.Object) classLoader51);
        generator32.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator55.getStrategy();
        generator32.setStrategy(generatorStrategy59);
        generator26.setStrategy(generatorStrategy59);
        generator26.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator64.getNamingPolicy();
        java.lang.ClassLoader classLoader89 = generator64.getClassLoader();
        generator26.setClassLoader(classLoader89);
        boolean boolean91 = generator26.getUseCache();
        java.lang.ClassLoader classLoader92 = generator26.getClassLoader();
        boolean boolean93 = namingPolicy18.equals((java.lang.Object) generator26);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator26.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        boolean boolean11 = generator5.getUseCache();
        boolean boolean12 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        boolean boolean16 = generator13.getUseCache();
        java.lang.Class[] classArray17 = null;
        generator13.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        generator13.setStrategy(generatorStrategy23);
        generator5.setStrategy(generatorStrategy23);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        boolean boolean57 = generator0.getUseCache();
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        generator16.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        boolean boolean77 = generatorStrategy50.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        generator82.setUseCache(false);
        generator82.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator82.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator90 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator90.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator90.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator90.getStrategy();
        boolean boolean95 = generator90.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator90.getNamingPolicy();
        generator82.setNamingPolicy(namingPolicy96);
        boolean boolean98 = namingPolicy81.equals((java.lang.Object) namingPolicy96);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        generator33.setAttemptLoad(false);
        boolean boolean38 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator33.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        generator33.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator58.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        boolean boolean64 = namingPolicy59.equals((java.lang.Object) classLoader62);
        generator43.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator66.getStrategy();
        generator43.setStrategy(generatorStrategy70);
        generator33.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator33.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(false);
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        boolean boolean39 = namingPolicy35.equals((java.lang.Object) generator36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        generator42.setAttemptLoad(false);
        boolean boolean47 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator42.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        generator42.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator42.getNamingPolicy();
        boolean boolean53 = namingPolicy41.equals((java.lang.Object) generator42);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        boolean boolean47 = generator0.getUseCache();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        boolean boolean50 = generatorStrategy37.equals((java.lang.Object) classArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass53 = classArray47.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        generator0.setStyle(2);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.Class[] classArray24 = null;
        generator0.setClasses(classArray24);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        generator42.setAttemptLoad(false);
        boolean boolean47 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator42.setStrategy(generatorStrategy48);
        generator42.setAttemptLoad(false);
        generator42.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator54.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = null;
        generator54.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator54.getStrategy();
        generator42.setStrategy(generatorStrategy60);
        generator42.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        generator42.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray76);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        boolean boolean26 = generator0.getAttemptLoad();
        boolean boolean27 = generator0.getAttemptLoad();
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Object[] objArray37 = null;
        generator0.setDelegates(objArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(generatorStrategy39);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator51.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator65.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy66);
        generator51.setUseCache(false);
        generator51.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin72 = generator51.create();
        boolean boolean73 = generatorStrategy50.equals((java.lang.Object) mixin72);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin26.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator19.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setDelegates((java.lang.Object[]) classArray40);
        generator19.setClasses(classArray40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = generator19.getClassLoader();
        boolean boolean45 = namingPolicy17.equals((java.lang.Object) classLoader44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin56.newInstance((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator72.setNamingPolicy(namingPolicy73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator72.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray90 = new java.lang.Object[] { true, (-1), 0.0f, generator89 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        generator72.setDelegates(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean39 = generator0.getUseCache();
        boolean boolean40 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        boolean boolean56 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setStyle((int) (byte) 1);
        boolean boolean61 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator26.setDelegates(objArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator17.setClasses(classArray56);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(false);
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator0.setClasses(classArray38);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin46.newInstance((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Object[] objArray80 = null;
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        generator0.setStyle((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.io.Serializable");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin35.newInstance(objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        generator62.setUseCache(false);
        java.lang.ClassLoader classLoader76 = null;
        generator62.setClassLoader(classLoader76);
        java.lang.Object[] objArray78 = new java.lang.Object[] { objArray55, (byte) 100, generator62 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray55);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setClasses(classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin80.newInstance((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray97);
        boolean boolean99 = namingPolicy8.equals((java.lang.Object) classArray97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass58 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator32.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        generator32.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        boolean boolean63 = generatorStrategy38.equals((java.lang.Object) classArray49);
        boolean boolean65 = generatorStrategy38.equals((java.lang.Object) (short) 10);
        generator30.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator30.getStrategy();
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator30.setDelegates(objArray77);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin29.newInstance((java.lang.Object[]) classArray83);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        boolean boolean10 = generatorStrategy7.equals((java.lang.Object) namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        boolean boolean21 = namingPolicy17.equals((java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator18.getStrategy();
        boolean boolean23 = generator18.getAttemptLoad();
        generator18.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = generatorStrategy7.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = namingPolicy11.equals((java.lang.Object) generator12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator12.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader37 = null;
        generator36.setClassLoader(classLoader37);
        boolean boolean39 = namingPolicy34.equals((java.lang.Object) classLoader37);
        generator18.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator41.getStrategy();
        generator18.setStrategy(generatorStrategy45);
        generator12.setStrategy(generatorStrategy45);
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        generator12.setClassLoader(classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        generator12.setClasses(classArray89);
        generator0.setClasses(classArray89);
        generator0.setAttemptLoad(false);
        boolean boolean96 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = namingPolicy12.equals((java.lang.Object) generator13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator13.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator42.getStrategy();
        generator19.setStrategy(generatorStrategy46);
        generator13.setStrategy(generatorStrategy46);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        generator13.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator13.getNamingPolicy();
        java.lang.ClassLoader classLoader79 = generator13.getClassLoader();
        boolean boolean80 = generator13.getUseCache();
        boolean boolean81 = generator13.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = generatorStrategy5.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray30);
        boolean boolean35 = generatorStrategy10.equals((java.lang.Object) classArray21);
        boolean boolean37 = generatorStrategy10.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy10);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean71 = generator0.getAttemptLoad();
        boolean boolean72 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator36.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = null;
        generator36.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        boolean boolean67 = generatorStrategy42.equals((java.lang.Object) classArray53);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setDelegates(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin69.newInstance(objArray78);
        generator0.setDelegates(objArray78);
        org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator50.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = null;
        generator50.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        boolean boolean81 = generatorStrategy56.equals((java.lang.Object) classArray67);
        boolean boolean83 = generatorStrategy56.equals((java.lang.Object) (short) 10);
        generator48.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator48.getStrategy();
        boolean boolean86 = namingPolicy41.equals((java.lang.Object) generatorStrategy85);
        java.lang.Object obj87 = null;
        boolean boolean88 = generatorStrategy85.equals(obj87);
        generator0.setStrategy(generatorStrategy85);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass48 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator18.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        boolean boolean24 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator27.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator48.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator27.setClasses(classArray60);
        generator18.setClasses(classArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin mixin68 = generator0.create();
        boolean boolean69 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin26.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = namingPolicy46.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator47.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        boolean boolean74 = namingPolicy69.equals((java.lang.Object) classLoader72);
        generator53.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator76.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator76.getStrategy();
        generator53.setStrategy(generatorStrategy80);
        generator47.setStrategy(generatorStrategy80);
        boolean boolean83 = generatorStrategy37.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator47.getNamingPolicy();
        generator47.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator47.getStrategy();
        java.lang.Class<?> wildcardClass88 = generator47.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        boolean boolean52 = generatorStrategy25.equals((java.lang.Object) (short) 10);
        generator17.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.core.Predicate predicate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = namingPolicy58.getClassName("", "hi!", (java.lang.Object) classArray70, predicate71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        boolean boolean36 = generatorStrategy11.equals((java.lang.Object) classArray22);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        boolean boolean87 = generatorStrategy62.equals((java.lang.Object) classArray73);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray73);
        boolean boolean92 = namingPolicy4.equals((java.lang.Object) classArray73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (-1), 0.0f, generator16 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin21.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        generator0.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator62.setAttemptLoad(true);
        generator62.setAttemptLoad(false);
        boolean boolean67 = generator62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator62.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator62.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator71.setNamingPolicy(namingPolicy72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator71.setDelegates((java.lang.Object[]) classArray83);
        generator62.setClasses(classArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator62.getNamingPolicy();
        java.lang.ClassLoader classLoader87 = generator62.getClassLoader();
        generator0.setClassLoader(classLoader87);
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator7.getStrategy();
        boolean boolean73 = generator7.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin74 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass78 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        generator10.setClasses(classArray31);
        generator7.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy41);
        boolean boolean43 = generator7.getUseCache();
        boolean boolean44 = generator7.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = generatorStrategy6.generate((org.mockito.cglib.core.ClassGenerator) generator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        boolean boolean32 = generator29.getUseCache();
        boolean boolean33 = generator29.getAttemptLoad();
        java.lang.Class<?> wildcardClass34 = generator29.getClass();
        boolean boolean35 = namingPolicy28.equals((java.lang.Object) wildcardClass34);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.core.Predicate predicate50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = namingPolicy28.getClassName("hi!", "", (java.lang.Object) objArray45, predicate50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        boolean boolean79 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        boolean boolean44 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        generator45.setUseCache(false);
        java.lang.ClassLoader classLoader59 = null;
        generator45.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader65 = null;
        generator64.setClassLoader(classLoader65);
        generator64.setUseCache(false);
        generator64.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator64.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = generatorStrategy62.generate((org.mockito.cglib.core.ClassGenerator) generator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator35.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        boolean boolean66 = generatorStrategy41.equals((java.lang.Object) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin21.newInstance((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        boolean boolean74 = generator7.getUseCache();
        boolean boolean75 = generator7.getAttemptLoad();
        java.lang.Class<?> wildcardClass76 = generator7.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        generator32.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin31.newInstance((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin31.newInstance(objArray68);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator14.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator14.setClasses(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator66.getStrategy();
        generator54.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray77 = new java.lang.Object[] { true, (-1), 0.0f, generator76 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        generator54.setDelegates(objArray77);
        generator0.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        generator56.setAttemptLoad(false);
        boolean boolean61 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator56.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator65.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setDelegates((java.lang.Object[]) classArray77);
        generator56.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        boolean boolean82 = namingPolicy54.equals((java.lang.Object) classArray77);
        generator47.setDelegates((java.lang.Object[]) classArray77);
        boolean boolean84 = generatorStrategy45.equals((java.lang.Object) generator47);
        generator47.setAttemptLoad(false);
        generator47.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader89 = generator47.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = generator32.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        generator45.setUseCache(false);
        generator45.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator53.getStrategy();
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy59);
        generator32.setNamingPolicy(namingPolicy59);
        generator0.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        generator65.setUseCache(false);
        generator65.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator65.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator65.getStrategy();
        org.mockito.cglib.core.Predicate predicate76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = namingPolicy59.getClassName("", "hi!", (java.lang.Object) generator65, predicate76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator8.getStrategy();
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator42.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        boolean boolean74 = namingPolicy46.equals((java.lang.Object) classArray69);
        generator39.setDelegates((java.lang.Object[]) classArray69);
        generator39.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        generator78.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader82 = null;
        generator78.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator78.getStrategy();
        generator39.setStrategy(generatorStrategy84);
        generator22.setStrategy(generatorStrategy84);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator87.setAttemptLoad(true);
        generator87.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator92 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator92.getNamingPolicy();
        boolean boolean95 = namingPolicy93.equals((java.lang.Object) ' ');
        generator87.setNamingPolicy(namingPolicy93);
        boolean boolean97 = generatorStrategy84.equals((java.lang.Object) namingPolicy93);
        generator0.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator64.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy65);
        generator50.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator50.getNamingPolicy();
        generator50.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator50.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray73 = generatorStrategy48.generate((org.mockito.cglib.core.ClassGenerator) generator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator7.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(false);
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        boolean boolean39 = namingPolicy35.equals((java.lang.Object) generator36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        generator42.setAttemptLoad(false);
        boolean boolean47 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator42.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        generator42.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator42.getNamingPolicy();
        boolean boolean53 = namingPolicy41.equals((java.lang.Object) generator42);
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        boolean boolean60 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator57.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray92);
        generator57.setClasses(classArray92);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy41.getClassName("hi!", "hi!", (java.lang.Object) generator57, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        boolean boolean56 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator24.getStrategy();
        generator12.setStrategy(generatorStrategy28);
        generator0.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator31.setClasses(classArray46);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader52 = generator31.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray81);
        boolean boolean86 = generatorStrategy61.equals((java.lang.Object) classArray72);
        boolean boolean88 = generatorStrategy61.equals((java.lang.Object) (short) 10);
        generator53.setStrategy(generatorStrategy61);
        generator31.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin mixin91 = generator31.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator31.getNamingPolicy();
        boolean boolean93 = generatorStrategy28.equals((java.lang.Object) namingPolicy92);
        java.lang.Object obj96 = null;
        org.mockito.cglib.core.Predicate predicate97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = namingPolicy92.getClassName("hi!", "hi!", obj96, predicate97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = generatorStrategy16.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Object[] objArray30 = null;
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass33 = classArray32.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        boolean boolean40 = generatorStrategy13.equals((java.lang.Object) (short) 10);
        generator5.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        boolean boolean46 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        generator73.setStyle((int) (short) 0);
        java.lang.Class<?> wildcardClass78 = generator73.getClass();
        boolean boolean79 = generatorStrategy72.equals((java.lang.Object) generator73);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance((java.lang.Object[]) classArray62);
        java.lang.Object[] objArray64 = null;
        org.mockito.cglib.proxy.Mixin mixin65 = mixin63.newInstance(objArray64);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator35.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        boolean boolean66 = generatorStrategy41.equals((java.lang.Object) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin21.newInstance((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        java.lang.Object[] objArray70 = null;
        generator0.setDelegates(objArray70);
        boolean boolean72 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass73 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator72.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = generatorStrategy71.generate((org.mockito.cglib.core.ClassGenerator) generator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator39.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy40);
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator25.getNamingPolicy();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator25.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = namingPolicy22.getClassName("hi!", "", (java.lang.Object) namingPolicy47, predicate48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setAttemptLoad(true);
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = generator7.getClassLoader();
        boolean boolean73 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator7.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin75 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean23 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        boolean boolean72 = generatorStrategy45.equals((java.lang.Object) (short) 10);
        boolean boolean74 = generatorStrategy45.equals((java.lang.Object) 'a');
        generator0.setStrategy(generatorStrategy45);
        boolean boolean76 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        boolean boolean39 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass42 = generator41.getClass();
        boolean boolean43 = namingPolicy40.equals((java.lang.Object) generator41);
        generator0.setNamingPolicy(namingPolicy40);
        boolean boolean45 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator21.setDelegates((java.lang.Object[]) classArray36);
        generator17.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin38.newInstance(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        generator65.setUseCache(false);
        java.lang.ClassLoader classLoader79 = null;
        generator65.setClassLoader(classLoader79);
        java.lang.Object[] objArray81 = new java.lang.Object[] { objArray58, (byte) 100, generator65 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray58);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator84.setClasses(classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin83.newInstance((java.lang.Object[]) classArray94);
        generator0.setClasses(classArray94);
        java.lang.Class<?> wildcardClass99 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = namingPolicy19.equals((java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator20.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        boolean boolean47 = namingPolicy42.equals((java.lang.Object) classLoader45);
        generator26.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator26.setStrategy(generatorStrategy53);
        generator20.setStrategy(generatorStrategy53);
        generator20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator58.getClassLoader();
        generator20.setClassLoader(classLoader83);
        generator6.setClassLoader(classLoader83);
        generator0.setClassLoader(classLoader83);
        boolean boolean87 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        boolean boolean54 = generatorStrategy29.equals((java.lang.Object) classArray40);
        generator21.setClasses(classArray40);
        generator0.setClasses(classArray40);
        boolean boolean57 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator19.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) classLoader48);
        generator29.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator29.setStrategy(generatorStrategy56);
        generator19.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        boolean boolean85 = generatorStrategy56.equals((java.lang.Object) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray46);
        generator0.setClasses(classArray46);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = namingPolicy66.getClassName("", "", (java.lang.Object) (-1.0f), predicate70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setClasses(classArray56);
        generator42.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator42.getNamingPolicy();
        boolean boolean60 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator42.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        java.lang.ClassLoader classLoader95 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass96 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator65.getNamingPolicy();
        generator65.setAttemptLoad(true);
        boolean boolean92 = generatorStrategy62.equals((java.lang.Object) generator65);
        generator65.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator65.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator65.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        boolean boolean73 = generator7.getUseCache();
        generator7.setStyle((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin76 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (-1), 0.0f, generator16 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin21.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        generator0.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator62.setAttemptLoad(true);
        generator62.setAttemptLoad(false);
        boolean boolean67 = generator62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator62.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator62.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator71.setNamingPolicy(namingPolicy72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator71.setDelegates((java.lang.Object[]) classArray83);
        generator62.setClasses(classArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator62.getNamingPolicy();
        java.lang.ClassLoader classLoader87 = generator62.getClassLoader();
        generator0.setClassLoader(classLoader87);
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator16.getNamingPolicy();
        java.lang.ClassLoader classLoader41 = generator16.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray52);
        generator0.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass33 = namingPolicy32.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator7.setAttemptLoad(true);
        boolean boolean74 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        generator7.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin79 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator14.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator14.setClasses(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        boolean boolean90 = namingPolicy62.equals((java.lang.Object) classArray85);
        generator55.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean92 = generator55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator55.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray8);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator22.setNamingPolicy(namingPolicy23);
        boolean boolean25 = namingPolicy21.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        boolean boolean68 = namingPolicy27.equals((java.lang.Object) classArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin14.newInstance((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator6.setNamingPolicy(namingPolicy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setDelegates((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin32.newInstance(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        generator59.setUseCache(false);
        java.lang.ClassLoader classLoader73 = null;
        generator59.setClassLoader(classLoader73);
        java.lang.Object[] objArray75 = new java.lang.Object[] { objArray52, (byte) 100, generator59 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray52);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin77.newInstance((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        boolean boolean97 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(namingPolicy98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean73 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin74 = generator5.create();
        org.mockito.cglib.proxy.Mixin mixin75 = generator5.create();
        java.lang.ClassLoader classLoader76 = generator5.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        boolean boolean39 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        generator36.setDelegates((java.lang.Object[]) classArray50);
        boolean boolean53 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        generator36.setDelegates(objArray62);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin35.newInstance((java.lang.Object[]) classArray68);
        boolean boolean70 = generatorStrategy7.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        java.lang.Class<?> wildcardClass97 = objArray90.getClass();
        boolean boolean98 = generatorStrategy7.equals((java.lang.Object) objArray90);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classArray53);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator61.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        generator61.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray87);
        boolean boolean92 = generatorStrategy67.equals((java.lang.Object) classArray78);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray98);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean40 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        boolean boolean54 = generatorStrategy29.equals((java.lang.Object) classArray40);
        generator21.setClasses(classArray40);
        generator0.setClasses(classArray40);
        boolean boolean57 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        boolean boolean20 = namingPolicy15.equals((java.lang.Object) classLoader18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray29);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        boolean boolean35 = namingPolicy15.equals((java.lang.Object) mixin34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(false);
        boolean boolean44 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator39.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator48.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setDelegates((java.lang.Object[]) classArray60);
        generator39.setClasses(classArray60);
        generator36.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean64 = namingPolicy15.equals((java.lang.Object) generator36);
        generator36.setUseCache(true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        boolean boolean32 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass34 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        generator0.setDelegates(objArray24);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (-1), 0.0f, generator31 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin36.newInstance((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        java.lang.ClassLoader classLoader94 = generator80.getClassLoader();
        generator0.setClassLoader(classLoader94);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass24 = generatorStrategy23.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray64);
        generator7.setDelegates((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray69);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        boolean boolean32 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setAttemptLoad(true);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        boolean boolean54 = namingPolicy49.equals((java.lang.Object) classLoader52);
        generator33.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator58.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = null;
        generator58.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray84);
        boolean boolean89 = generatorStrategy64.equals((java.lang.Object) classArray75);
        boolean boolean91 = generatorStrategy64.equals((java.lang.Object) (short) 10);
        generator56.setStrategy(generatorStrategy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator56.getStrategy();
        boolean boolean94 = namingPolicy49.equals((java.lang.Object) generatorStrategy93);
        generator18.setStrategy(generatorStrategy93);
        generator0.setStrategy(generatorStrategy93);
        java.lang.Class<?> wildcardClass97 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin34 = generator13.create();
        boolean boolean35 = generator13.getUseCache();
        boolean boolean36 = namingPolicy3.equals((java.lang.Object) generator13);
        java.lang.Class<?> wildcardClass37 = generator13.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator42.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = null;
        generator42.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        boolean boolean73 = generatorStrategy48.equals((java.lang.Object) classArray59);
        boolean boolean75 = generatorStrategy48.equals((java.lang.Object) (short) 10);
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator40.getNamingPolicy();
        boolean boolean79 = generator40.getAttemptLoad();
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray8);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator22.setNamingPolicy(namingPolicy23);
        boolean boolean25 = namingPolicy21.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        boolean boolean68 = namingPolicy27.equals((java.lang.Object) classArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin14.newInstance((java.lang.Object[]) classArray64);
        java.lang.Object[] objArray70 = null;
        org.mockito.cglib.proxy.Mixin mixin71 = mixin14.newInstance(objArray70);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        generator5.setAttemptLoad(false);
        generator5.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        generator25.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        boolean boolean86 = generatorStrategy59.equals((java.lang.Object) (short) 10);
        generator25.setStrategy(generatorStrategy59);
        generator5.setStrategy(generatorStrategy59);
        generator0.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator90 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator90.setAttemptLoad(true);
        generator90.setAttemptLoad(true);
        boolean boolean95 = generatorStrategy59.equals((java.lang.Object) generator90);
        boolean boolean96 = generator90.getUseCache();
        boolean boolean97 = generator90.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator90.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator90.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }
}


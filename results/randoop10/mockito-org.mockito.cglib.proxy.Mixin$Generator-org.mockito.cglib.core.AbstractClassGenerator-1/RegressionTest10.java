import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator45.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = null;
        generator45.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray71);
        boolean boolean76 = generatorStrategy51.equals((java.lang.Object) classArray62);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray62);
        java.lang.Class<?> wildcardClass81 = classArray24.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setUseCache(true);
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator58.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy59);
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator44.setDelegates(objArray70);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator39.setDelegates((java.lang.Object[]) classArray74);
        boolean boolean77 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy78);
        java.lang.Object[] objArray80 = null;
        generator0.setDelegates(objArray80);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator38.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setDelegates((java.lang.Object[]) classArray59);
        generator38.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray59);
        generator20.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        boolean boolean67 = generator64.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator64.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy68);
        generator20.setAttemptLoad(true);
        boolean boolean72 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        boolean boolean22 = namingPolicy7.equals((java.lang.Object) mixin21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        java.lang.ClassLoader classLoader37 = generator23.getClassLoader();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin21.newInstance((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class<?> wildcardClass89 = classArray88.getClass();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        boolean boolean46 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator35.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        boolean boolean66 = generatorStrategy41.equals((java.lang.Object) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin21.newInstance((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        java.lang.Object[] objArray70 = null;
        generator0.setDelegates(objArray70);
        generator0.setAttemptLoad(true);
        boolean boolean74 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader30 = null;
        generator29.setClassLoader(classLoader30);
        generator29.setUseCache(false);
        generator29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator37.getStrategy();
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy43);
        generator16.setNamingPolicy(namingPolicy43);
        boolean boolean46 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader47 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader47);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator16.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = null;
        generator16.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator16.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = namingPolicy23.equals((java.lang.Object) false);
        generator0.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = generator32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator32.getNamingPolicy();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator32.setClasses(classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator32.getNamingPolicy();
        boolean boolean61 = namingPolicy23.equals((java.lang.Object) namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        boolean boolean76 = generator64.getAttemptLoad();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator64.getNamingPolicy();
        boolean boolean82 = generator64.getAttemptLoad();
        boolean boolean83 = generator64.getUseCache();
        org.mockito.cglib.core.Predicate predicate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = namingPolicy60.getClassName("", "hi!", (java.lang.Object) boolean83, predicate84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin81 = generator0.create();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setStyle(0);
        boolean boolean10 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        boolean boolean42 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        boolean boolean44 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        generator0.setDelegates(objArray56);
        boolean boolean63 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        boolean boolean72 = generator68.getAttemptLoad();
        generator68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator68.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        generator10.setClasses(classArray31);
        generator7.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        boolean boolean37 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        generator0.setUseCache(false);
        boolean boolean89 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        generator17.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(false);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin63.newInstance((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator17.setDelegates((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray95);
        java.lang.Class<?> wildcardClass97 = classArray95.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = generator9.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator38.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        boolean boolean70 = namingPolicy42.equals((java.lang.Object) classArray65);
        generator35.setDelegates((java.lang.Object[]) classArray65);
        generator35.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = null;
        generator74.setNamingPolicy(namingPolicy76);
        java.lang.ClassLoader classLoader78 = null;
        generator74.setClassLoader(classLoader78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator74.getStrategy();
        generator35.setStrategy(generatorStrategy80);
        generator9.setStrategy(generatorStrategy80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader84 = null;
        generator83.setClassLoader(classLoader84);
        generator83.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator83.getStrategy();
        generator9.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        boolean boolean29 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator24.setStrategy(generatorStrategy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator46.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = null;
        generator46.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray72);
        boolean boolean77 = generatorStrategy52.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray63);
        generator24.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray45);
        generator0.setClasses(classArray21);
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        generator36.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin35.newInstance((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin35.newInstance(objArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin11.newInstance((java.lang.Object[]) classArray76);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        generator0.setClasses(classArray19);
        boolean boolean35 = generator0.getAttemptLoad();
        boolean boolean36 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setDelegates(objArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setDelegates(objArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        generator35.setUseCache(false);
        generator35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator35.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray63);
        boolean boolean70 = namingPolicy42.equals((java.lang.Object) classArray53);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator5.getStrategy();
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator5.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator5.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (-1), 0.0f, generator17 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray18);
        generator0.setDelegates(objArray18);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        boolean boolean29 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator24.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator33.setNamingPolicy(namingPolicy34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setDelegates((java.lang.Object[]) classArray45);
        generator24.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        boolean boolean50 = namingPolicy23.equals((java.lang.Object) classArray45);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        java.lang.ClassLoader classLoader51 = generator37.getClassLoader();
        generator19.setClassLoader(classLoader51);
        generator19.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray55 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        generator0.setStyle(0);
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setClasses(classArray32);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader69 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        generator0.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        boolean boolean84 = generator81.getUseCache();
        generator81.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator81.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator81.getStrategy();
        boolean boolean89 = generator81.getAttemptLoad();
        boolean boolean90 = namingPolicy80.equals((java.lang.Object) generator81);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        generator0.setClasses(classArray30);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator81.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader36 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray58);
        generator19.setClasses(classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Object[] objArray66 = null;
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin9.newInstance((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setClasses(classArray59);
        java.lang.ClassLoader classLoader61 = generator47.getClassLoader();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray81);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin46.newInstance((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getUseCache();
        boolean boolean44 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass45 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator0.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin69 = generator0.create();
        boolean boolean70 = generator0.getAttemptLoad();
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray24);
        generator0.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        generator0.setAttemptLoad(true);
        boolean boolean83 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator87.setAttemptLoad(true);
        generator87.setAttemptLoad(false);
        boolean boolean92 = generator87.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator87.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = null;
        generator87.setStrategy(generatorStrategy94);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator87.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = namingPolicy84.getClassName("hi!", "", (java.lang.Object) namingPolicy96, predicate97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classArray53);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray81);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray81);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = null;
        generator0.setClasses(classArray81);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass59 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor60 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass32 = classArray12.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator22.setDelegates(objArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        java.lang.Class<?> wildcardClass55 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mixin23);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin44.newInstance(objArray64);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin69.newInstance(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator18.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator0.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator86.setAttemptLoad(true);
        generator86.setAttemptLoad(false);
        boolean boolean91 = generator86.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator86.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator93 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = null;
        generator93.setNamingPolicy(namingPolicy94);
        boolean boolean96 = namingPolicy92.equals((java.lang.Object) generator93);
        generator0.setNamingPolicy(namingPolicy92);
        boolean boolean98 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        generator54.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator54.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator83.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = null;
        generator83.setStrategy(generatorStrategy85);
        boolean boolean87 = generator83.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator83.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy88);
        generator0.setNamingPolicy(namingPolicy88);
        boolean boolean91 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        generator0.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        generator35.setUseCache(false);
        boolean boolean49 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.mockito.cglib.proxy.Mixin mixin53 = generator0.create();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        boolean boolean67 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        generator28.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        generator24.setClasses(classArray41);
        generator0.setClasses(classArray41);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        boolean boolean53 = generatorStrategy28.equals((java.lang.Object) classArray39);
        boolean boolean55 = generatorStrategy28.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        generator12.setClasses(classArray70);
        boolean boolean87 = generator12.getUseCache();
        java.lang.ClassLoader classLoader88 = generator12.getClassLoader();
        boolean boolean89 = generator12.getUseCache();
        boolean boolean90 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin93 = generator12.create();
        generator12.setAttemptLoad(false);
        byte[] byteArray96 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator12);
        java.lang.ClassLoader classLoader97 = generator12.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.Object obj16 = null;
        boolean boolean17 = generatorStrategy15.equals(obj16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin43 = generator18.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator18.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = generatorStrategy15.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        generator6.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin40.newInstance((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        generator17.setClasses(classArray67);
        boolean boolean69 = namingPolicy16.equals((java.lang.Object) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        boolean boolean18 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass20 = classLoader19.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin41.newInstance((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setClasses(classArray71);
        generator57.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin41.newInstance((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setDelegates(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin59.newInstance(objArray68);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray68);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        java.lang.Object[] objArray30 = null;
        generator0.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator32.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        generator32.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        boolean boolean63 = generatorStrategy38.equals((java.lang.Object) classArray49);
        boolean boolean65 = generatorStrategy38.equals((java.lang.Object) (short) 10);
        boolean boolean67 = generatorStrategy38.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy38);
        boolean boolean69 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        java.lang.ClassLoader classLoader46 = generator32.getClassLoader();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray66);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray66);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        java.lang.Object obj76 = null;
        boolean boolean77 = generatorStrategy75.equals(obj76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setStyle(1);
        boolean boolean52 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setClasses(classArray70);
        generator56.setDelegates((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator56.setDelegates((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin69 = generator0.create();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        generator10.setClasses(classArray31);
        generator7.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.Class<?> wildcardClass38 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        java.lang.Object obj21 = null;
        org.mockito.cglib.core.Predicate predicate22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = namingPolicy18.getClassName("", "", obj21, predicate22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        boolean boolean87 = generatorStrategy62.equals((java.lang.Object) classArray73);
        boolean boolean89 = generatorStrategy62.equals((java.lang.Object) (short) 10);
        generator52.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator52.getStrategy();
        generator0.setStrategy(generatorStrategy91);
        boolean boolean93 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean96 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass97 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        java.lang.ClassLoader classLoader16 = generator4.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator25.getStrategy();
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy31);
        generator4.setNamingPolicy(namingPolicy31);
        boolean boolean34 = generator4.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = generator4.getClassLoader();
        boolean boolean36 = generator4.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = generatorStrategy3.generate((org.mockito.cglib.core.ClassGenerator) generator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin53 = generator0.create();
        boolean boolean54 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader56 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(true);
        boolean boolean58 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator7.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator0.setStrategy(generatorStrategy12);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        java.lang.ClassLoader classLoader28 = generator14.getClassLoader();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray48);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin55.newInstance((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class<?> wildcardClass75 = classArray72.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean51 = namingPolicy31.equals((java.lang.Object) mixin50);
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray60);
        generator0.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin25.newInstance((java.lang.Object[]) classArray56);
        generator4.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray76);
        java.lang.Class[] classArray78 = null;
        generator0.setClasses(classArray78);
        boolean boolean80 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator33.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator33.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator38.setStrategy(generatorStrategy45);
        boolean boolean47 = generator38.getAttemptLoad();
        generator38.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        java.lang.ClassLoader classLoader9 = null;
        generator6.setClassLoader(classLoader9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        generator11.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator11.getStrategy();
        generator6.setStrategy(generatorStrategy39);
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        boolean boolean77 = generatorStrategy50.equals((java.lang.Object) (short) 10);
        generator42.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator42.getStrategy();
        generator42.setAttemptLoad(true);
        generator42.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator42.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = null;
        generator42.setStrategy(generatorStrategy86);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = generatorStrategy39.generate((org.mockito.cglib.core.ClassGenerator) generator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator14.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator14.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = namingPolicy21.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        boolean boolean34 = namingPolicy21.equals((java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator29.getStrategy();
        generator7.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setClasses(classArray52);
        generator37.setDelegates((java.lang.Object[]) classArray52);
        generator7.setDelegates((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (-1), 0.0f, generator41 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        generator24.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        generator24.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray64);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        generator21.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator21.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin39 = generator21.create();
        boolean boolean40 = generator21.getAttemptLoad();
        boolean boolean41 = generator21.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator42.setNamingPolicy(namingPolicy43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        generator42.setDelegates(objArray60);
        generator21.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        generator0.setDelegates(objArray60);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin64);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader11 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        generator11.setDelegates((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader28 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(false);
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator29.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator38.setNamingPolicy(namingPolicy39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setDelegates((java.lang.Object[]) classArray50);
        generator29.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray50);
        generator11.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        boolean boolean58 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator55.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy59);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        generator63.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray87);
        generator63.setClasses(classArray78);
        generator11.setClasses(classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        boolean boolean95 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        boolean boolean28 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.io.Serializable");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy30);
        generator15.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator15.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = mixin14.newInstance(objArray41);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setClasses(classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        boolean boolean89 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setDelegates(objArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator59.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy71);
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator24.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator24.setDelegates((java.lang.Object[]) classArray65);
        boolean boolean68 = generator24.getUseCache();
        java.lang.ClassLoader classLoader69 = generator24.getClassLoader();
        generator0.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader71 = generator0.getClassLoader();
        boolean boolean72 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        generator73.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        generator0.setClasses(classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator0.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        generator0.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin57 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator58.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy63);
        boolean boolean65 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator31.setNamingPolicy(namingPolicy32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator60.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy61);
        generator46.setAttemptLoad(true);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator46.setDelegates(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin45.newInstance(objArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = mixin30.newInstance(objArray72);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setDelegates(objArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        generator28.setUseCache(false);
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator28.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray56);
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setClasses(classArray79);
        generator65.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray79);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        java.lang.Object[] objArray79 = null;
        generator0.setDelegates(objArray79);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        boolean boolean44 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.ClassLoader classLoader57 = generator45.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator72.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy73);
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator58.setDelegates(objArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        generator45.setDelegates((java.lang.Object[]) classArray88);
        generator0.setClasses(classArray88);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean8 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        generator36.setUseCache(false);
        java.lang.ClassLoader classLoader50 = null;
        generator36.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        boolean boolean67 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator53.getNamingPolicy();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        boolean boolean79 = namingPolicy68.equals((java.lang.Object) objArray76);
        generator36.setNamingPolicy(namingPolicy68);
        generator36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator36.getNamingPolicy();
        generator36.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator36.getStrategy();
        generator0.setStrategy(generatorStrategy86);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        boolean boolean54 = generator0.getAttemptLoad();
        boolean boolean55 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator57.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        java.lang.Object obj62 = null;
        boolean boolean63 = namingPolicy61.equals(obj62);
        generator0.setNamingPolicy(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader9 = null;
        generator8.setClassLoader(classLoader9);
        generator8.setUseCache(false);
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator8.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator22.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator52.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy85);
        generator22.setNamingPolicy(namingPolicy85);
        boolean boolean88 = generator22.getAttemptLoad();
        boolean boolean89 = namingPolicy21.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator22.getStrategy();
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator22.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy93);
        generator0.setNamingPolicy(namingPolicy93);
        boolean boolean96 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        boolean boolean74 = generator7.getUseCache();
        boolean boolean75 = generator7.getUseCache();
        java.lang.ClassLoader classLoader76 = null;
        generator7.setClassLoader(classLoader76);
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        boolean boolean91 = namingPolicy63.equals((java.lang.Object) classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setClasses(classArray55);
        generator41.setDelegates((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        generator19.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin mixin39 = generator19.create();
        generator19.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator0.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        boolean boolean48 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        generator51.setAttemptLoad(false);
        boolean boolean57 = generator51.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator51.getStrategy();
        generator0.setStrategy(generatorStrategy58);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        generator36.setDelegates((java.lang.Object[]) classArray50);
        boolean boolean53 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        generator36.setDelegates(objArray62);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin35.newInstance((java.lang.Object[]) classArray68);
        boolean boolean70 = generatorStrategy7.equals((java.lang.Object) classArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator0.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        generator70.setUseCache(false);
        java.lang.ClassLoader classLoader84 = generator70.getClassLoader();
        generator70.setAttemptLoad(true);
        generator70.setUseCache(false);
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader91 = generator70.getClassLoader();
        generator0.setClassLoader(classLoader91);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(false);
        boolean boolean22 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator17.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setDelegates((java.lang.Object[]) classArray38);
        generator17.setClasses(classArray38);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        boolean boolean45 = namingPolicy42.equals((java.lang.Object) namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray64 = new java.lang.Object[] { true, (-1), 0.0f, generator63 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        generator46.setDelegates(objArray64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator46.getStrategy();
        boolean boolean68 = namingPolicy42.equals((java.lang.Object) generatorStrategy67);
        generator0.setStrategy(generatorStrategy67);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator1.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator4.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        generator10.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        boolean boolean36 = namingPolicy8.equals((java.lang.Object) classArray31);
        generator1.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray59 = new java.lang.Object[] { true, (-1), 0.0f, generator58 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        generator41.setDelegates(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray81);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        generator41.setDelegates(objArray81);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray90);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin46.newInstance((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean8 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray38);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        java.lang.Class[] classArray45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin44.newInstance((java.lang.Object[]) classArray58);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        generator47.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin46.newInstance((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin46.newInstance(objArray83);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator0.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        boolean boolean29 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator26.getStrategy();
        boolean boolean34 = namingPolicy25.equals((java.lang.Object) generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator38.setNamingPolicy(namingPolicy39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        generator35.setClasses(classArray50);
        generator35.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin56 = generator35.create();
        boolean boolean57 = generator35.getUseCache();
        boolean boolean58 = namingPolicy25.equals((java.lang.Object) generator35);
        generator0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setClasses(classArray27);
        java.lang.ClassLoader classLoader29 = generator15.getClassLoader();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass94 = classArray60.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator8.getStrategy();
        generator8.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        generator15.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator15.getStrategy();
        generator8.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(false);
        generator46.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator58.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = null;
        generator58.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        generator46.setStrategy(generatorStrategy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin68 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setAttemptLoad(false);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        generator8.setClasses(classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean89 = generator0.getUseCache();
        boolean boolean90 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        generator7.setAttemptLoad(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = namingPolicy13.equals((java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setClasses(classArray51);
        generator36.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin35.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader56 = null;
        generator55.setClassLoader(classLoader56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        generator55.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        generator14.setDelegates((java.lang.Object[]) classArray71);
        generator0.setClasses(classArray71);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        boolean boolean46 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray52 = new java.lang.Object[] { true, (-1), 0.0f, generator51 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray52);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray52);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        boolean boolean53 = generator50.getUseCache();
        java.lang.Class[] classArray54 = null;
        generator50.setClasses(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass47 = namingPolicy46.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass30 = classArray29.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator63.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader67 = null;
        generator63.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray89);
        boolean boolean94 = generatorStrategy69.equals((java.lang.Object) classArray80);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray62);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin25.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Object[] objArray12 = null;
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray12);
        java.lang.ClassLoader classLoader14 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator15.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        generator15.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = mixin13.newInstance((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray44);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator19.setClasses(classArray49);
        generator13.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin66.newInstance((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin12.newInstance((java.lang.Object[]) classArray94);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass12 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader6 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        generator0.setStyle((int) (short) 1);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        boolean boolean11 = generator8.getUseCache();
        java.lang.Class[] classArray12 = null;
        generator8.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        generator8.setStrategy(generatorStrategy18);
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader22 = null;
        generator21.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader24 = null;
        generator21.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray30 = new java.lang.Object[] { true, (-1), 0.0f, generator29 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        generator21.setDelegates(objArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        generator35.setDelegates((java.lang.Object[]) classArray49);
        boolean boolean52 = generator35.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin53 = generator35.create();
        boolean boolean54 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator35.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator35.getStrategy();
        java.lang.ClassLoader classLoader57 = generator35.getClassLoader();
        generator21.setClassLoader(classLoader57);
        generator21.setUseCache(true);
        boolean boolean61 = generator21.getUseCache();
        boolean boolean62 = generator21.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        generator56.setAttemptLoad(false);
        boolean boolean61 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator56.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator65.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setDelegates((java.lang.Object[]) classArray77);
        generator56.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        boolean boolean82 = namingPolicy54.equals((java.lang.Object) classArray77);
        generator47.setDelegates((java.lang.Object[]) classArray77);
        boolean boolean84 = generatorStrategy45.equals((java.lang.Object) generator47);
        generator47.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin87 = generator47.create();
        org.mockito.cglib.proxy.Mixin mixin88 = generator47.create();
        java.lang.Class<?> wildcardClass89 = generator47.getClass();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator69.setClasses(classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator64.setDelegates((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin23.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator7.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        generator0.setStyle(0);
        generator0.setStyle(0);
        boolean boolean52 = generator0.getUseCache();
        boolean boolean53 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
        java.lang.Class<?> wildcardClass24 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        generator0.setAttemptLoad(true);
        boolean boolean83 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator31.setDelegates(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator31.getStrategy();
        generator0.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader8 = null;
        generator7.setClassLoader(classLoader8);
        generator7.setUseCache(false);
        java.lang.ClassLoader classLoader12 = null;
        generator7.setClassLoader(classLoader12);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        generator16.setUseCache(false);
        java.lang.ClassLoader classLoader30 = null;
        generator16.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader60 = generator35.getClassLoader();
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classLoader60);
        generator7.setClassLoader(classLoader60);
        boolean boolean63 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean16 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray24);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        generator57.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin56.newInstance((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray86 = null;
        java.lang.Object[] objArray93 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray86, objArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin56.newInstance(objArray93);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses(objArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin32.newInstance((java.lang.Object[]) classArray97);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator9.setStrategy(generatorStrategy15);
        generator9.setAttemptLoad(false);
        boolean boolean19 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy21);
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        java.lang.ClassLoader classLoader38 = generator24.getClassLoader();
        boolean boolean39 = namingPolicy21.equals((java.lang.Object) classLoader38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        generator1.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator39.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classArray66);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        boolean boolean73 = generatorStrategy38.equals((java.lang.Object) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader4 = null;
        generator3.setClassLoader(classLoader4);
        generator3.setUseCache(false);
        java.lang.ClassLoader classLoader8 = null;
        generator3.setClassLoader(classLoader8);
        generator3.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        java.lang.ClassLoader classLoader26 = null;
        generator12.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator31.getClassLoader();
        boolean boolean57 = namingPolicy29.equals((java.lang.Object) classLoader56);
        generator3.setClassLoader(classLoader56);
        boolean boolean59 = generator3.getUseCache();
        generator3.setUseCache(false);
        generator3.setStyle((int) (byte) 1);
        boolean boolean64 = generator3.getUseCache();
        generator3.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator3.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader69 = generator3.getClassLoader();
        generator0.setClassLoader(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray5 = new java.lang.Object[] { true, (-1), 0.0f, generator4 };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin9.newInstance((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setDelegates(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin59.newInstance(objArray68);
        java.lang.Class<?> wildcardClass75 = mixin74.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator7.getStrategy();
        generator7.setStyle((int) (short) 1);
        boolean boolean81 = generator7.getUseCache();
        generator7.setUseCache(true);
        generator7.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator22.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator31.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray67);
        generator20.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        generator0.setClasses(classArray50);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mixin15);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classArray56);
        generator26.setDelegates((java.lang.Object[]) classArray56);
        generator26.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator65.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        generator26.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator48.getNamingPolicy();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator48.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass92 = mixin91.getClass();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin71 = generator0.create();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setAttemptLoad(true);
        generator0.setStyle(1);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        boolean boolean27 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = namingPolicy28.equals((java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator35.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        generator35.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator35.getNamingPolicy();
        boolean boolean46 = namingPolicy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = generator47.getClassLoader();
        java.lang.ClassLoader classLoader60 = generator47.getClassLoader();
        generator35.setClassLoader(classLoader60);
        boolean boolean62 = generatorStrategy21.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setAttemptLoad(true);
        generator63.setAttemptLoad(false);
        boolean boolean68 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator63.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        generator63.setClassLoader(classLoader71);
        generator63.setAttemptLoad(false);
        boolean boolean75 = generator63.getUseCache();
        boolean boolean76 = generatorStrategy21.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator55.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader59 = null;
        generator58.setClassLoader(classLoader59);
        boolean boolean61 = namingPolicy56.equals((java.lang.Object) classLoader59);
        generator40.setNamingPolicy(namingPolicy56);
        generator40.setAttemptLoad(true);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        generator40.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator40.getNamingPolicy();
        boolean boolean95 = generatorStrategy37.equals((java.lang.Object) generator40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = null;
        generator40.setStrategy(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator54.getStrategy();
        generator42.setStrategy(generatorStrategy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        generator42.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator76.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader80 = null;
        generator76.setClassLoader(classLoader80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator76.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator85.setAttemptLoad(true);
        generator85.setAttemptLoad(false);
        boolean boolean90 = namingPolicy83.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator91 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator91.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = null;
        generator91.setStrategy(generatorStrategy93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator91.getNamingPolicy();
        boolean boolean96 = namingPolicy83.equals((java.lang.Object) generator91);
        generator42.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator7.setAttemptLoad(false);
        generator7.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator76.setStrategy(generatorStrategy78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        boolean boolean82 = generator76.getUseCache();
        boolean boolean83 = generator76.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator84.setAttemptLoad(true);
        boolean boolean87 = generator84.getUseCache();
        java.lang.Class[] classArray88 = null;
        generator84.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin.Generator generator90 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator90.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator90.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator90.getStrategy();
        generator84.setStrategy(generatorStrategy94);
        generator76.setStrategy(generatorStrategy94);
        generator7.setStrategy(generatorStrategy94);
        generator7.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        generator18.setUseCache(false);
        java.lang.ClassLoader classLoader32 = null;
        generator18.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator37.getClassLoader();
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classLoader62);
        generator0.setClassLoader(classLoader62);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray76 = new java.lang.Object[] { true, (-1), 0.0f, generator75 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        generator67.setDelegates(objArray76);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setDelegates((java.lang.Object[]) classArray82);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        boolean boolean85 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        generator0.setStyle(0);
        generator0.setStyle(0);
        boolean boolean49 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator10.setNamingPolicy(namingPolicy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setDelegates((java.lang.Object[]) classArray22);
        generator10.setAttemptLoad(false);
        boolean boolean26 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator10.setClasses(classArray39);
        generator0.setDelegates((java.lang.Object[]) classArray39);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setClasses(classArray59);
        generator45.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean62 = generator45.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin63 = generator45.create();
        boolean boolean64 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator19.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) classLoader48);
        generator29.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator29.setStrategy(generatorStrategy56);
        generator19.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        boolean boolean85 = generatorStrategy56.equals((java.lang.Object) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        boolean boolean22 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setDelegates(objArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator59.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy71);
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        generator31.setUseCache(false);
        generator31.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator31.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator31.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        boolean boolean23 = namingPolicy21.equals((java.lang.Object) ' ');
        generator15.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator15.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        java.lang.ClassLoader classLoader40 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = generatorStrategy24.generate(classGenerator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setDelegates(objArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator46.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        generator59.setUseCache(false);
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator59.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray87);
        boolean boolean94 = namingPolicy66.equals((java.lang.Object) classArray77);
        generator0.setNamingPolicy(namingPolicy66);
        boolean boolean96 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        boolean boolean93 = generatorStrategy77.equals((java.lang.Object) classArray92);
        java.lang.Class<?> wildcardClass94 = generatorStrategy77.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator10.setNamingPolicy(namingPolicy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        generator7.setClasses(classArray22);
        generator7.setAttemptLoad(true);
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator31.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        generator31.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setClasses(classArray72);
        generator31.setDelegates((java.lang.Object[]) classArray72);
        boolean boolean75 = generator31.getUseCache();
        java.lang.ClassLoader classLoader76 = generator31.getClassLoader();
        generator7.setClassLoader(classLoader76);
        generator0.setClassLoader(classLoader76);
        boolean boolean79 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setDelegates(objArray44);
        java.lang.ClassLoader classLoader48 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray53 = new java.lang.Object[] { true, (-1), 0.0f, generator52 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin57.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray81);
        generator36.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin35.newInstance((java.lang.Object[]) classArray81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class<?> wildcardClass41 = classArray39.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        boolean boolean61 = generatorStrategy34.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean63 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin65 = generator0.create();
        boolean boolean66 = generator0.getUseCache();
        boolean boolean67 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator48.getNamingPolicy();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator48.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean87 = generator48.getUseCache();
        java.lang.ClassLoader classLoader88 = generator48.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        generator0.setStyle(0);
        generator0.setStyle(0);
        boolean boolean52 = generator0.getUseCache();
        boolean boolean53 = generator0.getAttemptLoad();
        boolean boolean54 = generator0.getUseCache();
        generator0.setStyle(1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin57 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.Object obj38 = null;
        boolean boolean39 = generatorStrategy37.equals(obj38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        generator40.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator69.setAttemptLoad(true);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator69.setClasses(classArray81);
        generator40.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator40.getStrategy();
        boolean boolean86 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator40.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = generatorStrategy37.generate((org.mockito.cglib.core.ClassGenerator) generator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray38);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setClasses(classArray72);
        generator58.setDelegates((java.lang.Object[]) classArray72);
        boolean boolean75 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator58.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator58.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy77);
        java.lang.Class<?> wildcardClass79 = namingPolicy77.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setClasses(classArray29);
        generator0.setClasses(classArray29);
        boolean boolean32 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy52);
        generator37.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator37.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        generator37.setClasses(classArray70);
        generator0.setDelegates((java.lang.Object[]) classArray70);
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        boolean boolean27 = namingPolicy22.equals((java.lang.Object) classLoader25);
        generator6.setNamingPolicy(namingPolicy22);
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator6.setDelegates((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        boolean boolean44 = generatorStrategy19.equals((java.lang.Object) classArray30);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class<?> wildcardClass54 = mixin53.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator14.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator14.setClasses(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator66.getStrategy();
        generator54.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray77 = new java.lang.Object[] { true, (-1), 0.0f, generator76 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        generator54.setDelegates(objArray77);
        generator0.setDelegates(objArray77);
        boolean boolean84 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator85.setAttemptLoad(true);
        generator85.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator90 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator90.getNamingPolicy();
        boolean boolean93 = namingPolicy91.equals((java.lang.Object) ' ');
        generator85.setNamingPolicy(namingPolicy91);
        generator0.setNamingPolicy(namingPolicy91);
        boolean boolean96 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        java.lang.Object obj17 = null;
        boolean boolean18 = generatorStrategy16.equals(obj17);
        generator5.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator73.setAttemptLoad(true);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator87.getNamingPolicy();
        generator73.setNamingPolicy(namingPolicy88);
        generator73.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator73.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator73.getStrategy();
        boolean boolean94 = generator73.getAttemptLoad();
        boolean boolean95 = generatorStrategy72.equals((java.lang.Object) boolean94);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        generator7.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator75.setDelegates(objArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator75.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator75.getStrategy();
        generator75.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator75.getStrategy();
        generator7.setStrategy(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setAttemptLoad(true);
        generator68.setAttemptLoad(false);
        boolean boolean73 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator77.setNamingPolicy(namingPolicy78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator77.setDelegates((java.lang.Object[]) classArray89);
        generator68.setClasses(classArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator68.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy92);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        boolean boolean54 = generatorStrategy29.equals((java.lang.Object) classArray40);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        generator0.setDelegates((java.lang.Object[]) classArray60);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        generator64.setUseCache(false);
        boolean boolean78 = generator64.getAttemptLoad();
        boolean boolean79 = generator64.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator80.setClasses(classArray90);
        java.lang.ClassLoader classLoader92 = generator80.getClassLoader();
        java.lang.ClassLoader classLoader93 = generator80.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator80.getStrategy();
        generator64.setStrategy(generatorStrategy94);
        generator0.setStrategy(generatorStrategy94);
        boolean boolean97 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin12);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray5 = new java.lang.Object[] { true, (-1), 0.0f, generator4 };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin9.newInstance((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin34 = generator13.create();
        boolean boolean35 = generator13.getUseCache();
        boolean boolean36 = namingPolicy3.equals((java.lang.Object) generator13);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        boolean boolean65 = namingPolicy60.equals((java.lang.Object) classLoader63);
        generator13.setNamingPolicy(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        generator10.setUseCache(false);
        generator10.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        boolean boolean52 = generatorStrategy25.equals((java.lang.Object) (short) 10);
        generator17.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator17.getStrategy();
        generator10.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getUseCache();
        boolean boolean44 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator45.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        boolean boolean53 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray85);
        generator50.setClasses(classArray85);
        generator45.setClasses(classArray85);
        generator0.setClasses(classArray85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator25.getNamingPolicy();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator25.setDelegates((java.lang.Object[]) classArray62);
        boolean boolean64 = generator25.getUseCache();
        java.lang.ClassLoader classLoader65 = generator25.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray76);
        generator0.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getAttemptLoad();
        boolean boolean86 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        boolean boolean2 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray10 = new java.lang.Object[] { true, (-1), 0.0f, generator9 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray10);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = mixin14.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray38);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin67 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator0.setNamingPolicy(namingPolicy72);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        generator13.setDelegates(objArray34);
        generator0.setDelegates(objArray34);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        generator0.setClasses(classArray19);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        boolean boolean38 = generator0.getAttemptLoad();
        boolean boolean39 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        generator40.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator69.setAttemptLoad(true);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator69.setClasses(classArray81);
        generator40.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator40.getStrategy();
        boolean boolean86 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator40.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator6.setNamingPolicy(namingPolicy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setDelegates((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin32.newInstance(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        generator59.setUseCache(false);
        java.lang.ClassLoader classLoader73 = null;
        generator59.setClassLoader(classLoader73);
        java.lang.Object[] objArray75 = new java.lang.Object[] { objArray52, (byte) 100, generator59 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray52);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin77.newInstance((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray96);
        java.lang.Class<?> wildcardClass99 = classArray96.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        generator33.setUseCache(false);
        java.lang.ClassLoader classLoader47 = null;
        generator33.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator52.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator61.setNamingPolicy(namingPolicy62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setDelegates((java.lang.Object[]) classArray73);
        generator52.setClasses(classArray73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader77 = generator52.getClassLoader();
        boolean boolean78 = namingPolicy50.equals((java.lang.Object) classLoader77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray86);
        boolean boolean90 = namingPolicy32.equals((java.lang.Object) classLoader77);
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = null;
        generator0.setNamingPolicy(namingPolicy93);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        boolean boolean23 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray29 = new java.lang.Object[] { true, (-1), 0.0f, generator28 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        generator20.setDelegates(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin19.newInstance((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray4 = new java.lang.Object[] { true, (-1), 0.0f, generator3 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.create(objArray4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        generator30.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin29.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin58.newInstance((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin5.newInstance((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Class<?> wildcardClass77 = classArray71.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        boolean boolean39 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass42 = generator41.getClass();
        boolean boolean43 = namingPolicy40.equals((java.lang.Object) generator41);
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin62.newInstance(objArray82);
        boolean boolean88 = namingPolicy49.equals((java.lang.Object) objArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator0.setDelegates(objArray82);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        boolean boolean94 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (short) 0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        boolean boolean73 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        boolean boolean36 = generatorStrategy11.equals((java.lang.Object) classArray22);
        boolean boolean38 = generatorStrategy11.equals((java.lang.Object) (short) 10);
        generator1.setStrategy(generatorStrategy11);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        generator1.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy34);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        generator40.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        boolean boolean65 = namingPolicy60.equals((java.lang.Object) classLoader63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        boolean boolean80 = namingPolicy60.equals((java.lang.Object) mixin79);
        generator40.setNamingPolicy(namingPolicy60);
        boolean boolean82 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        generator0.setDelegates((java.lang.Object[]) classArray45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator4.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator4.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.ClassLoader classLoader29 = generator17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator31.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator31.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy44);
        boolean boolean46 = generator17.getAttemptLoad();
        generator17.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator17.getStrategy();
        boolean boolean53 = generatorStrategy16.equals((java.lang.Object) generator17);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        boolean boolean66 = generator54.getAttemptLoad();
        generator54.setAttemptLoad(true);
        generator54.setAttemptLoad(true);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        generator54.setDelegates((java.lang.Object[]) classArray80);
        java.lang.ClassLoader classLoader85 = generator54.getClassLoader();
        generator17.setClassLoader(classLoader85);
        org.mockito.cglib.proxy.Mixin mixin87 = generator17.create();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray64);
        generator25.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator69.setAttemptLoad(true);
        boolean boolean72 = generator69.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator69.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy73);
        generator25.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin77 = generator25.create();
        boolean boolean78 = namingPolicy22.equals((java.lang.Object) mixin77);
        java.lang.Class<?> wildcardClass79 = mixin77.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        generator7.setUseCache(false);
        boolean boolean21 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator7.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(false);
        boolean boolean44 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator39.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator48.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setDelegates((java.lang.Object[]) classArray60);
        generator39.setClasses(classArray60);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator39.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = generator39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator39.getStrategy();
        generator25.setStrategy(generatorStrategy65);
        boolean boolean67 = generatorStrategy24.equals((java.lang.Object) generatorStrategy65);
        generator0.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader72 = null;
        generator69.setClassLoader(classLoader72);
        boolean boolean74 = generator69.getAttemptLoad();
        boolean boolean75 = generator69.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator69.getNamingPolicy();
        boolean boolean77 = generator69.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator69.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setStyle((int) (short) 1);
        boolean boolean11 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        boolean boolean91 = namingPolicy63.equals((java.lang.Object) classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray97);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        generator0.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        java.lang.Object[] objArray65 = null;
        org.mockito.cglib.proxy.Mixin mixin66 = mixin64.newInstance(objArray65);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        boolean boolean91 = namingPolicy63.equals((java.lang.Object) classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        boolean boolean11 = generator5.getUseCache();
        boolean boolean12 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        boolean boolean16 = generator13.getUseCache();
        java.lang.Class[] classArray17 = null;
        generator13.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        generator13.setStrategy(generatorStrategy23);
        generator5.setStrategy(generatorStrategy23);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator27.setDelegates((java.lang.Object[]) classArray41);
        boolean boolean44 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        generator45.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator45.getStrategy();
        generator27.setStrategy(generatorStrategy73);
        boolean boolean75 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin76 = generator27.create();
        boolean boolean77 = generatorStrategy23.equals((java.lang.Object) generator27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setClasses(classArray56);
        generator42.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator42.getNamingPolicy();
        boolean boolean60 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator42.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setAttemptLoad(true);
        generator63.setAttemptLoad(false);
        boolean boolean68 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        boolean boolean70 = namingPolicy61.equals((java.lang.Object) generator63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        boolean boolean46 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator41.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setDelegates((java.lang.Object[]) classArray62);
        generator41.setClasses(classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator41.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator41.getNamingPolicy();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator41.setDelegates((java.lang.Object[]) classArray78);
        boolean boolean80 = generator41.getUseCache();
        java.lang.ClassLoader classLoader81 = generator41.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator82.setClasses(classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray92);
        org.mockito.cglib.core.Predicate predicate97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = namingPolicy38.getClassName("", "", (java.lang.Object) classArray92, predicate97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        java.lang.ClassLoader classLoader22 = null;
        generator17.setClassLoader(classLoader22);
        generator17.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator17.setClassLoader(classLoader70);
        boolean boolean73 = generator17.getUseCache();
        generator17.setUseCache(false);
        java.lang.Object[] objArray76 = null;
        generator17.setDelegates(objArray76);
        java.lang.ClassLoader classLoader78 = generator17.getClassLoader();
        generator0.setClassLoader(classLoader78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator33.setNamingPolicy(namingPolicy34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setDelegates((java.lang.Object[]) classArray45);
        generator33.setAttemptLoad(false);
        boolean boolean49 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setClasses(classArray62);
        generator33.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        generator0.setClasses(classArray62);
        boolean boolean67 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (-1), 0.0f, generator41 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        generator24.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        generator24.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray64);
        java.lang.Class<?> wildcardClass73 = mixin72.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin41.newInstance((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class<?> wildcardClass59 = classArray57.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        generator46.setUseCache(false);
        java.lang.ClassLoader classLoader60 = null;
        generator46.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy63);
        generator0.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator67.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator71.setAttemptLoad(true);
        boolean boolean74 = generator71.getUseCache();
        generator71.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator71.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator71.getStrategy();
        boolean boolean79 = namingPolicy70.equals((java.lang.Object) generatorStrategy78);
        generator0.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        boolean boolean84 = generator81.getUseCache();
        java.lang.Class[] classArray85 = null;
        generator81.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator81.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        boolean boolean90 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin44.newInstance(objArray64);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin69.newInstance(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator18.setClasses(classArray82);
        boolean boolean84 = namingPolicy17.equals((java.lang.Object) generator18);
        boolean boolean85 = generatorStrategy9.equals((java.lang.Object) boolean84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator86.setAttemptLoad(true);
        generator86.setAttemptLoad(false);
        boolean boolean91 = generator86.getAttemptLoad();
        generator86.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator86.getStrategy();
        generator86.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator0.getAttemptLoad();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        boolean boolean27 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator22.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator31.setNamingPolicy(namingPolicy32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setDelegates((java.lang.Object[]) classArray43);
        generator22.setClasses(classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator22.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator22.getNamingPolicy();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator22.setDelegates((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader61 = generator22.getClassLoader();
        org.mockito.cglib.core.Predicate predicate62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = namingPolicy19.getClassName("", "", (java.lang.Object) classLoader61, predicate62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator15.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        boolean boolean86 = generator20.getAttemptLoad();
        boolean boolean87 = namingPolicy19.equals((java.lang.Object) generator20);
        boolean boolean88 = generator20.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin89 = generator20.create();
        boolean boolean90 = generator20.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) generator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean51 = namingPolicy31.equals((java.lang.Object) mixin50);
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray60);
        generator0.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        generator68.setClasses(classArray81);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator68.getNamingPolicy();
        boolean boolean97 = generator68.getUseCache();
        boolean boolean98 = namingPolicy67.equals((java.lang.Object) boolean97);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        boolean boolean34 = namingPolicy28.equals((java.lang.Object) generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader60 = generator35.getClassLoader();
        generator35.setStyle((int) (byte) 1);
        boolean boolean63 = generator35.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray64 = generatorStrategy33.generate((org.mockito.cglib.core.ClassGenerator) generator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classArray56);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin28.newInstance((java.lang.Object[]) classArray56);
        java.lang.Object[] objArray65 = null;
        org.mockito.cglib.proxy.Mixin mixin66 = mixin28.newInstance(objArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin66.newInstance(objArray74);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = generator6.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        boolean boolean46 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator41.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setDelegates((java.lang.Object[]) classArray62);
        generator41.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        boolean boolean67 = namingPolicy39.equals((java.lang.Object) classArray62);
        generator32.setDelegates((java.lang.Object[]) classArray62);
        generator32.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator71.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader75 = null;
        generator71.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator71.getStrategy();
        generator32.setStrategy(generatorStrategy77);
        generator6.setStrategy(generatorStrategy77);
        boolean boolean80 = generatorStrategy5.equals((java.lang.Object) generator6);
        generator6.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator19.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = namingPolicy26.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator34.getNamingPolicy();
        boolean boolean39 = namingPolicy26.equals((java.lang.Object) generator34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator0.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class<?> wildcardClass75 = mixin74.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setStyle(1);
        boolean boolean52 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setClasses(classArray70);
        generator56.setDelegates((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator56.setDelegates((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        boolean boolean53 = generatorStrategy28.equals((java.lang.Object) classArray39);
        boolean boolean55 = generatorStrategy28.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator20.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator61.setClasses(classArray71);
        java.lang.ClassLoader classLoader73 = generator61.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator61.getNamingPolicy();
        generator61.setUseCache(false);
        boolean boolean77 = generatorStrategy60.equals((java.lang.Object) false);
        generator0.setStrategy(generatorStrategy60);
        java.lang.Class<?> wildcardClass79 = generatorStrategy60.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (-1), 0.0f, generator31 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin36.newInstance((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        java.lang.ClassLoader classLoader94 = generator80.getClassLoader();
        generator0.setClassLoader(classLoader94);
        boolean boolean96 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator1.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray23);
        generator1.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray41);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray41);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        generator20.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setAttemptLoad(true);
        generator34.setAttemptLoad(false);
        boolean boolean39 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator34.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator43.setNamingPolicy(namingPolicy44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setDelegates((java.lang.Object[]) classArray55);
        generator34.setClasses(classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader59 = generator34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator34.getStrategy();
        generator20.setStrategy(generatorStrategy60);
        boolean boolean62 = generator20.getUseCache();
        java.lang.ClassLoader classLoader63 = generator20.getClassLoader();
        generator0.setClassLoader(classLoader63);
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean11 = generator0.getAttemptLoad();
        boolean boolean12 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        boolean boolean43 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        boolean boolean45 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(false);
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator36.setDelegates((java.lang.Object[]) classArray48);
        generator27.setClasses(classArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator27.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = generator27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator27.getStrategy();
        generator13.setStrategy(generatorStrategy53);
        boolean boolean55 = generator13.getUseCache();
        java.lang.ClassLoader classLoader56 = generator13.getClassLoader();
        generator13.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = namingPolicy10.getClassName("hi!", "", (java.lang.Object) false, predicate59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setDelegates(objArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator46.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        generator59.setUseCache(false);
        generator59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator59.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray87);
        boolean boolean94 = namingPolicy66.equals((java.lang.Object) classArray77);
        generator0.setNamingPolicy(namingPolicy66);
        boolean boolean96 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(objArray17);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin36.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setClasses(classArray67);
        generator53.setDelegates((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator53.setDelegates((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin36.newInstance((java.lang.Object[]) classArray81);
        generator0.setClasses(classArray81);
        boolean boolean86 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = null;
        generator13.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        boolean boolean44 = generatorStrategy19.equals((java.lang.Object) classArray30);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        generator13.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator13.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray64);
        generator13.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setAttemptLoad(true);
        generator70.setAttemptLoad(false);
        boolean boolean75 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator70.setStrategy(generatorStrategy76);
        generator70.setAttemptLoad(false);
        generator70.setStyle((int) (byte) 0);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        generator70.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin69.newInstance((java.lang.Object[]) classArray91);
        java.lang.Class<?> wildcardClass98 = mixin97.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray33);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray77);
        generator0.setClasses(classArray23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        boolean boolean45 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = generator31.getClassLoader();
        generator0.setClassLoader(classLoader47);
        generator0.setAttemptLoad(false);
        boolean boolean51 = generator0.getAttemptLoad();
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean24 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin41.newInstance((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray59);
        generator37.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin36.newInstance((java.lang.Object[]) classArray50);
        generator0.setDelegates((java.lang.Object[]) classArray50);
        boolean boolean67 = generator0.getUseCache();
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator69.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator69.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator69.getStrategy();
        boolean boolean74 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator69.getNamingPolicy();
        boolean boolean76 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator69.getStrategy();
        generator0.setStrategy(generatorStrategy77);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        boolean boolean23 = generator0.getUseCache();
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator25.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        boolean boolean83 = namingPolicy55.equals((java.lang.Object) classArray78);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        boolean boolean59 = generatorStrategy32.equals((java.lang.Object) (short) 10);
        generator24.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator24.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy64);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.ClassLoader classLoader74 = generator7.getClassLoader();
        boolean boolean75 = generator7.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        generator7.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        generator21.setClasses(classArray34);
        generator21.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator21.getStrategy();
        boolean boolean52 = generatorStrategy19.equals((java.lang.Object) generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator53.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        generator53.setClassLoader(classLoader61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader82 = null;
        generator81.setClassLoader(classLoader82);
        boolean boolean84 = namingPolicy79.equals((java.lang.Object) classLoader82);
        generator63.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator86.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = null;
        generator86.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator86.getStrategy();
        generator63.setStrategy(generatorStrategy90);
        generator53.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator53.getStrategy();
        generator53.setAttemptLoad(true);
        boolean boolean96 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator53.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray98 = generatorStrategy51.generate((org.mockito.cglib.core.ClassGenerator) generator53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        generator10.setUseCache(false);
        generator10.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        boolean boolean52 = generatorStrategy25.equals((java.lang.Object) (short) 10);
        generator17.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator17.getStrategy();
        generator10.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray70);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        boolean boolean76 = generatorStrategy61.equals((java.lang.Object) mixin75);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        boolean boolean34 = namingPolicy32.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setClasses(classArray52);
        generator38.setDelegates((java.lang.Object[]) classArray52);
        boolean boolean55 = generator38.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin56 = generator38.create();
        boolean boolean57 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator38.getStrategy();
        java.lang.ClassLoader classLoader60 = generator38.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator61.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        generator61.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray76);
        generator0.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator6.getNamingPolicy();
        boolean boolean31 = generator6.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin32 = generator6.create();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator6.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray66);
        generator6.setClasses(classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        java.lang.Class<?> wildcardClass70 = classArray51.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        boolean boolean54 = generatorStrategy29.equals((java.lang.Object) classArray40);
        generator21.setClasses(classArray40);
        generator0.setClasses(classArray40);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setDelegates(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator18.getStrategy();
        generator6.setStrategy(generatorStrategy22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        generator6.setClasses(classArray33);
        generator1.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setClasses(classArray53);
        generator39.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean56 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        generator39.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray65);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray65);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setDelegates((java.lang.Object[]) classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin43.newInstance(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        generator70.setUseCache(false);
        java.lang.ClassLoader classLoader84 = null;
        generator70.setClassLoader(classLoader84);
        java.lang.Object[] objArray86 = new java.lang.Object[] { objArray63, (byte) 100, generator70 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray63);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        generator0.setDelegates(objArray63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator4.setClasses(classArray14);
        generator4.setUseCache(false);
        boolean boolean18 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator4.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator23.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        boolean boolean54 = generatorStrategy29.equals((java.lang.Object) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        boolean boolean65 = namingPolicy61.equals((java.lang.Object) generator62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator62.setStrategy(generatorStrategy66);
        boolean boolean68 = generatorStrategy29.equals((java.lang.Object) generator62);
        boolean boolean69 = generator62.getUseCache();
        boolean boolean70 = generator62.getUseCache();
        boolean boolean71 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator62.getStrategy();
        boolean boolean73 = generatorStrategy21.equals((java.lang.Object) generator62);
        java.lang.Object obj74 = null;
        boolean boolean75 = generatorStrategy21.equals(obj74);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator0.getStrategy();
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader59 = null;
        generator0.setClassLoader(classLoader59);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        generator32.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin31.newInstance((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin31.newInstance(objArray68);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator77.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = null;
        generator77.setStrategy(generatorStrategy79);
        boolean boolean81 = generator77.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator77.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy82);
        java.lang.ClassLoader classLoader84 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader84);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        boolean boolean75 = namingPolicy47.equals((java.lang.Object) classArray70);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean77 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.Class[] classArray21 = null;
        generator0.setClasses(classArray21);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        boolean boolean37 = generator25.getAttemptLoad();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader45 = generator25.getClassLoader();
        generator0.setClassLoader(classLoader45);
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setDelegates((java.lang.Object[]) classArray19);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin23 = generator7.create();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        boolean boolean59 = generatorStrategy32.equals((java.lang.Object) (short) 10);
        generator24.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator24.getStrategy();
        generator7.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy67);
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        generator35.setDelegates((java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray74);
        generator35.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setAttemptLoad(true);
        boolean boolean82 = generator79.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator79.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy83);
        generator35.setUseCache(true);
        generator35.setUseCache(true);
        java.lang.ClassLoader classLoader89 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass92 = classLoader91.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator38.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = null;
        generator38.setClassLoader(classLoader42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        boolean boolean69 = generatorStrategy44.equals((java.lang.Object) classArray55);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader77 = null;
        generator76.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = null;
        generator76.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray85 = new java.lang.Object[] { true, (-1), 0.0f, generator84 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        generator76.setDelegates(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin75.newInstance(objArray85);
        boolean boolean90 = generatorStrategy37.equals((java.lang.Object) objArray85);
        java.lang.Class<?> wildcardClass91 = objArray85.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray46);
        generator0.setClasses(classArray46);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        boolean boolean68 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        boolean boolean46 = generator0.getUseCache();
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass9 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator32.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        generator37.setUseCache(false);
        java.lang.ClassLoader classLoader51 = null;
        generator37.setClassLoader(classLoader51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        generator56.setAttemptLoad(false);
        boolean boolean61 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator56.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator65.setNamingPolicy(namingPolicy66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setDelegates((java.lang.Object[]) classArray77);
        generator56.setClasses(classArray77);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator56.getNamingPolicy();
        java.lang.ClassLoader classLoader81 = generator56.getClassLoader();
        boolean boolean82 = namingPolicy54.equals((java.lang.Object) classLoader81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray90);
        boolean boolean94 = namingPolicy36.equals((java.lang.Object) objArray90);
        generator0.setDelegates(objArray90);
        boolean boolean96 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        generator14.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin32 = generator14.create();
        boolean boolean33 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator14.getStrategy();
        java.lang.ClassLoader classLoader36 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getUseCache();
        boolean boolean40 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.core.Predicate predicate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = namingPolicy41.getClassName("", "hi!", (java.lang.Object) mixin79, predicate80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator22.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classArray49);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setClasses(classArray72);
        generator58.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin76 = generator58.create();
        boolean boolean77 = generator58.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator58.getStrategy();
        boolean boolean80 = namingPolicy57.equals((java.lang.Object) generator58);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin7 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader4 = null;
        generator3.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator8.setClasses(classArray20);
        generator6.setDelegates((java.lang.Object[]) classArray20);
        boolean boolean23 = generator6.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        generator24.setUseCache(false);
        java.lang.ClassLoader classLoader38 = null;
        generator24.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader68 = generator43.getClassLoader();
        boolean boolean69 = namingPolicy41.equals((java.lang.Object) classLoader68);
        generator6.setClassLoader(classLoader68);
        generator3.setClassLoader(classLoader68);
        generator0.setClassLoader(classLoader68);
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass74 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy21);
        generator0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = null;
        generator24.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator29.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = null;
        generator29.setClassLoader(classLoader33);
        boolean boolean35 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy53);
        generator38.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator38.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator38.setClasses(classArray71);
        generator29.setClasses(classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator29.getStrategy();
        generator24.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator24.getNamingPolicy();
        boolean boolean79 = namingPolicy21.equals((java.lang.Object) generator24);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin80 = generator24.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray35);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        generator0.setDelegates((java.lang.Object[]) classArray42);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        generator7.setAttemptLoad(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator7.setStrategy(generatorStrategy13);
        generator7.setAttemptLoad(false);
        generator7.setStyle((int) (byte) 0);
        generator7.setAttemptLoad(false);
        boolean boolean21 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator24.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        boolean boolean55 = generatorStrategy30.equals((java.lang.Object) classArray41);
        boolean boolean57 = generatorStrategy30.equals((java.lang.Object) (short) 10);
        boolean boolean59 = generatorStrategy30.equals((java.lang.Object) 10);
        generator7.setStrategy(generatorStrategy30);
        generator0.setStrategy(generatorStrategy30);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator0.setDelegates((java.lang.Object[]) classArray72);
        boolean boolean74 = generator0.getAttemptLoad();
        boolean boolean75 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        generator18.setUseCache(false);
        java.lang.ClassLoader classLoader32 = null;
        generator18.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator37.getClassLoader();
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classLoader62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray71);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = mixin28.newInstance((java.lang.Object[]) classArray40);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator0.setStrategy(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator20.setClasses(classArray35);
        generator20.setUseCache(false);
        java.lang.ClassLoader classLoader41 = generator20.getClassLoader();
        boolean boolean42 = generatorStrategy18.equals((java.lang.Object) generator20);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setClasses(classArray57);
        generator43.setDelegates((java.lang.Object[]) classArray57);
        boolean boolean60 = generator43.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin61 = generator43.create();
        boolean boolean62 = generator43.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator43.getStrategy();
        java.lang.ClassLoader classLoader65 = generator43.getClassLoader();
        generator20.setClassLoader(classLoader65);
        boolean boolean67 = generator20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator20.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setClasses(classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        generator6.setUseCache(false);
        java.lang.ClassLoader classLoader20 = null;
        generator6.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator25.getClassLoader();
        boolean boolean51 = namingPolicy23.equals((java.lang.Object) classLoader50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray59);
        boolean boolean63 = namingPolicy5.equals((java.lang.Object) classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator64.setNamingPolicy(namingPolicy66);
        java.lang.ClassLoader classLoader68 = null;
        generator64.setClassLoader(classLoader68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator64.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        boolean boolean95 = generatorStrategy70.equals((java.lang.Object) classArray81);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray81);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray98);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray32);
        org.mockito.cglib.proxy.Mixin mixin37 = mixin12.newInstance(objArray32);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin37.newInstance(objArray45);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Object[] objArray53 = null;
        org.mockito.cglib.proxy.Mixin mixin54 = mixin52.newInstance(objArray53);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin46.newInstance((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setDelegates(objArray14);
        generator6.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        generator20.setAttemptLoad(false);
        boolean boolean25 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator20.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setDelegates((java.lang.Object[]) classArray41);
        generator20.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = generator20.getClassLoader();
        generator6.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator6.getStrategy();
        boolean boolean48 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator51.setClasses(classArray63);
        generator49.setDelegates((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator49.setDelegates((java.lang.Object[]) classArray77);
        generator49.setUseCache(true);
        boolean boolean81 = generator49.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator49.getNamingPolicy();
        boolean boolean83 = namingPolicy5.equals((java.lang.Object) generator49);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator48.getNamingPolicy();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator48.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        boolean boolean89 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator30.setStrategy(generatorStrategy36);
        generator30.setAttemptLoad(false);
        generator30.setStyle((int) (byte) 0);
        generator30.setAttemptLoad(false);
        boolean boolean44 = generator30.getUseCache();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        boolean boolean49 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        generator0.setClasses(classArray50);
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator67.setStrategy(generatorStrategy73);
        generator67.setAttemptLoad(false);
        boolean boolean77 = generator67.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator82.setAttemptLoad(true);
        java.lang.Class[] classArray85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator82.setClasses(classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray94);
        generator0.setClasses(classArray94);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (-1), 0.0f, generator17 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray18);
        generator0.setDelegates(objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        generator0.setDelegates(objArray40);
        boolean boolean48 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader51 = null;
        generator0.setClassLoader(classLoader51);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setAttemptLoad(true);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator79.setClasses(classArray91);
        generator77.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator77.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy94);
        boolean boolean96 = generatorStrategy50.equals((java.lang.Object) generator51);
        generator51.setStyle((int) (byte) 0);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        boolean boolean49 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator0.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        generator0.setClassLoader(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        boolean boolean29 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator24.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        generator24.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        generator34.setUseCache(false);
        generator34.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        boolean boolean76 = generatorStrategy49.equals((java.lang.Object) (short) 10);
        generator41.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator41.getStrategy();
        generator34.setStrategy(generatorStrategy78);
        generator24.setStrategy(generatorStrategy78);
        boolean boolean81 = generatorStrategy23.equals((java.lang.Object) generator24);
        java.lang.Class<?> wildcardClass82 = generator24.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray75);
        generator53.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin52.newInstance((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin52.newInstance(objArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator0.setDelegates(objArray89);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray96);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        boolean boolean36 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setDelegates(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        generator19.setDelegates(objArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator19.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator75.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy76);
        generator55.setNamingPolicy(namingPolicy76);
        generator0.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator5.setStrategy(generatorStrategy12);
        generator5.setUseCache(false);
        boolean boolean16 = namingPolicy4.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        generator17.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(false);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin63.newInstance((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator17.setDelegates((java.lang.Object[]) classArray92);
        boolean boolean94 = namingPolicy4.equals((java.lang.Object) generator17);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        generator8.setUseCache(false);
        java.lang.ClassLoader classLoader22 = null;
        generator8.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator8.getStrategy();
        java.lang.ClassLoader classLoader25 = generator8.getClassLoader();
        boolean boolean26 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        boolean boolean48 = namingPolicy43.equals((java.lang.Object) classLoader46);
        generator27.setNamingPolicy(namingPolicy43);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        generator27.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator27.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        boolean boolean53 = generatorStrategy28.equals((java.lang.Object) classArray39);
        boolean boolean55 = generatorStrategy28.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        generator12.setClasses(classArray70);
        boolean boolean87 = generator12.getUseCache();
        java.lang.ClassLoader classLoader88 = generator12.getClassLoader();
        boolean boolean89 = generator12.getUseCache();
        boolean boolean90 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        java.lang.ClassLoader classLoader19 = null;
        generator16.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator0.setClasses(classArray31);
        boolean boolean50 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.ClassLoader classLoader64 = generator52.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator52.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        java.lang.ClassLoader classLoader78 = generator66.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator66.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy79);
        boolean boolean81 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = generator52.getClassLoader();
        boolean boolean83 = generator52.getUseCache();
        boolean boolean84 = generatorStrategy51.equals((java.lang.Object) boolean83);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setClasses(classArray15);
        generator1.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator1.getNamingPolicy();
        generator1.setAttemptLoad(false);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin47.newInstance((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        generator1.setDelegates((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        boolean boolean28 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin34 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin35 = generator0.create();
        java.lang.Class<?> wildcardClass36 = mixin35.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        generator13.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator13.getStrategy();
        boolean boolean22 = generator13.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = generatorStrategy12.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        generator16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator16.getNamingPolicy();
        generator16.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator38.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        boolean boolean70 = namingPolicy42.equals((java.lang.Object) classArray65);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator16.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        generator0.setClasses(classArray19);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        boolean boolean38 = generator0.getAttemptLoad();
        boolean boolean39 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        java.lang.Object[] objArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getUseCache();
        boolean boolean40 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator16.getNamingPolicy();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator16.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator16.setClasses(classArray54);
        org.mockito.cglib.core.Predicate predicate58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = namingPolicy13.getClassName("", "", (java.lang.Object) classArray54, predicate58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        generator12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        boolean boolean28 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator31.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator31.setClasses(classArray64);
        generator22.setClasses(classArray64);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin71 = generator22.create();
        org.mockito.cglib.core.Predicate predicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = namingPolicy18.getClassName("", "hi!", (java.lang.Object) generator22, predicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator6.setNamingPolicy(namingPolicy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setDelegates((java.lang.Object[]) classArray18);
        generator6.setAttemptLoad(false);
        boolean boolean22 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        generator6.setClasses(classArray35);
        boolean boolean38 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setClasses(classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy58);
        generator43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator43.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        generator43.setClasses(classArray76);
        generator6.setDelegates((java.lang.Object[]) classArray76);
        boolean boolean81 = namingPolicy5.equals((java.lang.Object) classArray76);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator13.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        generator18.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator18.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator57.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy81);
        generator18.setNamingPolicy(namingPolicy81);
        boolean boolean84 = generator18.getAttemptLoad();
        boolean boolean85 = namingPolicy17.equals((java.lang.Object) generator18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator18.getNamingPolicy();
        boolean boolean88 = generatorStrategy11.equals((java.lang.Object) generator18);
        generator18.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy36);
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator21.setDelegates(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        boolean boolean56 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean71 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        generator43.setUseCache(false);
        generator43.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator43.getNamingPolicy();
        boolean boolean52 = namingPolicy42.equals((java.lang.Object) namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator53.setStrategy(generatorStrategy59);
        generator53.setAttemptLoad(false);
        generator53.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator65.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        generator53.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator53.getNamingPolicy();
        generator53.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator53.getStrategy();
        java.lang.Class[] classArray77 = null;
        generator53.setClasses(classArray77);
        boolean boolean79 = namingPolicy42.equals((java.lang.Object) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        boolean boolean28 = namingPolicy25.equals((java.lang.Object) namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setDelegates(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        generator29.setDelegates(objArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin62 = generator29.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator29.getStrategy();
        boolean boolean64 = namingPolicy27.equals((java.lang.Object) generator29);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator79.getNamingPolicy();
        generator65.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader83 = null;
        generator82.setClassLoader(classLoader83);
        generator82.setUseCache(false);
        generator82.setUseCache(true);
        boolean boolean89 = namingPolicy80.equals((java.lang.Object) true);
        org.mockito.cglib.proxy.Mixin.Generator generator90 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator90.setAttemptLoad(true);
        generator90.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass95 = generator90.getClass();
        boolean boolean96 = namingPolicy80.equals((java.lang.Object) generator90);
        generator29.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator29.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        generator39.setUseCache(false);
        boolean boolean53 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator39.getNamingPolicy();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        boolean boolean65 = namingPolicy54.equals((java.lang.Object) objArray62);
        generator35.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        boolean boolean70 = generator67.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator67.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setAttemptLoad(true);
        generator72.setAttemptLoad(false);
        boolean boolean77 = generator72.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator72.setStrategy(generatorStrategy78);
        generator72.setAttemptLoad(false);
        boolean boolean82 = generator72.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator83.getNamingPolicy();
        generator72.setNamingPolicy(namingPolicy84);
        boolean boolean86 = generator72.getAttemptLoad();
        boolean boolean87 = namingPolicy71.equals((java.lang.Object) generator72);
        boolean boolean88 = namingPolicy54.equals((java.lang.Object) namingPolicy71);
        org.mockito.cglib.core.Predicate predicate89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = namingPolicy32.getClassName("hi!", "hi!", (java.lang.Object) boolean88, predicate89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        generator21.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin40 = generator21.create();
        java.lang.ClassLoader classLoader41 = generator21.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator42.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = null;
        generator42.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        boolean boolean73 = generatorStrategy48.equals((java.lang.Object) classArray59);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray59);
        org.mockito.cglib.core.Predicate predicate81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = namingPolicy18.getClassName("", "hi!", (java.lang.Object) mixin80, predicate81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        generator23.setUseCache(false);
        java.lang.ClassLoader classLoader37 = null;
        generator23.setClassLoader(classLoader37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        boolean boolean59 = namingPolicy54.equals((java.lang.Object) classLoader57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        boolean boolean74 = namingPolicy54.equals((java.lang.Object) mixin73);
        generator23.setNamingPolicy(namingPolicy54);
        generator23.setUseCache(false);
        java.lang.ClassLoader classLoader78 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray83 = new java.lang.Object[] { true, (-1), 0.0f, generator82 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray83);
        generator23.setDelegates(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin46 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin47 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator57.setNamingPolicy(namingPolicy58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setDelegates((java.lang.Object[]) classArray69);
        generator48.setClasses(classArray69);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin73 = generator48.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator76.setClasses(classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        boolean boolean89 = generatorStrategy75.equals((java.lang.Object) classArray88);
        generator0.setStrategy(generatorStrategy75);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator13.getNamingPolicy();
        boolean boolean33 = generatorStrategy12.equals((java.lang.Object) namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        boolean boolean55 = namingPolicy50.equals((java.lang.Object) classLoader53);
        generator34.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator57.getStrategy();
        generator34.setStrategy(generatorStrategy61);
        boolean boolean63 = generatorStrategy12.equals((java.lang.Object) generatorStrategy61);
        org.mockito.cglib.core.ClassGenerator classGenerator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = generatorStrategy12.generate(classGenerator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator19.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) classLoader48);
        generator29.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator29.setStrategy(generatorStrategy56);
        generator19.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        boolean boolean85 = generatorStrategy56.equals((java.lang.Object) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        boolean boolean9 = generator0.getUseCache();
        boolean boolean10 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        generator1.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator1.getStrategy();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator1.setDelegates(objArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator16.setDelegates((java.lang.Object[]) classArray30);
        boolean boolean33 = generator16.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        generator16.setClassLoader(classLoader78);
        generator0.setClassLoader(classLoader78);
        boolean boolean82 = generator0.getUseCache();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        boolean boolean39 = generator27.getAttemptLoad();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator27.setDelegates((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray65);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator8.setNamingPolicy(namingPolicy9);
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator8.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        java.lang.Object[] objArray79 = null;
        generator0.setDelegates(objArray79);
        java.lang.ClassLoader classLoader81 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader81);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator24.getNamingPolicy();
        generator24.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator30.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray55);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator30.setClasses(classArray60);
        generator24.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        boolean boolean75 = generator63.getAttemptLoad();
        generator63.setAttemptLoad(true);
        generator63.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy80);
        boolean boolean82 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator24.getStrategy();
        boolean boolean84 = generator24.getAttemptLoad();
        boolean boolean85 = generator24.getUseCache();
        boolean boolean86 = generatorStrategy23.equals((java.lang.Object) generator24);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (-1), 0.0f, generator17 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray18);
        generator0.setDelegates(objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        generator0.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        java.lang.ClassLoader classLoader59 = null;
        generator56.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        generator61.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator66.setNamingPolicy(namingPolicy68);
        java.lang.ClassLoader classLoader70 = null;
        generator66.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator66.getStrategy();
        java.lang.Object obj73 = null;
        boolean boolean74 = generatorStrategy72.equals(obj73);
        generator61.setStrategy(generatorStrategy72);
        generator56.setStrategy(generatorStrategy72);
        boolean boolean77 = namingPolicy54.equals((java.lang.Object) generator56);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        generator80.setAttemptLoad(false);
        boolean boolean85 = generator80.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator80.getStrategy();
        org.mockito.cglib.core.Predicate predicate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = namingPolicy54.getClassName("hi!", "hi!", (java.lang.Object) generator80, predicate87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader80 = null;
        generator79.setClassLoader(classLoader80);
        java.lang.ClassLoader classLoader82 = null;
        generator79.setClassLoader(classLoader82);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray88 = new java.lang.Object[] { true, (-1), 0.0f, generator87 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        generator79.setDelegates(objArray88);
        generator7.setDelegates(objArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator24.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        boolean boolean55 = generatorStrategy30.equals((java.lang.Object) classArray41);
        boolean boolean57 = generatorStrategy30.equals((java.lang.Object) (short) 10);
        generator22.setStrategy(generatorStrategy30);
        generator0.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator62.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator62.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        generator66.setUseCache(false);
        boolean boolean80 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator66.getNamingPolicy();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        boolean boolean92 = namingPolicy81.equals((java.lang.Object) objArray89);
        generator62.setNamingPolicy(namingPolicy81);
        boolean boolean94 = namingPolicy61.equals((java.lang.Object) generator62);
        boolean boolean95 = generator62.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        java.lang.ClassLoader classLoader49 = null;
        generator46.setClassLoader(classLoader49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator46.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        boolean boolean89 = generatorStrategy45.equals((java.lang.Object) classArray68);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator8.setStrategy(generatorStrategy14);
        generator8.setAttemptLoad(false);
        generator8.setStyle((int) (byte) 0);
        generator8.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin59.newInstance(objArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator8.setClasses(classArray72);
        boolean boolean74 = namingPolicy7.equals((java.lang.Object) generator8);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator75.setAttemptLoad(true);
        generator75.setAttemptLoad(false);
        boolean boolean80 = generator75.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator75.setStrategy(generatorStrategy81);
        generator75.setAttemptLoad(false);
        generator75.setStyle((int) (byte) 0);
        generator75.setAttemptLoad(false);
        boolean boolean89 = generator75.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator75.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy90);
        java.lang.ClassLoader classLoader92 = generator8.getClassLoader();
        boolean boolean93 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin94 = generator8.create();
        generator8.setUseCache(true);
        boolean boolean97 = generator8.getAttemptLoad();
        java.lang.Class<?> wildcardClass98 = generator8.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(false);
        boolean boolean44 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator39.setStrategy(generatorStrategy45);
        generator39.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator39.setNamingPolicy(namingPolicy49);
        java.lang.Object[] objArray51 = null;
        generator39.setDelegates(objArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator39.getNamingPolicy();
        boolean boolean54 = namingPolicy38.equals((java.lang.Object) generator39);
        // The following exception was thrown during execution in test generation
        try {
            generator39.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        boolean boolean22 = namingPolicy7.equals((java.lang.Object) mixin21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        java.lang.ClassLoader classLoader37 = generator23.getClassLoader();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin21.newInstance((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        generator0.setStyle(1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator0.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        generator1.setAttemptLoad(false);
        boolean boolean6 = generator1.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator1.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator10.setNamingPolicy(namingPolicy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setDelegates((java.lang.Object[]) classArray22);
        generator1.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        generator52.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin51.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin51.newInstance(objArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray95);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator31.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setAttemptLoad(true);
        generator63.setAttemptLoad(false);
        boolean boolean68 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator63.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator63.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator72.setNamingPolicy(namingPolicy73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator72.setDelegates((java.lang.Object[]) classArray84);
        generator63.setClasses(classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        boolean boolean89 = namingPolicy61.equals((java.lang.Object) classArray84);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        generator0.setDelegates((java.lang.Object[]) classArray92);
        boolean boolean94 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getAttemptLoad();
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.ClassLoader classLoader31 = generator19.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator46.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy47);
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator32.setDelegates(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        generator19.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator19.getStrategy();
        java.lang.ClassLoader classLoader71 = generator19.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin72 = generator19.create();
        boolean boolean73 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader74);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        generator28.setDelegates((java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray67);
        generator28.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setAttemptLoad(true);
        boolean boolean75 = generator72.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator72.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy76);
        generator28.setUseCache(true);
        generator28.setUseCache(true);
        java.lang.ClassLoader classLoader82 = generator28.getClassLoader();
        generator0.setClassLoader(classLoader82);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = generator18.getClassLoader();
        java.lang.ClassLoader classLoader31 = generator18.getClassLoader();
        boolean boolean32 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        java.lang.ClassLoader classLoader48 = generator36.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator36.getNamingPolicy();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        generator36.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator36.setClasses(classArray74);
        boolean boolean78 = generatorStrategy35.equals((java.lang.Object) generator36);
        generator0.setStrategy(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader7 = null;
        generator6.setClassLoader(classLoader7);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator11.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator16.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = null;
        generator16.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        boolean boolean47 = generatorStrategy22.equals((java.lang.Object) classArray33);
        boolean boolean49 = generatorStrategy22.equals((java.lang.Object) (short) 10);
        generator14.setStrategy(generatorStrategy22);
        generator6.setStrategy(generatorStrategy22);
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator56.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator56.setClasses(classArray71);
        generator56.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        boolean boolean82 = generator78.getAttemptLoad();
        generator78.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator78.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy85);
        generator56.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator56.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = namingPolicy53.getClassName("", "", (java.lang.Object) namingPolicy89, predicate90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        java.lang.ClassLoader classLoader34 = null;
        generator31.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator36.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = null;
        generator36.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        boolean boolean67 = generatorStrategy42.equals((java.lang.Object) classArray53);
        generator31.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        generator11.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator11.getNamingPolicy();
        boolean boolean29 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy32);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setClasses(classArray62);
        generator48.setDelegates((java.lang.Object[]) classArray62);
        boolean boolean65 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        generator48.setDelegates(objArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator81.setStrategy(generatorStrategy83);
        generator81.setAttemptLoad(false);
        boolean boolean87 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator81.getStrategy();
        generator48.setStrategy(generatorStrategy88);
        generator48.setUseCache(false);
        boolean boolean92 = generatorStrategy47.equals((java.lang.Object) generator48);
        boolean boolean93 = generator48.getAttemptLoad();
        boolean boolean94 = generator48.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator48.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        boolean boolean56 = generator44.getAttemptLoad();
        generator44.setAttemptLoad(true);
        boolean boolean59 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator44.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        java.lang.Class<?> wildcardClass62 = generatorStrategy60.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        generator18.setUseCache(false);
        java.lang.ClassLoader classLoader32 = null;
        generator18.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator37.getNamingPolicy();
        java.lang.ClassLoader classLoader62 = generator37.getClassLoader();
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classLoader62);
        generator0.setClassLoader(classLoader62);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        generator11.setUseCache(false);
        java.lang.ClassLoader classLoader25 = null;
        generator11.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = generator30.getClassLoader();
        boolean boolean56 = namingPolicy28.equals((java.lang.Object) classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray81);
        generator0.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        java.lang.Class<?> wildcardClass86 = mixin85.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        java.lang.Class[] classArray6 = null;
        generator0.setClasses(classArray6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle(2);
        boolean boolean11 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass24 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator18.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader22 = null;
        generator18.setClassLoader(classLoader22);
        boolean boolean24 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator27.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator48.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator27.setClasses(classArray60);
        generator18.setClasses(classArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin mixin68 = generator0.create();
        java.lang.ClassLoader classLoader69 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setUseCache(false);
        java.lang.ClassLoader classLoader78 = generator7.getClassLoader();
        generator7.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator7.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        boolean boolean61 = generatorStrategy34.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        java.lang.ClassLoader classLoader78 = generator66.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator66.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator80.setClasses(classArray90);
        java.lang.ClassLoader classLoader92 = generator80.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator80.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy93);
        generator0.setNamingPolicy(namingPolicy93);
        boolean boolean96 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator31.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin30.newInstance(objArray57);
        boolean boolean62 = namingPolicy15.equals((java.lang.Object) mixin61);
        java.lang.Class<?> wildcardClass63 = mixin61.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = generator26.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator52.getNamingPolicy();
        java.lang.ClassLoader classLoader57 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        boolean boolean84 = namingPolicy56.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray85);
        generator0.setClassLoader(classLoader51);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator13.getStrategy();
        generator7.setStrategy(generatorStrategy19);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean21 = generator0.getUseCache();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        java.lang.Object[] objArray24 = null;
        generator0.setDelegates(objArray24);
        generator0.setUseCache(true);
        generator0.setStyle(1);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray41);
        boolean boolean48 = namingPolicy20.equals((java.lang.Object) classArray31);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin50.newInstance((java.lang.Object[]) classArray61);
        java.lang.Class<?> wildcardClass64 = mixin50.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setAttemptLoad(true);
        boolean boolean39 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator37.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = null;
        generator37.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator37.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        boolean boolean68 = generatorStrategy43.equals((java.lang.Object) classArray54);
        boolean boolean70 = generatorStrategy43.equals((java.lang.Object) (short) 10);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setDelegates(objArray79);
        java.lang.Class<?> wildcardClass83 = generator71.getClass();
        boolean boolean84 = generatorStrategy43.equals((java.lang.Object) wildcardClass83);
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator15.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator19.setDelegates((java.lang.Object[]) classArray34);
        generator15.setClasses(classArray34);
        boolean boolean38 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator15.getNamingPolicy();
        java.lang.Object obj40 = null;
        boolean boolean41 = namingPolicy39.equals(obj40);
        generator7.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator7.getNamingPolicy();
        boolean boolean44 = generator7.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin54.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class<?> wildcardClass73 = classArray24.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (-1), 0.0f, generator20 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin25.newInstance((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator0.getUseCache();
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setClasses(classArray51);
        generator37.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator37.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        boolean boolean56 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin57 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        boolean boolean46 = generator0.getUseCache();
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.ClassLoader classLoader67 = generator55.getClassLoader();
        java.lang.ClassLoader classLoader68 = generator55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator55.getStrategy();
        generator55.setUseCache(false);
        generator55.setAttemptLoad(false);
        java.lang.ClassLoader classLoader74 = generator55.getClassLoader();
        generator55.setUseCache(true);
        boolean boolean77 = namingPolicy54.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setClasses(classArray27);
        generator13.setDelegates((java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        generator13.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        boolean boolean60 = generator57.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy61);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin65 = generator13.create();
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader68 = generator13.getClassLoader();
        generator0.setClassLoader(classLoader68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator70.setAttemptLoad(true);
        generator70.setAttemptLoad(false);
        boolean boolean75 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator70.setStrategy(generatorStrategy76);
        generator70.setAttemptLoad(false);
        generator70.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = null;
        generator82.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader86 = null;
        generator82.setClassLoader(classLoader86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator82.getStrategy();
        generator70.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator70.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator91 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader92 = null;
        generator91.setClassLoader(classLoader92);
        generator91.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator91.getStrategy();
        boolean boolean97 = namingPolicy90.equals((java.lang.Object) generatorStrategy96);
        generator0.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (-1), 0.0f, generator31 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin36.newInstance((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        java.lang.ClassLoader classLoader94 = generator80.getClassLoader();
        generator0.setClassLoader(classLoader94);
        boolean boolean96 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        boolean boolean52 = generatorStrategy25.equals((java.lang.Object) (short) 10);
        generator17.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean61 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        boolean boolean28 = namingPolicy25.equals((java.lang.Object) namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = generator29.create();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator69.setClasses(classArray79);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray88);
        generator66.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin65.newInstance((java.lang.Object[]) classArray79);
        generator29.setDelegates((java.lang.Object[]) classArray79);
        boolean boolean96 = namingPolicy25.equals((java.lang.Object) classArray79);
        java.lang.Class<?> wildcardClass97 = classArray79.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        boolean boolean48 = generator36.getAttemptLoad();
        generator36.setAttemptLoad(true);
        generator36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator36.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        generator55.setDelegates((java.lang.Object[]) classArray69);
        generator55.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setClasses(classArray86);
        generator55.setClasses(classArray86);
        java.lang.ClassLoader classLoader89 = generator55.getClassLoader();
        boolean boolean90 = namingPolicy54.equals((java.lang.Object) classLoader89);
        generator0.setClassLoader(classLoader89);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        generator0.setUseCache(false);
        boolean boolean33 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin34 = generator0.create();
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader36 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray62);
        generator0.setDelegates((java.lang.Object[]) classArray62);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        generator0.setStyle((int) (short) 0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator12.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        generator12.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader41 = null;
        generator40.setClassLoader(classLoader41);
        boolean boolean43 = namingPolicy38.equals((java.lang.Object) classLoader41);
        generator22.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator45.getStrategy();
        generator22.setStrategy(generatorStrategy49);
        generator12.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator52.setAttemptLoad(true);
        generator52.setAttemptLoad(false);
        boolean boolean57 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator52.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        boolean boolean62 = namingPolicy58.equals((java.lang.Object) generator59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator59.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator66.setAttemptLoad(true);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator80.getNamingPolicy();
        generator66.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader84 = null;
        generator83.setClassLoader(classLoader84);
        boolean boolean86 = namingPolicy81.equals((java.lang.Object) classLoader84);
        generator65.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator88 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator88.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = null;
        generator88.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator88.getStrategy();
        generator65.setStrategy(generatorStrategy92);
        generator59.setStrategy(generatorStrategy92);
        boolean boolean95 = generatorStrategy49.equals((java.lang.Object) generator59);
        generator0.setStrategy(generatorStrategy49);
        boolean boolean97 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean7 = namingPolicy5.equals((java.lang.Object) (byte) 100);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator20.getStrategy();
        generator8.setStrategy(generatorStrategy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        generator8.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator8.getStrategy();
        boolean boolean40 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        generator41.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        generator41.setClassLoader(classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator71.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        boolean boolean77 = namingPolicy72.equals((java.lang.Object) classLoader75);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        boolean boolean92 = namingPolicy72.equals((java.lang.Object) mixin91);
        generator41.setNamingPolicy(namingPolicy72);
        generator8.setNamingPolicy(namingPolicy72);
        boolean boolean95 = namingPolicy5.equals((java.lang.Object) generator8);
        boolean boolean96 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin97 = generator8.create();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator8.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        generator36.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin35.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray9);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator35.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = null;
        generator35.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray61);
        boolean boolean66 = generatorStrategy41.equals((java.lang.Object) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin21.newInstance((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
        java.lang.Class<?> wildcardClass75 = mixin74.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator0.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator0.setNamingPolicy(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator30.setStrategy(generatorStrategy36);
        generator30.setAttemptLoad(false);
        generator30.setStyle((int) (byte) 0);
        generator30.setAttemptLoad(false);
        boolean boolean44 = generator30.getUseCache();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        boolean boolean49 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean52 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        generator53.setAttemptLoad(false);
        boolean boolean59 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator53.getStrategy();
        generator0.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray41);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        generator20.setDelegates(objArray41);
        boolean boolean49 = generator20.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        generator50.setUseCache(false);
        java.lang.ClassLoader classLoader64 = generator50.getClassLoader();
        generator50.setAttemptLoad(false);
        java.lang.ClassLoader classLoader67 = generator50.getClassLoader();
        java.lang.ClassLoader classLoader68 = generator50.getClassLoader();
        generator20.setClassLoader(classLoader68);
        generator0.setClassLoader(classLoader68);
        java.lang.Class<?> wildcardClass71 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setStyle(1);
        boolean boolean52 = generator0.getUseCache();
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin14.newInstance((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader16 = null;
        generator15.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        generator18.setDelegates((java.lang.Object[]) classArray32);
        boolean boolean35 = generator18.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        generator36.setUseCache(false);
        java.lang.ClassLoader classLoader50 = null;
        generator36.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        generator36.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator55.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator55.getClassLoader();
        boolean boolean81 = namingPolicy53.equals((java.lang.Object) classLoader80);
        generator18.setClassLoader(classLoader80);
        generator15.setClassLoader(classLoader80);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        boolean boolean4 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator5.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setDelegates((java.lang.Object[]) classArray26);
        generator5.setClasses(classArray26);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator42.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = null;
        generator42.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        boolean boolean73 = generatorStrategy48.equals((java.lang.Object) classArray59);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray41);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        generator1.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.Object[] objArray15 = null;
        org.mockito.cglib.proxy.Mixin mixin16 = mixin14.newInstance(objArray15);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin16);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        generator11.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator11.getNamingPolicy();
        boolean boolean29 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy32);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin36 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray30);
        boolean boolean35 = generatorStrategy10.equals((java.lang.Object) classArray21);
        boolean boolean37 = generatorStrategy10.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        boolean boolean66 = generatorStrategy39.equals((java.lang.Object) mixin65);
        java.lang.Object obj67 = null;
        boolean boolean68 = generatorStrategy39.equals(obj67);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        generator8.setUseCache(false);
        java.lang.ClassLoader classLoader22 = null;
        generator8.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(false);
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator36.setDelegates((java.lang.Object[]) classArray48);
        generator27.setClasses(classArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator27.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = generator27.getClassLoader();
        boolean boolean53 = namingPolicy25.equals((java.lang.Object) classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray66);
        generator0.setClassLoader(classLoader52);
        boolean boolean69 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator59.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        boolean boolean91 = namingPolicy63.equals((java.lang.Object) classArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray97);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy25);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        generator52.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        generator52.setClasses(classArray67);
        generator0.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        boolean boolean84 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin85 = generator0.create();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        generator7.setUseCache(false);
        boolean boolean21 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator7.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator25.setStrategy(generatorStrategy31);
        generator25.setAttemptLoad(false);
        generator25.setStyle((int) (byte) 0);
        generator25.setAttemptLoad(false);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin51.newInstance(objArray71);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin76.newInstance(objArray84);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator25.setClasses(classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        generator7.setClasses(classArray89);
        generator0.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass97 = mixin96.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray4 = new java.lang.Object[] { true, (-1), 0.0f, generator3 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.create(objArray4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        generator30.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin29.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin58.newInstance((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin5.newInstance((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Object[] objArray75 = null;
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator14.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator14.setClasses(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader63 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        boolean boolean90 = namingPolicy62.equals((java.lang.Object) classArray85);
        generator55.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean92 = generator55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator55.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = null;
        generator0.setStrategy(generatorStrategy95);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        boolean boolean18 = namingPolicy14.equals((java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator15.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        boolean boolean42 = namingPolicy37.equals((java.lang.Object) classLoader40);
        generator21.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator44.getStrategy();
        generator21.setStrategy(generatorStrategy48);
        generator15.setStrategy(generatorStrategy48);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        generator15.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader81 = generator15.getClassLoader();
        java.lang.Class[] classArray82 = null;
        generator15.setClasses(classArray82);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator15.getStrategy();
        boolean boolean88 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setAttemptLoad(true);
        generator0.setStyle(1);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        boolean boolean27 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = namingPolicy28.equals((java.lang.Object) generator29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator35.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        generator35.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator35.getNamingPolicy();
        boolean boolean46 = namingPolicy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = generator47.getClassLoader();
        java.lang.ClassLoader classLoader60 = generator47.getClassLoader();
        generator35.setClassLoader(classLoader60);
        boolean boolean62 = generatorStrategy21.equals((java.lang.Object) generator35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy79);
        generator64.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator64.getNamingPolicy();
        generator64.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator64.getStrategy();
        boolean boolean87 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = generator64.getClassLoader();
        boolean boolean89 = generatorStrategy63.equals((java.lang.Object) classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader10 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator0.getStrategy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        generator21.setClasses(classArray42);
        generator18.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        boolean boolean48 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator8.setNamingPolicy(namingPolicy9);
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator8.setDelegates((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator61.setClasses(classArray71);
        generator61.setUseCache(false);
        java.lang.ClassLoader classLoader75 = null;
        generator61.setClassLoader(classLoader75);
        java.lang.Object[] objArray77 = new java.lang.Object[] { objArray54, (byte) 100, generator61 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray54);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator80.setClasses(classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin79.newInstance((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        java.lang.Class<?> wildcardClass98 = classArray95.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator22.setDelegates(objArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
        boolean boolean56 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        boolean boolean25 = namingPolicy20.equals((java.lang.Object) classLoader23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        boolean boolean40 = namingPolicy20.equals((java.lang.Object) mixin39);
        generator0.setNamingPolicy(namingPolicy20);
        boolean boolean42 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        boolean boolean57 = generator45.getAttemptLoad();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        generator63.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator45.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setClasses(classArray37);
        generator23.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean40 = generator23.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin41 = generator23.create();
        boolean boolean42 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator45.getNamingPolicy();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator45.setDelegates((java.lang.Object[]) classArray82);
        boolean boolean84 = generator45.getUseCache();
        boolean boolean85 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator45.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = generatorStrategy43.generate((org.mockito.cglib.core.ClassGenerator) generator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean39 = generator0.getUseCache();
        boolean boolean40 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator41.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader45 = null;
        generator41.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator41.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        boolean boolean72 = generatorStrategy47.equals((java.lang.Object) classArray58);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray40);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        generator0.setDelegates((java.lang.Object[]) classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        generator55.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator84.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = null;
        generator84.setStrategy(generatorStrategy86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator84.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        boolean boolean93 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        java.lang.Class[] classArray14 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator15.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        generator15.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray57 = new java.lang.Object[] { true, (-1), 0.0f, generator56 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        generator39.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        generator39.setDelegates(objArray79);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray79);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray79);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        generator7.setClasses(classArray84);
        boolean boolean88 = generator7.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader46 = null;
        generator45.setClassLoader(classLoader46);
        boolean boolean48 = namingPolicy43.equals((java.lang.Object) classLoader46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        boolean boolean63 = namingPolicy43.equals((java.lang.Object) mixin62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        generator64.setDelegates((java.lang.Object[]) classArray88);
        boolean boolean92 = namingPolicy43.equals((java.lang.Object) generator64);
        generator0.setNamingPolicy(namingPolicy43);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setDelegates((java.lang.Object[]) classArray33);
        generator21.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin37 = generator21.create();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        generator21.setDelegates((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        generator0.setStyle((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        generator0.setUseCache(false);
        boolean boolean33 = generator0.getUseCache();
        boolean boolean34 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = namingPolicy46.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator47.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        boolean boolean74 = namingPolicy69.equals((java.lang.Object) classLoader72);
        generator53.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator76.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator76.getStrategy();
        generator53.setStrategy(generatorStrategy80);
        generator47.setStrategy(generatorStrategy80);
        boolean boolean83 = generatorStrategy37.equals((java.lang.Object) generator47);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator84.setClasses(classArray94);
        generator47.setDelegates((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = generator47.create();
        org.mockito.cglib.proxy.Mixin mixin98 = generator47.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator47.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator0.getAttemptLoad();
        boolean boolean76 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator23.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator23.getNamingPolicy();
        generator23.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        boolean boolean31 = generator23.getAttemptLoad();
        boolean boolean32 = namingPolicy16.equals((java.lang.Object) generator23);
        generator23.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator23.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator66.setAttemptLoad(true);
        generator66.setAttemptLoad(false);
        boolean boolean71 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator66.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator66.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = null;
        generator75.setNamingPolicy(namingPolicy76);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator75.setDelegates((java.lang.Object[]) classArray87);
        generator66.setClasses(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator66.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(true);
        boolean boolean22 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator46.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = null;
        generator46.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray72);
        boolean boolean77 = generatorStrategy52.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray45);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        boolean boolean8 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setUseCache(true);
        generator0.setStyle(0);
        java.lang.Class[] classArray79 = null;
        generator0.setClasses(classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader17 = null;
        generator16.setClassLoader(classLoader17);
        generator16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        boolean boolean24 = namingPolicy15.equals((java.lang.Object) generator16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin25 = generator16.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = namingPolicy19.equals((java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator20.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        boolean boolean47 = namingPolicy42.equals((java.lang.Object) classLoader45);
        generator26.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator26.setStrategy(generatorStrategy53);
        generator20.setStrategy(generatorStrategy53);
        generator20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator58.getClassLoader();
        generator20.setClassLoader(classLoader83);
        boolean boolean85 = generator20.getAttemptLoad();
        boolean boolean86 = generatorStrategy12.equals((java.lang.Object) generator20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator38.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = null;
        generator38.setClassLoader(classLoader42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        boolean boolean69 = generatorStrategy44.equals((java.lang.Object) classArray55);
        boolean boolean71 = generatorStrategy44.equals((java.lang.Object) (short) 10);
        generator36.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator36.getStrategy();
        boolean boolean74 = namingPolicy29.equals((java.lang.Object) generatorStrategy73);
        generator0.setStrategy(generatorStrategy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        boolean boolean77 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classArray56);
        generator26.setDelegates((java.lang.Object[]) classArray56);
        generator26.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator65.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        generator26.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        generator74.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator74.getStrategy();
        generator0.setStrategy(generatorStrategy79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray86);
        java.lang.Object[] objArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setDelegates(objArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        generator28.setUseCache(false);
        generator28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator28.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray56);
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classArray46);
        generator0.setClasses(classArray46);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean51 = namingPolicy31.equals((java.lang.Object) mixin50);
        generator0.setNamingPolicy(namingPolicy31);
        java.lang.Class<?> wildcardClass53 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        generator22.setAttemptLoad(false);
        boolean boolean27 = generator22.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator22.setStrategy(generatorStrategy28);
        generator22.setAttemptLoad(false);
        generator22.setUseCache(true);
        boolean boolean34 = generatorStrategy21.equals((java.lang.Object) generator22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin35 = generator22.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader2 = null;
        generator1.setClassLoader(classLoader2);
        java.lang.ClassLoader classLoader4 = null;
        generator1.setClassLoader(classLoader4);
        generator1.setAttemptLoad(false);
        boolean boolean8 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        boolean boolean34 = generator9.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin35 = generator9.create();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator9.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray69);
        generator9.setClasses(classArray54);
        generator1.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator59 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray60 = generatorStrategy58.generate(classGenerator59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        generator16.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        boolean boolean77 = generatorStrategy50.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray41);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        generator20.setDelegates(objArray41);
        boolean boolean49 = generator20.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        generator50.setUseCache(false);
        java.lang.ClassLoader classLoader64 = generator50.getClassLoader();
        generator50.setAttemptLoad(false);
        java.lang.ClassLoader classLoader67 = generator50.getClassLoader();
        java.lang.ClassLoader classLoader68 = generator50.getClassLoader();
        generator20.setClassLoader(classLoader68);
        generator0.setClassLoader(classLoader68);
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (-1), 0.0f, generator17 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray18);
        generator0.setDelegates(objArray18);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator25.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray61);
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray66 = new java.lang.Object[] { true, (-1), 0.0f, generator65 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        generator0.setDelegates(objArray66);
        org.mockito.cglib.proxy.Mixin mixin71 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        generator65.setAttemptLoad(false);
        boolean boolean70 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator65.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        generator65.setClasses(classArray86);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator65.getNamingPolicy();
        generator65.setAttemptLoad(true);
        boolean boolean92 = generatorStrategy62.equals((java.lang.Object) generator65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator65.getStrategy();
        generator65.setUseCache(false);
        generator65.setStyle(2);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator65.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator0.setDelegates(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        generator54.setUseCache(false);
        boolean boolean68 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator54.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator54.getClassLoader();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        generator54.setDelegates(objArray78);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray78);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator0.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        generator78.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        java.lang.Class[] classArray84 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator81.setClasses(classArray93);
        generator78.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray93);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        generator18.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = generatorStrategy17.generate((org.mockito.cglib.core.ClassGenerator) generator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin31);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray99 = generatorStrategy97.generate(classGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        generator35.setDelegates((java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray74);
        generator35.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setAttemptLoad(true);
        boolean boolean82 = generator79.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator79.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy83);
        generator35.setUseCache(true);
        generator35.setUseCache(true);
        java.lang.ClassLoader classLoader89 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader89);
        org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        boolean boolean61 = generatorStrategy34.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean63 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass66 = namingPolicy65.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator39.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin49 = generator39.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator0.setNamingPolicy(namingPolicy19);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin23 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator7.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }
}


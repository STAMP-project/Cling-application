import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class<?> wildcardClass89 = classArray82.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        java.lang.Object obj52 = null;
        boolean boolean53 = namingPolicy47.equals(obj52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator56.setClasses(classArray68);
        java.lang.ClassLoader classLoader70 = generator56.getClassLoader();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray90);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray80);
        org.mockito.cglib.core.Predicate predicate98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = namingPolicy47.getClassName("hi!", "", (java.lang.Object) classLoader70, predicate98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        boolean boolean51 = namingPolicy31.equals((java.lang.Object) mixin50);
        generator0.setNamingPolicy(namingPolicy31);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray60);
        generator0.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin65 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        boolean boolean79 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin2 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator41.getStrategy();
        generator29.setStrategy(generatorStrategy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator29.setClasses(classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator63.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader67 = null;
        generator63.setClassLoader(classLoader67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator63.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator63.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setAttemptLoad(true);
        generator72.setAttemptLoad(false);
        boolean boolean77 = namingPolicy70.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator78.getNamingPolicy();
        boolean boolean83 = namingPolicy70.equals((java.lang.Object) generator78);
        generator29.setNamingPolicy(namingPolicy70);
        generator0.setNamingPolicy(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        generator7.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin16 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator81.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader85 = null;
        generator84.setClassLoader(classLoader85);
        boolean boolean87 = namingPolicy82.equals((java.lang.Object) classLoader85);
        generator66.setNamingPolicy(namingPolicy82);
        generator66.setStyle(0);
        java.lang.Class[] classArray91 = null;
        generator66.setClasses(classArray91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = null;
        generator66.setStrategy(generatorStrategy93);
        boolean boolean95 = generator66.getAttemptLoad();
        boolean boolean96 = generatorStrategy65.equals((java.lang.Object) generator66);
        java.lang.Class<?> wildcardClass97 = generator66.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass23 = generatorStrategy22.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        java.lang.Class[] classArray14 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        generator15.setAttemptLoad(false);
        boolean boolean20 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator15.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setDelegates((java.lang.Object[]) classArray36);
        generator15.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray57 = new java.lang.Object[] { true, (-1), 0.0f, generator56 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        generator39.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        generator39.setDelegates(objArray79);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray79);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray79);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(objArray14);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        generator0.setDelegates(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray43 = new java.lang.Object[] { true, (-1), 0.0f, generator42 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        generator25.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        generator25.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        boolean boolean74 = namingPolicy24.equals((java.lang.Object) mixin73);
        generator0.setNamingPolicy(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        java.lang.Class<?> wildcardClass64 = mixin23.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator51.setNamingPolicy(namingPolicy52);
        boolean boolean54 = namingPolicy50.equals((java.lang.Object) generator51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        generator0.setStrategy(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classArray53);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        boolean boolean93 = namingPolicy65.equals((java.lang.Object) classArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray53);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        generator47.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader86 = generator61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator61.getStrategy();
        generator47.setStrategy(generatorStrategy87);
        boolean boolean89 = generator47.getUseCache();
        java.lang.ClassLoader classLoader90 = generator47.getClassLoader();
        generator39.setClassLoader(classLoader90);
        boolean boolean92 = generator39.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin93 = generator39.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator28.getNamingPolicy();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator28.setDelegates((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = namingPolicy19.equals((java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator20.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        boolean boolean47 = namingPolicy42.equals((java.lang.Object) classLoader45);
        generator26.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator26.setStrategy(generatorStrategy53);
        generator20.setStrategy(generatorStrategy53);
        generator20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator58.getClassLoader();
        generator20.setClassLoader(classLoader83);
        generator6.setClassLoader(classLoader83);
        generator0.setClassLoader(classLoader83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        generator0.setStyle(1);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator71.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator74.setNamingPolicy(namingPolicy75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        generator71.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin70.newInstance((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray86);
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator58.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = null;
        generator58.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator58.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = namingPolicy65.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator73.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator73.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator73.getNamingPolicy();
        boolean boolean78 = namingPolicy65.equals((java.lang.Object) generator73);
        generator0.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader80 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader80);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator8.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        boolean boolean14 = generator8.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray23);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator8.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator31.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator31.getNamingPolicy();
        generator31.setAttemptLoad(true);
        generator31.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator40.setStrategy(generatorStrategy46);
        generator40.setAttemptLoad(false);
        boolean boolean50 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy52);
        generator31.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = generator55.getClassLoader();
        boolean boolean70 = namingPolicy52.equals((java.lang.Object) classLoader69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray82);
        generator0.setClassLoader(classLoader69);
        java.lang.Class<?> wildcardClass85 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        generator0.setClasses(classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        generator17.setDelegates((java.lang.Object[]) classArray31);
        generator17.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator36.setAttemptLoad(true);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator36.setClasses(classArray48);
        generator17.setClasses(classArray48);
        java.lang.Object[] objArray51 = null;
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        generator0.setClasses(classArray48);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        boolean boolean33 = namingPolicy29.equals((java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator30.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        boolean boolean57 = namingPolicy52.equals((java.lang.Object) classLoader55);
        generator36.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator59.getStrategy();
        generator36.setStrategy(generatorStrategy63);
        generator30.setStrategy(generatorStrategy63);
        generator11.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator11.getStrategy();
        java.lang.ClassLoader classLoader68 = generator11.getClassLoader();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setClasses(classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray80, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray80);
        generator0.setClasses(classArray80);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        boolean boolean53 = generator50.getUseCache();
        java.lang.Class[] classArray54 = null;
        generator50.setClasses(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader61 = null;
        generator60.setClassLoader(classLoader61);
        generator60.setUseCache(false);
        generator60.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator60.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator60.getStrategy();
        boolean boolean70 = generator60.getUseCache();
        org.mockito.cglib.core.Predicate predicate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = namingPolicy56.getClassName("hi!", "", (java.lang.Object) generator60, predicate71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator5.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader74 = generator5.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray35);
        boolean boolean40 = generatorStrategy15.equals((java.lang.Object) classArray26);
        boolean boolean42 = generatorStrategy15.equals((java.lang.Object) (short) 10);
        generator7.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        boolean boolean46 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator17.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader25 = generator17.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setClasses(classArray45);
        generator31.setDelegates((java.lang.Object[]) classArray45);
        boolean boolean48 = generator31.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin49 = generator31.create();
        boolean boolean50 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator31.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator31.getStrategy();
        java.lang.ClassLoader classLoader53 = generator31.getClassLoader();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray61);
        generator0.setClassLoader(classLoader53);
        java.lang.Class[] classArray65 = null;
        generator0.setClasses(classArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin67 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean52 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean58 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = generator27.getClassLoader();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray81);
        boolean boolean86 = generatorStrategy61.equals((java.lang.Object) classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray72);
        generator0.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = null;
        generator0.setNamingPolicy(namingPolicy93);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator27.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = null;
        generator27.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        boolean boolean58 = generatorStrategy33.equals((java.lang.Object) classArray44);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader66 = null;
        generator65.setClassLoader(classLoader66);
        java.lang.ClassLoader classLoader68 = null;
        generator65.setClassLoader(classLoader68);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray74 = new java.lang.Object[] { true, (-1), 0.0f, generator73 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        generator65.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin64.newInstance(objArray74);
        generator0.setDelegates(objArray74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        boolean boolean81 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        boolean boolean73 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator74.getStrategy();
        generator7.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator7.getNamingPolicy();
        java.lang.Class<?> wildcardClass81 = generator7.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setClasses(classArray24);
        generator10.setDelegates((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        generator10.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        boolean boolean57 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator54.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy58);
        generator10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader63 = null;
        generator62.setClassLoader(classLoader63);
        generator62.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray86);
        generator62.setClasses(classArray77);
        generator10.setClasses(classArray77);
        java.lang.ClassLoader classLoader93 = generator10.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        generator7.setClasses(classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = generator7.create();
        generator7.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator7.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader82 = null;
        generator81.setClassLoader(classLoader82);
        boolean boolean84 = namingPolicy79.equals((java.lang.Object) classLoader82);
        generator63.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator86.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = null;
        generator86.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator86.getStrategy();
        generator63.setStrategy(generatorStrategy90);
        generator0.setStrategy(generatorStrategy90);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        boolean boolean28 = namingPolicy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator34.setAttemptLoad(true);
        generator34.setAttemptLoad(false);
        boolean boolean39 = generator34.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator34.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        generator34.setClassLoader(classLoader42);
        boolean boolean44 = generator34.getUseCache();
        generator34.setUseCache(false);
        generator34.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = namingPolicy30.getClassName("", "hi!", (java.lang.Object) false, predicate49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        boolean boolean18 = namingPolicy14.equals((java.lang.Object) generator15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator15.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        boolean boolean42 = namingPolicy37.equals((java.lang.Object) classLoader40);
        generator21.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator44.getStrategy();
        generator21.setStrategy(generatorStrategy48);
        generator15.setStrategy(generatorStrategy48);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        generator15.setClassLoader(classLoader78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator15.getNamingPolicy();
        java.lang.ClassLoader classLoader81 = generator15.getClassLoader();
        java.lang.Class[] classArray82 = null;
        generator15.setClasses(classArray82);
        generator15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator15.getStrategy();
        boolean boolean88 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator11.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator11.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        generator20.setAttemptLoad(false);
        boolean boolean25 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator20.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setDelegates((java.lang.Object[]) classArray41);
        generator20.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = generator20.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray56);
        generator9.setClassLoader(classLoader45);
        generator9.setUseCache(true);
        boolean boolean62 = generator9.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) generator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray46);
        generator0.setClasses(classArray46);
        boolean boolean64 = generator0.getAttemptLoad();
        boolean boolean65 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        generator0.setStyle(1);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setClasses(classArray40);
        generator26.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator26.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator0.getNamingPolicy();
        boolean boolean49 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        generator27.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator27.getStrategy();
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        generator27.setDelegates((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray90);
        generator0.setDelegates(objArray90);
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (-1), 0.0f, generator17 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(objArray18);
        generator0.setDelegates(objArray18);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator25.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray61);
        generator0.setClassLoader(classLoader50);
        java.lang.Object[] objArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        boolean boolean49 = namingPolicy21.equals((java.lang.Object) classArray44);
        generator14.setDelegates((java.lang.Object[]) classArray44);
        generator14.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        generator14.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        boolean boolean93 = namingPolicy65.equals((java.lang.Object) classArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        generator14.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray98);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        boolean boolean28 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray75);
        generator53.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin52.newInstance((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray94);
        generator25.setDelegates((java.lang.Object[]) classArray94);
        boolean boolean97 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator25.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy98);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin14.newInstance((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator5.getStrategy();
        generator5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator5.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator5.setNamingPolicy(namingPolicy77);
        java.lang.Class<?> wildcardClass79 = generator5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator16.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = null;
        generator16.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator16.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = namingPolicy23.equals((java.lang.Object) false);
        generator0.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = generator32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator32.getNamingPolicy();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator32.setClasses(classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator32.getNamingPolicy();
        boolean boolean61 = namingPolicy23.equals((java.lang.Object) namingPolicy60);
        java.lang.Class<?> wildcardClass62 = namingPolicy23.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray30);
        boolean boolean35 = generatorStrategy10.equals((java.lang.Object) classArray21);
        boolean boolean37 = generatorStrategy10.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy10);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        generator41.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator41.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        boolean boolean74 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator70.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy75);
        generator41.setUseCache(true);
        generator41.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator41.getStrategy();
        generator0.setStrategy(generatorStrategy81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = namingPolicy46.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator47.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator68.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        boolean boolean74 = namingPolicy69.equals((java.lang.Object) classLoader72);
        generator53.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator76.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator76.getStrategy();
        generator53.setStrategy(generatorStrategy80);
        generator47.setStrategy(generatorStrategy80);
        boolean boolean83 = generatorStrategy37.equals((java.lang.Object) generator47);
        boolean boolean84 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator47.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin86 = generator47.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        generator47.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator61.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator70.setNamingPolicy(namingPolicy71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator70.setDelegates((java.lang.Object[]) classArray82);
        generator61.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader86 = generator61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator61.getStrategy();
        generator47.setStrategy(generatorStrategy87);
        boolean boolean89 = generator47.getUseCache();
        java.lang.ClassLoader classLoader90 = generator47.getClassLoader();
        generator39.setClassLoader(classLoader90);
        boolean boolean92 = generator39.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator39.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        boolean boolean28 = namingPolicy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy30);
        java.lang.Class<?> wildcardClass32 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        generator40.setUseCache(false);
        java.lang.ClassLoader classLoader54 = null;
        generator40.setClassLoader(classLoader54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator56.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator70.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        boolean boolean76 = namingPolicy71.equals((java.lang.Object) classLoader74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        boolean boolean91 = namingPolicy71.equals((java.lang.Object) mixin90);
        generator40.setNamingPolicy(namingPolicy71);
        generator40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator40.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator28.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = null;
        generator28.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        boolean boolean59 = generatorStrategy34.equals((java.lang.Object) classArray45);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        generator7.setDelegates((java.lang.Object[]) classArray21);
        boolean boolean24 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin26 = generator7.create();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        boolean boolean46 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator41.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setDelegates((java.lang.Object[]) classArray62);
        generator41.setClasses(classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator41.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = generator41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator41.getStrategy();
        generator27.setStrategy(generatorStrategy67);
        boolean boolean69 = generator27.getUseCache();
        java.lang.ClassLoader classLoader70 = generator27.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator39.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy40);
        generator25.setUseCache(false);
        generator25.setUseCache(true);
        generator25.setAttemptLoad(false);
        boolean boolean48 = generator25.getAttemptLoad();
        boolean boolean49 = namingPolicy24.equals((java.lang.Object) generator25);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.core.Predicate predicate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = namingPolicy24.getClassName("hi!", "hi!", (java.lang.Object) mixin79, predicate80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        generator24.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin61 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        boolean boolean13 = generator7.getUseCache();
        boolean boolean14 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        boolean boolean18 = generator15.getUseCache();
        java.lang.Class[] classArray19 = null;
        generator15.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy25);
        generator7.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = generator29.getClassLoader();
        java.lang.ClassLoader classLoader42 = generator29.getClassLoader();
        boolean boolean43 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = generator47.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator47.getNamingPolicy();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator47.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator75.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator47.setClasses(classArray85);
        boolean boolean89 = generatorStrategy46.equals((java.lang.Object) generator47);
        java.lang.ClassLoader classLoader90 = generator47.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator42.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = null;
        generator42.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        boolean boolean73 = generatorStrategy48.equals((java.lang.Object) classArray59);
        generator40.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean77 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator29.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = null;
        generator29.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator29.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        boolean boolean43 = namingPolicy36.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        boolean boolean49 = namingPolicy36.equals((java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator44.getStrategy();
        generator0.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader57 = null;
        generator56.setClassLoader(classLoader57);
        generator56.setUseCache(false);
        generator56.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator56.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator56.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = namingPolicy53.getClassName("", "", (java.lang.Object) namingPolicy64, predicate65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator4.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = generator4.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray40);
        generator0.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean47 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator16.setDelegates((java.lang.Object[]) classArray30);
        boolean boolean33 = generator16.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        generator16.setClassLoader(classLoader78);
        generator0.setClassLoader(classLoader78);
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator7.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        boolean boolean13 = generator7.getUseCache();
        boolean boolean14 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator15.setAttemptLoad(true);
        boolean boolean18 = generator15.getUseCache();
        java.lang.Class[] classArray19 = null;
        generator15.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy25);
        generator7.setStrategy(generatorStrategy25);
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        boolean boolean41 = generator29.getAttemptLoad();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator47.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator47.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator64.getStrategy();
        generator52.setStrategy(generatorStrategy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator52.setClasses(classArray79);
        generator47.setDelegates((java.lang.Object[]) classArray79);
        java.lang.Object[] objArray84 = null;
        generator47.setDelegates(objArray84);
        boolean boolean86 = namingPolicy46.equals((java.lang.Object) objArray84);
        generator0.setNamingPolicy(namingPolicy46);
        java.lang.Object obj90 = new java.lang.Object();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy46.getClassName("", "hi!", obj90, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        boolean boolean85 = generator0.getUseCache();
        boolean boolean86 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator7.getStrategy();
        generator7.setStyle((int) (short) 1);
        generator7.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) generator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        generator21.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator21.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin39 = generator21.create();
        boolean boolean40 = generator21.getAttemptLoad();
        boolean boolean41 = generator21.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator42.setNamingPolicy(namingPolicy43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (-1), 0.0f, generator59 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        generator42.setDelegates(objArray60);
        generator21.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        generator0.setDelegates(objArray60);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator26.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator29.getNamingPolicy();
        java.lang.ClassLoader classLoader34 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) classArray56);
        generator26.setDelegates((java.lang.Object[]) classArray56);
        generator26.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator65.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = null;
        generator65.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator65.getStrategy();
        generator26.setStrategy(generatorStrategy71);
        generator0.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        generator74.setUseCache(false);
        java.lang.ClassLoader classLoader79 = null;
        generator74.setClassLoader(classLoader79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator74.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator74.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = generatorStrategy71.generate((org.mockito.cglib.core.ClassGenerator) generator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (short) 0);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator23.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator23.getNamingPolicy();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator23.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean62 = generator23.getUseCache();
        java.lang.ClassLoader classLoader63 = generator23.getClassLoader();
        generator0.setClassLoader(classLoader63);
        boolean boolean65 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator50.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader54 = null;
        generator50.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray76);
        boolean boolean81 = generatorStrategy56.equals((java.lang.Object) classArray67);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray67);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader25 = null;
        generator24.setClassLoader(classLoader25);
        boolean boolean27 = namingPolicy22.equals((java.lang.Object) classLoader25);
        generator6.setNamingPolicy(namingPolicy22);
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator6.setDelegates((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator10.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = namingPolicy17.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator25.getNamingPolicy();
        boolean boolean30 = namingPolicy17.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        generator32.setUseCache(false);
        java.lang.ClassLoader classLoader46 = null;
        generator32.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        boolean boolean77 = namingPolicy49.equals((java.lang.Object) classLoader76);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator25.setDelegates((java.lang.Object[]) classArray90);
        generator0.setDelegates((java.lang.Object[]) classArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator40.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = null;
        generator40.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        boolean boolean85 = generator0.getAttemptLoad();
        boolean boolean86 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator32.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator32.getNamingPolicy();
        generator32.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray60 = generatorStrategy31.generate((org.mockito.cglib.core.ClassGenerator) generator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin41 = generator0.create();
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        java.lang.Object[] objArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = namingPolicy12.equals((java.lang.Object) generator13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator13.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator42.getStrategy();
        generator19.setStrategy(generatorStrategy46);
        generator13.setStrategy(generatorStrategy46);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        generator13.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator13.getNamingPolicy();
        java.lang.ClassLoader classLoader79 = generator13.getClassLoader();
        java.lang.Class[] classArray80 = null;
        generator13.setClasses(classArray80);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy84);
        boolean boolean86 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader31 = null;
        generator30.setClassLoader(classLoader31);
        generator30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator49.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader53 = null;
        generator49.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator49.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray75);
        boolean boolean80 = generatorStrategy55.equals((java.lang.Object) classArray66);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        generator30.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray66);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin76 = generator0.create();
        generator0.setStyle((int) (short) 1);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = namingPolicy19.equals((java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator20.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        boolean boolean47 = namingPolicy42.equals((java.lang.Object) classLoader45);
        generator26.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator26.setStrategy(generatorStrategy53);
        generator20.setStrategy(generatorStrategy53);
        generator20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator58.getClassLoader();
        generator20.setClassLoader(classLoader83);
        generator6.setClassLoader(classLoader83);
        generator0.setClassLoader(classLoader83);
        boolean boolean87 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy21);
        generator0.setNamingPolicy(namingPolicy21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy21);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = generator18.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator18.getNamingPolicy();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator18.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator18.setClasses(classArray56);
        boolean boolean60 = generatorStrategy17.equals((java.lang.Object) generator18);
        java.lang.ClassLoader classLoader61 = generator18.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setClasses(classArray72);
        generator62.setUseCache(false);
        boolean boolean76 = generator62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator62.getNamingPolicy();
        generator62.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator62.getStrategy();
        java.lang.ClassLoader classLoader81 = generator62.getClassLoader();
        generator18.setClassLoader(classLoader81);
        java.lang.ClassLoader classLoader83 = generator18.getClassLoader();
        boolean boolean84 = generator18.getUseCache();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator33.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator33.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator37.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        generator37.setClassLoader(classLoader45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator37.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator33.getUseCache();
        boolean boolean50 = generatorStrategy32.equals((java.lang.Object) boolean49);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        boolean boolean56 = generator0.getUseCache();
        generator0.setUseCache(false);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        boolean boolean36 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setDelegates(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        generator19.setDelegates(objArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator19.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator75.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy76);
        generator55.setNamingPolicy(namingPolicy76);
        generator0.setNamingPolicy(namingPolicy76);
        boolean boolean80 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin9.newInstance((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setClasses(classArray59);
        java.lang.ClassLoader classLoader61 = generator47.getClassLoader();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray81);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin46.newInstance((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Class<?> wildcardClass92 = classArray91.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator31.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator37.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator65.setClasses(classArray77);
        generator63.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy80);
        generator37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator37.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = generatorStrategy35.generate((org.mockito.cglib.core.ClassGenerator) generator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        boolean boolean33 = namingPolicy29.equals((java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator30.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        boolean boolean57 = namingPolicy52.equals((java.lang.Object) classLoader55);
        generator36.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator59.getStrategy();
        generator36.setStrategy(generatorStrategy63);
        generator30.setStrategy(generatorStrategy63);
        generator30.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setAttemptLoad(true);
        generator68.setAttemptLoad(false);
        boolean boolean73 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator77.setNamingPolicy(namingPolicy78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator77.setDelegates((java.lang.Object[]) classArray89);
        generator68.setClasses(classArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator68.getNamingPolicy();
        java.lang.ClassLoader classLoader93 = generator68.getClassLoader();
        generator30.setClassLoader(classLoader93);
        generator0.setClassLoader(classLoader93);
        boolean boolean96 = generator0.getAttemptLoad();
        java.lang.Object[] objArray97 = null;
        generator0.setDelegates(objArray97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        generator5.setDelegates((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator5.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        generator35.setAttemptLoad(false);
        boolean boolean40 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator35.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy68);
        generator5.setNamingPolicy(namingPolicy68);
        boolean boolean71 = generator5.getAttemptLoad();
        boolean boolean72 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean73 = generator5.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator5.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        java.lang.Object[] objArray55 = null;
        generator0.setDelegates(objArray55);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy54);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        generator7.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin74 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        generator0.setClasses(classArray50);
        java.lang.ClassLoader classLoader55 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator56.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setClasses(classArray71);
        generator56.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        boolean boolean36 = generatorStrategy11.equals((java.lang.Object) classArray22);
        boolean boolean38 = generatorStrategy11.equals((java.lang.Object) (short) 10);
        generator3.setStrategy(generatorStrategy11);
        generator0.setStrategy(generatorStrategy11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setClasses(classArray46);
        boolean boolean48 = generator36.getAttemptLoad();
        generator36.setAttemptLoad(true);
        generator36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator36.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        generator55.setDelegates((java.lang.Object[]) classArray69);
        generator55.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator74.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator74.setClasses(classArray86);
        generator55.setClasses(classArray86);
        java.lang.ClassLoader classLoader89 = generator55.getClassLoader();
        boolean boolean90 = namingPolicy54.equals((java.lang.Object) classLoader89);
        generator0.setClassLoader(classLoader89);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        boolean boolean44 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        generator45.setUseCache(false);
        java.lang.ClassLoader classLoader59 = null;
        generator45.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator0.setClasses(classArray85);
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        generator38.setAttemptLoad(false);
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator38.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator47.setNamingPolicy(namingPolicy48);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setDelegates((java.lang.Object[]) classArray59);
        generator38.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray59);
        generator20.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        boolean boolean67 = generator64.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator64.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy68);
        generator20.setAttemptLoad(true);
        boolean boolean72 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy73);
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator76.setClasses(classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator0.setDelegates((java.lang.Object[]) classArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator57 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = generatorStrategy56.generate(classGenerator57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy56);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator42.setClasses(classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setAttemptLoad(true);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator79.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        generator12.setAttemptLoad(false);
        boolean boolean17 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = namingPolicy18.equals((java.lang.Object) generator19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator19.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader44 = null;
        generator43.setClassLoader(classLoader44);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) classLoader44);
        generator25.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator48.getStrategy();
        generator25.setStrategy(generatorStrategy52);
        generator19.setStrategy(generatorStrategy52);
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass34 = namingPolicy33.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader28 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader28);
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        boolean boolean73 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator74.getStrategy();
        generator7.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader81 = null;
        generator80.setClassLoader(classLoader81);
        generator80.setStyle((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray85 = generatorStrategy78.generate((org.mockito.cglib.core.ClassGenerator) generator80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        boolean boolean40 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setClasses(classArray47);
        generator32.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader52 = null;
        generator51.setClassLoader(classLoader52);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        generator51.setDelegates(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray61);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray61);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class<?> wildcardClass68 = mixin67.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader5 = null;
        generator4.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        generator7.setDelegates((java.lang.Object[]) classArray21);
        boolean boolean24 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        generator25.setUseCache(false);
        java.lang.ClassLoader classLoader39 = null;
        generator25.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        generator44.setAttemptLoad(false);
        boolean boolean49 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        generator44.setClasses(classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator44.getNamingPolicy();
        java.lang.ClassLoader classLoader69 = generator44.getClassLoader();
        boolean boolean70 = namingPolicy42.equals((java.lang.Object) classLoader69);
        generator7.setClassLoader(classLoader69);
        generator4.setClassLoader(classLoader69);
        java.lang.ClassLoader classLoader73 = generator4.getClassLoader();
        java.lang.ClassLoader classLoader74 = generator4.getClassLoader();
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray82);
        generator0.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        boolean boolean89 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator16.setDelegates((java.lang.Object[]) classArray30);
        boolean boolean33 = generator16.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        generator16.setClassLoader(classLoader78);
        generator0.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator82.setDelegates(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray90);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator15.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin14.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        generator34.setDelegates(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        boolean boolean85 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        generator5.setAttemptLoad(false);
        boolean boolean11 = generator5.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator36.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        generator36.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin35.newInstance((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin35.newInstance(objArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        generator5.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        generator5.setClasses(classArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator5.getNamingPolicy();
        boolean boolean96 = generatorStrategy4.equals((java.lang.Object) namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        java.lang.ClassLoader classLoader24 = generator10.getClassLoader();
        boolean boolean25 = generator10.getUseCache();
        generator10.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator10.getStrategy();
        org.mockito.cglib.core.Predicate predicate29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = namingPolicy7.getClassName("", "", (java.lang.Object) generator10, predicate29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator24.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        boolean boolean55 = generatorStrategy30.equals((java.lang.Object) classArray41);
        boolean boolean57 = generatorStrategy30.equals((java.lang.Object) (short) 10);
        generator22.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy63);
        boolean boolean65 = generator0.getUseCache();
        boolean boolean66 = generator0.getAttemptLoad();
        boolean boolean67 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator28.getNamingPolicy();
        generator28.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator34.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator34.setClasses(classArray64);
        generator28.setDelegates((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray84 = new java.lang.Object[] { true, (-1), 0.0f, generator83 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin79.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        generator60.setAttemptLoad(false);
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator60.setStrategy(generatorStrategy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator69.setNamingPolicy(namingPolicy70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator69.setDelegates((java.lang.Object[]) classArray81);
        generator60.setClasses(classArray81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator60.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin85 = generator60.create();
        boolean boolean86 = generatorStrategy59.equals((java.lang.Object) mixin85);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin42 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        java.lang.ClassLoader classLoader53 = generator28.getClassLoader();
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classLoader53);
        generator0.setClassLoader(classLoader53);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin61 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.Object obj5 = null;
        boolean boolean6 = namingPolicy4.equals(obj5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        generator7.setAttemptLoad(false);
        boolean boolean12 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = namingPolicy13.equals((java.lang.Object) generator14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator14.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        boolean boolean41 = namingPolicy36.equals((java.lang.Object) classLoader39);
        generator20.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator43.getStrategy();
        generator20.setStrategy(generatorStrategy47);
        generator14.setStrategy(generatorStrategy47);
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray57 = new java.lang.Object[] { true, (-1), 0.0f, generator56 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        generator14.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = generator14.create();
        boolean boolean63 = namingPolicy4.equals((java.lang.Object) generator14);
        java.lang.Class<?> wildcardClass64 = generator14.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray5 = new java.lang.Object[] { true, (-1), 0.0f, generator4 };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin9.newInstance((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        boolean boolean10 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator13.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator13.setClasses(classArray46);
        generator4.setClasses(classArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass56 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader65);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator8.getStrategy();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator8.setDelegates(objArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        boolean boolean93 = namingPolicy65.equals((java.lang.Object) classArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin60.newInstance((java.lang.Object[]) classArray96);
        generator0.setDelegates((java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray96);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray88);
        boolean boolean90 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
        java.lang.Class<?> wildcardClass92 = mixin91.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        generator8.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin62.newInstance((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        java.lang.Class<?> wildcardClass82 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        generator7.setDelegates((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator25.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator34.setDelegates((java.lang.Object[]) classArray46);
        generator25.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray46);
        generator7.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        boolean boolean54 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator51.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy55);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        generator59.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator64.setClasses(classArray74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray83);
        generator59.setClasses(classArray74);
        generator7.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy90);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray87);
        boolean boolean91 = namingPolicy33.equals((java.lang.Object) classLoader78);
        generator0.setClassLoader(classLoader78);
        generator0.setAttemptLoad(true);
        boolean boolean95 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setClasses(classArray33);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        boolean boolean36 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setDelegates(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        generator19.setDelegates(objArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator19.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator55.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = null;
        generator55.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator75.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy76);
        generator55.setNamingPolicy(namingPolicy76);
        generator0.setNamingPolicy(namingPolicy76);
        boolean boolean80 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator31.setNamingPolicy(namingPolicy33);
        java.lang.ClassLoader classLoader35 = null;
        generator31.setClassLoader(classLoader35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator31.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator38.setClasses(classArray48);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray57);
        boolean boolean62 = generatorStrategy37.equals((java.lang.Object) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        boolean boolean87 = generatorStrategy37.equals((java.lang.Object) objArray82);
        generator24.setDelegates(objArray82);
        boolean boolean89 = generator24.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy23.generate((org.mockito.cglib.core.ClassGenerator) generator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        java.lang.Class<?> wildcardClass29 = mixin28.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator9.setAttemptLoad(false);
        boolean boolean25 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        generator9.setClasses(classArray38);
        boolean boolean41 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator42.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator45.setNamingPolicy(namingPolicy46);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator45.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        generator42.setClasses(classArray57);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setClasses(classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray86);
        generator42.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator9.setClasses(classArray72);
        generator9.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator9.getStrategy();
        boolean boolean94 = generatorStrategy8.equals((java.lang.Object) generatorStrategy93);
        java.lang.Object obj95 = null;
        boolean boolean96 = generatorStrategy8.equals(obj95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        generator38.setDelegates(objArray48);
        java.lang.ClassLoader classLoader52 = null;
        generator38.setClassLoader(classLoader52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        generator54.setAttemptLoad(false);
        boolean boolean59 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator54.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator63.setNamingPolicy(namingPolicy64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator63.setDelegates((java.lang.Object[]) classArray75);
        generator54.setClasses(classArray75);
        generator38.setClasses(classArray75);
        generator0.setClasses(classArray75);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        generator21.setClasses(classArray42);
        generator18.setDelegates((java.lang.Object[]) classArray42);
        boolean boolean46 = generatorStrategy16.equals((java.lang.Object) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        boolean boolean50 = generator47.getUseCache();
        java.lang.Class[] classArray51 = null;
        generator47.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        boolean boolean54 = generatorStrategy16.equals((java.lang.Object) generator47);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator47.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        boolean boolean93 = namingPolicy65.equals((java.lang.Object) classArray88);
        generator58.setDelegates((java.lang.Object[]) classArray88);
        boolean boolean95 = generator58.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin96 = generator58.create();
        org.mockito.cglib.core.Predicate predicate97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = namingPolicy55.getClassName("", "hi!", (java.lang.Object) generator58, predicate97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.ClassLoader classLoader28 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader29 = generator16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy30);
        java.lang.Object obj32 = null;
        boolean boolean33 = generatorStrategy30.equals(obj32);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        boolean boolean8 = namingPolicy6.equals((java.lang.Object) ' ');
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator34.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        generator34.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin33.newInstance((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin62.newInstance((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        boolean boolean81 = namingPolicy6.equals((java.lang.Object) classArray75);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        boolean boolean59 = generator0.getAttemptLoad();
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setDelegates(objArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator7.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        java.lang.ClassLoader classLoader38 = generator24.getClassLoader();
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray58);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin65.newInstance((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.core.Predicate predicate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = namingPolicy20.getClassName("", "hi!", (java.lang.Object) classArray82, predicate84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        generator55.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator84.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = null;
        generator84.setStrategy(generatorStrategy86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator84.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        java.lang.Object obj94 = null;
        boolean boolean95 = generatorStrategy93.equals(obj94);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        boolean boolean21 = generator0.getUseCache();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.Object[] objArray45 = null;
        generator7.setDelegates(objArray45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator7.getStrategy();
        generator7.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin50 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy47);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        generator9.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator9.getNamingPolicy();
        generator9.setAttemptLoad(false);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = mixin55.newInstance((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        generator9.setDelegates((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.core.Predicate predicate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = namingPolicy6.getClassName("", "hi!", (java.lang.Object) classArray87, predicate88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator28.getNamingPolicy();
        boolean boolean53 = generator28.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin54 = generator28.create();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator55.getStrategy();
        generator28.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator61.setClasses(classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray88);
        generator28.setClasses(classArray73);
        generator0.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator19.setNamingPolicy(namingPolicy20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator16.setClasses(classArray31);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray46);
        generator0.setClasses(classArray46);
        boolean boolean64 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Object[] objArray95 = null;
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray95);
        generator0.setClasses(classArray77);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        generator24.setClasses(classArray43);
        generator24.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator24.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setDelegates((java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin33.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        generator60.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        generator60.setClassLoader(classLoader74);
        java.lang.Object[] objArray76 = new java.lang.Object[] { objArray53, (byte) 100, generator60 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray53);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator79.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin78.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        generator0.setDelegates((java.lang.Object[]) classArray94);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator81.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        boolean boolean44 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin67 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        generator53.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        generator53.setClassLoader(classLoader67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { objArray46, (byte) 100, generator53 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray46);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator72.setClasses(classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin71.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader40 = null;
        generator39.setClassLoader(classLoader40);
        boolean boolean42 = namingPolicy37.equals((java.lang.Object) classLoader40);
        generator21.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator44.getStrategy();
        generator21.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator21.getStrategy();
        boolean boolean51 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator21.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator54.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = null;
        generator54.setClassLoader(classLoader58);
        boolean boolean60 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        generator54.setAttemptLoad(false);
        boolean boolean65 = generator54.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray66 = generatorStrategy52.generate((org.mockito.cglib.core.ClassGenerator) generator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator22.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classArray49);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        boolean boolean39 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass42 = generator41.getClass();
        boolean boolean43 = namingPolicy40.equals((java.lang.Object) generator41);
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin62.newInstance(objArray82);
        boolean boolean88 = namingPolicy49.equals((java.lang.Object) objArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator0.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray32);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator39.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator56.getStrategy();
        generator44.setStrategy(generatorStrategy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        generator44.setClasses(classArray71);
        generator39.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray71);
        boolean boolean77 = namingPolicy3.equals((java.lang.Object) classArray71);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator22.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classArray49);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator57.getNamingPolicy();
        java.lang.ClassLoader classLoader82 = generator57.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray84 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator83.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray98);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass7 = namingPolicy6.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator31.setDelegates(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator31.getStrategy();
        generator0.setStrategy(generatorStrategy61);
        boolean boolean63 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean66 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray30);
        boolean boolean35 = generatorStrategy10.equals((java.lang.Object) classArray21);
        boolean boolean37 = generatorStrategy10.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy10);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator8.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = null;
        generator8.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray34);
        boolean boolean39 = generatorStrategy14.equals((java.lang.Object) classArray25);
        boolean boolean41 = generatorStrategy14.equals((java.lang.Object) (short) 10);
        boolean boolean43 = generatorStrategy14.equals((java.lang.Object) 10);
        generator5.setStrategy(generatorStrategy14);
        generator0.setStrategy(generatorStrategy14);
        boolean boolean46 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin81 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(objArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        boolean boolean22 = namingPolicy7.equals((java.lang.Object) mixin21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setClasses(classArray35);
        java.lang.ClassLoader classLoader37 = generator23.getClassLoader();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin21.newInstance((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        boolean boolean12 = generator7.getAttemptLoad();
        boolean boolean13 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        generator14.setUseCache(false);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator14.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setClasses(classArray37);
        generator23.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setClasses(classArray55);
        generator41.setDelegates((java.lang.Object[]) classArray55);
        boolean boolean58 = generator41.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin59 = generator41.create();
        boolean boolean60 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator41.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin62 = generator41.create();
        boolean boolean63 = generatorStrategy40.equals((java.lang.Object) generator41);
        generator7.setStrategy(generatorStrategy40);
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        boolean boolean84 = generatorStrategy59.equals((java.lang.Object) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        generator35.setDelegates((java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader52 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray74);
        generator35.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator79.setAttemptLoad(true);
        boolean boolean82 = generator79.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator79.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy83);
        generator35.setUseCache(true);
        generator35.setUseCache(true);
        java.lang.ClassLoader classLoader89 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader89);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        java.lang.Class<?> wildcardClass14 = generatorStrategy13.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator14.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        boolean boolean49 = namingPolicy21.equals((java.lang.Object) classArray44);
        generator14.setDelegates((java.lang.Object[]) classArray44);
        generator14.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator53.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        generator53.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator53.getStrategy();
        generator14.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator61.getNamingPolicy();
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator76.setNamingPolicy(namingPolicy77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setDelegates((java.lang.Object[]) classArray88);
        generator67.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        boolean boolean93 = namingPolicy65.equals((java.lang.Object) classArray88);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        generator14.setClasses(classArray88);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        boolean boolean13 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator8.setStrategy(generatorStrategy14);
        generator8.setAttemptLoad(false);
        generator8.setStyle((int) (byte) 0);
        generator8.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator35.setClasses(classArray45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray54);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin34.newInstance(objArray54);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin59.newInstance(objArray67);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator8.setClasses(classArray72);
        generator8.setAttemptLoad(true);
        generator8.setAttemptLoad(false);
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classLoader80);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        boolean boolean18 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray32);
        boolean boolean37 = generatorStrategy12.equals((java.lang.Object) classArray23);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setDelegates((java.lang.Object[]) classArray23);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classArray38);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        java.lang.ClassLoader classLoader15 = generator1.getClassLoader();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin42.newInstance((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        generator0.setUseCache(false);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin63 = generator0.create();
        boolean boolean64 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        boolean boolean26 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator12.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        boolean boolean38 = namingPolicy27.equals((java.lang.Object) objArray35);
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setClasses(classArray56);
        generator42.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator42.getNamingPolicy();
        boolean boolean60 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator42.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator0.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin38.newInstance(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        generator65.setUseCache(false);
        java.lang.ClassLoader classLoader79 = null;
        generator65.setClassLoader(classLoader79);
        java.lang.Object[] objArray81 = new java.lang.Object[] { objArray58, (byte) 100, generator65 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray58);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator84.setClasses(classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin83.newInstance((java.lang.Object[]) classArray94);
        generator0.setClasses(classArray94);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator4.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator4.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        generator41.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator41.getStrategy();
        boolean boolean63 = generator41.getUseCache();
        boolean boolean64 = generator41.getAttemptLoad();
        boolean boolean65 = generator41.getUseCache();
        boolean boolean66 = generatorStrategy40.equals((java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        java.lang.Class<?> wildcardClass69 = generator41.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator31.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray53);
        generator31.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin30.newInstance((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin30.newInstance(objArray67);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        generator0.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator75.setAttemptLoad(true);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator75.setClasses(classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        java.lang.Object obj52 = null;
        boolean boolean53 = namingPolicy47.equals(obj52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        generator54.setUseCache(false);
        java.lang.ClassLoader classLoader68 = generator54.getClassLoader();
        generator54.setAttemptLoad(true);
        boolean boolean71 = namingPolicy47.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator24.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        generator24.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin23.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin23.newInstance(objArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.Class<?> wildcardClass66 = mixin65.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        generator4.setNamingPolicy(namingPolicy6);
        java.lang.ClassLoader classLoader8 = null;
        generator4.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray30);
        boolean boolean35 = generatorStrategy10.equals((java.lang.Object) classArray21);
        boolean boolean37 = generatorStrategy10.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator40.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        generator40.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator51.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator65.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader69 = null;
        generator68.setClassLoader(classLoader69);
        boolean boolean71 = namingPolicy66.equals((java.lang.Object) classLoader69);
        generator50.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator73.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator73.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator73.getStrategy();
        generator50.setStrategy(generatorStrategy77);
        generator40.setStrategy(generatorStrategy77);
        generator0.setStrategy(generatorStrategy77);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader23 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator26.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator26.setClassLoader(classLoader30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray52);
        boolean boolean57 = generatorStrategy32.equals((java.lang.Object) classArray43);
        generator24.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin61 = generator0.create();
        boolean boolean62 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        boolean boolean42 = generator0.getUseCache();
        java.lang.ClassLoader classLoader43 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator48.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator45.setClasses(classArray60);
        generator45.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin66 = generator45.create();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin66.newInstance((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray88);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean61 = generator0.getUseCache();
        boolean boolean62 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean50 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(objArray20);
        generator0.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray20);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin25.newInstance((java.lang.Object[]) classArray56);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        org.mockito.cglib.proxy.Mixin mixin56 = generator7.create();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator57.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator57.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator62.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator74.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator74.getStrategy();
        generator62.setStrategy(generatorStrategy78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        generator62.setClasses(classArray89);
        generator57.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        generator7.setDelegates((java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass96 = classArray89.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator16.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        boolean boolean29 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator24.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator33.setNamingPolicy(namingPolicy34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setDelegates((java.lang.Object[]) classArray45);
        generator24.setClasses(classArray45);
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator61.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        generator61.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray87);
        boolean boolean92 = generatorStrategy67.equals((java.lang.Object) classArray78);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        generator16.setClasses(classArray45);
        org.mockito.cglib.proxy.Mixin mixin96 = generator16.create();
        boolean boolean97 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = null;
        generator16.setNamingPolicy(namingPolicy98);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        boolean boolean36 = generatorStrategy11.equals((java.lang.Object) classArray22);
        boolean boolean38 = generatorStrategy11.equals((java.lang.Object) (short) 10);
        generator3.setStrategy(generatorStrategy11);
        generator0.setStrategy(generatorStrategy11);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        generator21.setClasses(classArray42);
        generator18.setDelegates((java.lang.Object[]) classArray42);
        boolean boolean46 = generatorStrategy16.equals((java.lang.Object) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        boolean boolean50 = generator47.getUseCache();
        java.lang.Class[] classArray51 = null;
        generator47.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        boolean boolean54 = generatorStrategy16.equals((java.lang.Object) generator47);
        // The following exception was thrown during execution in test generation
        try {
            generator47.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        java.lang.Object[] objArray96 = null;
        generator0.setDelegates(objArray96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        boolean boolean34 = namingPolicy32.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        boolean boolean10 = generator7.getUseCache();
        java.lang.Class[] classArray11 = null;
        generator7.setClasses(classArray11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        generator16.setUseCache(false);
        java.lang.ClassLoader classLoader30 = null;
        generator16.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        generator32.setUseCache(false);
        boolean boolean46 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator32.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator32.getStrategy();
        generator16.setStrategy(generatorStrategy49);
        boolean boolean51 = generator16.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray52 = generatorStrategy15.generate((org.mockito.cglib.core.ClassGenerator) generator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setClasses(classArray52);
        generator38.setDelegates((java.lang.Object[]) classArray52);
        boolean boolean55 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        generator38.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray64);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        java.lang.Object[] objArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator37.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator37.setAttemptLoad(true);
        generator37.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(false);
        boolean boolean56 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        generator46.setNamingPolicy(namingPolicy58);
        generator37.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator61.setClasses(classArray73);
        java.lang.ClassLoader classLoader75 = generator61.getClassLoader();
        boolean boolean76 = namingPolicy58.equals((java.lang.Object) classLoader75);
        generator0.setClassLoader(classLoader75);
        boolean boolean78 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass79 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator21.setNamingPolicy(namingPolicy22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator21.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        generator0.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy53);
        generator38.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator38.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator38.setClasses(classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator0.setClasses(classArray71);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        boolean boolean31 = namingPolicy27.equals((java.lang.Object) generator28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator28.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        boolean boolean55 = namingPolicy50.equals((java.lang.Object) classLoader53);
        generator34.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator57.getStrategy();
        generator34.setStrategy(generatorStrategy61);
        generator28.setStrategy(generatorStrategy61);
        generator9.setStrategy(generatorStrategy61);
        boolean boolean65 = generator9.getUseCache();
        java.lang.ClassLoader classLoader66 = generator9.getClassLoader();
        generator0.setClassLoader(classLoader66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin68 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        boolean boolean28 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        boolean boolean33 = namingPolicy29.equals((java.lang.Object) generator30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator30.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader55 = null;
        generator54.setClassLoader(classLoader55);
        boolean boolean57 = namingPolicy52.equals((java.lang.Object) classLoader55);
        generator36.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator59.getStrategy();
        generator36.setStrategy(generatorStrategy63);
        generator30.setStrategy(generatorStrategy63);
        generator30.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setAttemptLoad(true);
        generator68.setAttemptLoad(false);
        boolean boolean73 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator77.setNamingPolicy(namingPolicy78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator77.setDelegates((java.lang.Object[]) classArray89);
        generator68.setClasses(classArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator68.getNamingPolicy();
        java.lang.ClassLoader classLoader93 = generator68.getClassLoader();
        generator30.setClassLoader(classLoader93);
        generator0.setClassLoader(classLoader93);
        boolean boolean96 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setDelegates(objArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator44.getNamingPolicy();
        boolean boolean57 = generator44.getAttemptLoad();
        generator44.setUseCache(true);
        boolean boolean60 = generator44.getUseCache();
        boolean boolean61 = generatorStrategy43.equals((java.lang.Object) boolean60);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator10.getNamingPolicy();
        java.lang.ClassLoader classLoader15 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        generator16.setAttemptLoad(false);
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator16.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator25.setNamingPolicy(namingPolicy26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setDelegates((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        boolean boolean42 = namingPolicy14.equals((java.lang.Object) classArray37);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin9.newInstance((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator47.setClasses(classArray59);
        java.lang.ClassLoader classLoader61 = generator47.getClassLoader();
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray81);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin46.newInstance((java.lang.Object[]) classArray71);
        java.lang.Class<?> wildcardClass91 = classArray71.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setClasses(classArray53);
        generator39.setDelegates((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        generator39.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator83.setAttemptLoad(true);
        boolean boolean86 = generator83.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator83.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy87);
        generator39.setAttemptLoad(true);
        boolean boolean91 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator39.getStrategy();
        boolean boolean93 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.proxy.Mixin.Generator generator94 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator94.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = null;
        generator94.setStrategy(generatorStrategy96);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator94.getStrategy();
        boolean boolean99 = namingPolicy38.equals((java.lang.Object) generator94);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        generator20.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator48.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator48.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        boolean boolean79 = generatorStrategy54.equals((java.lang.Object) classArray65);
        boolean boolean81 = generatorStrategy54.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy54);
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setDelegates(objArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator19.getNamingPolicy();
        boolean boolean32 = generator19.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setClasses(classArray43);
        generator33.setUseCache(false);
        java.lang.ClassLoader classLoader47 = generator33.getClassLoader();
        generator19.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray73);
        generator0.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(objArray14);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        generator0.setDelegates(objArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator15.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = null;
        generator15.setClassLoader(classLoader19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray41);
        boolean boolean46 = generatorStrategy21.equals((java.lang.Object) classArray32);
        boolean boolean48 = generatorStrategy21.equals((java.lang.Object) (short) 10);
        generator13.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        boolean boolean83 = namingPolicy55.equals((java.lang.Object) classArray78);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        boolean boolean85 = generatorStrategy50.equals((java.lang.Object) classArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin12.newInstance((java.lang.Object[]) classArray86);
        java.lang.Class<?> wildcardClass92 = classArray86.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        generator24.setDelegates((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator24.setDelegates((java.lang.Object[]) classArray52);
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = generator57.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator57.getNamingPolicy();
        generator57.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator57.getStrategy();
        boolean boolean74 = generatorStrategy56.equals((java.lang.Object) generator57);
        boolean boolean75 = generator57.getUseCache();
        boolean boolean76 = generatorStrategy22.equals((java.lang.Object) generator57);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        generator77.setNamingPolicy(namingPolicy79);
        java.lang.ClassLoader classLoader81 = null;
        generator77.setClassLoader(classLoader81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator77.getStrategy();
        generator77.setUseCache(false);
        boolean boolean86 = generator77.getUseCache();
        java.lang.ClassLoader classLoader87 = null;
        generator77.setClassLoader(classLoader87);
        boolean boolean89 = generator77.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass31 = classArray12.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        generator19.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator44.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader48 = null;
        generator47.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) classLoader48);
        generator29.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator52.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator52.getStrategy();
        generator29.setStrategy(generatorStrategy56);
        generator19.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator59.setClasses(classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        boolean boolean85 = generatorStrategy56.equals((java.lang.Object) classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = null;
        generator0.setNamingPolicy(namingPolicy88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator12.setAttemptLoad(true);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setClasses(classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy27);
        generator12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator12.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray32 = generatorStrategy10.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin26.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin54.newInstance((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator71.setClasses(classArray81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray90);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray90);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin69.newInstance(objArray90);
        java.lang.Class<?> wildcardClass98 = objArray90.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        // The following exception was thrown during execution in test generation
        try {
            generator17.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = namingPolicy15.equals((java.lang.Object) generator16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator16.getStrategy();
        boolean boolean21 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator16.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass25 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (-1), 0.0f, generator31 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin36.newInstance((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator0.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator80.setAttemptLoad(true);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setClasses(classArray92);
        java.lang.ClassLoader classLoader94 = generator80.getClassLoader();
        generator0.setClassLoader(classLoader94);
        java.lang.Object[] objArray96 = null;
        generator0.setDelegates(objArray96);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin44.newInstance(objArray64);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin69.newInstance(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator18.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator0.setClasses(classArray82);
        boolean boolean86 = generator0.getUseCache();
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = null;
        generator0.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        java.lang.Object obj91 = null;
        boolean boolean92 = namingPolicy90.equals(obj91);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray87);
        boolean boolean91 = namingPolicy33.equals((java.lang.Object) classLoader78);
        generator0.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass26 = mixin25.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        generator5.setAttemptLoad(false);
        boolean boolean15 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator5.getAttemptLoad();
        boolean boolean20 = namingPolicy4.equals((java.lang.Object) generator5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin21 = generator5.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator31.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator31.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader70 = null;
        generator69.setClassLoader(classLoader70);
        generator69.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator74.setClasses(classArray84);
        java.lang.Class[] classArray86 = null;
        java.lang.Object[] objArray93 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray86, objArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(objArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(objArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray93);
        generator69.setClasses(classArray84);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin68.newInstance((java.lang.Object[]) classArray84);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        generator7.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator7.getStrategy();
        java.lang.Class<?> wildcardClass77 = generatorStrategy76.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass9 = namingPolicy8.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator1.setNamingPolicy(namingPolicy2);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setDelegates((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray19 = new java.lang.Object[] { true, (-1), 0.0f, generator18 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        generator1.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray41);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        generator1.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray41);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator14.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        boolean boolean45 = generatorStrategy20.equals((java.lang.Object) classArray31);
        generator12.setClasses(classArray31);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator60.setNamingPolicy(namingPolicy62);
        java.lang.ClassLoader classLoader64 = null;
        generator60.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator60.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray86);
        boolean boolean91 = generatorStrategy66.equals((java.lang.Object) classArray77);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray94);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray98);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy50);
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        generator37.setAttemptLoad(false);
        boolean boolean42 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator37.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator46.setNamingPolicy(namingPolicy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator46.setDelegates((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        boolean boolean63 = namingPolicy35.equals((java.lang.Object) classArray58);
        generator28.setDelegates((java.lang.Object[]) classArray58);
        generator28.setStyle((int) (byte) 0);
        java.lang.Class[] classArray67 = null;
        generator28.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator71.setAttemptLoad(true);
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator71.setClasses(classArray83);
        generator69.setDelegates((java.lang.Object[]) classArray83);
        generator28.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = generator28.create();
        boolean boolean88 = namingPolicy27.equals((java.lang.Object) mixin87);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator13.setClasses(classArray23);
        java.lang.ClassLoader classLoader25 = generator13.getClassLoader();
        java.lang.ClassLoader classLoader26 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray31 = new java.lang.Object[] { true, (-1), 0.0f, generator30 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin35.newInstance((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        java.lang.Object[] objArray79 = null;
        org.mockito.cglib.proxy.Mixin mixin80 = mixin78.newInstance(objArray79);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        boolean boolean70 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray10.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = namingPolicy19.equals((java.lang.Object) generator20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator20.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        boolean boolean47 = namingPolicy42.equals((java.lang.Object) classLoader45);
        generator26.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator49.getStrategy();
        generator26.setStrategy(generatorStrategy53);
        generator20.setStrategy(generatorStrategy53);
        generator20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        generator58.setAttemptLoad(false);
        boolean boolean63 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator58.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator58.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator67.setDelegates((java.lang.Object[]) classArray79);
        generator58.setClasses(classArray79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = generator58.getClassLoader();
        generator20.setClassLoader(classLoader83);
        generator6.setClassLoader(classLoader83);
        generator0.setClassLoader(classLoader83);
        boolean boolean87 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        generator20.setDelegates((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator20.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator59.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy83);
        generator20.setNamingPolicy(namingPolicy83);
        generator0.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        java.lang.Object obj91 = null;
        org.mockito.cglib.core.Predicate predicate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = namingPolicy88.getClassName("", "", obj91, predicate92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        generator51.setAttemptLoad(false);
        boolean boolean57 = generator51.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator72.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy73);
        generator51.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setAttemptLoad(true);
        generator77.setAttemptLoad(false);
        boolean boolean82 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator77.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader85 = null;
        generator77.setClassLoader(classLoader85);
        boolean boolean87 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator77.getStrategy();
        boolean boolean89 = namingPolicy76.equals((java.lang.Object) generator77);
        generator0.setNamingPolicy(namingPolicy76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        boolean boolean53 = namingPolicy49.equals((java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator50.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator71.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        boolean boolean77 = namingPolicy72.equals((java.lang.Object) classLoader75);
        generator56.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator79.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator79.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator79.getStrategy();
        generator56.setStrategy(generatorStrategy83);
        generator50.setStrategy(generatorStrategy83);
        generator31.setStrategy(generatorStrategy83);
        boolean boolean87 = generator31.getUseCache();
        java.lang.ClassLoader classLoader88 = generator31.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        generator1.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator1.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        generator1.setDelegates((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setClasses(classArray15);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator19.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator28.setNamingPolicy(namingPolicy29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setDelegates((java.lang.Object[]) classArray40);
        generator19.setClasses(classArray40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator19.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = generator19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator19.getStrategy();
        generator5.setStrategy(generatorStrategy45);
        boolean boolean47 = generator5.getUseCache();
        boolean boolean48 = generator5.getUseCache();
        generator5.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator51.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator54.getNamingPolicy();
        java.lang.ClassLoader classLoader59 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        generator60.setAttemptLoad(false);
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator60.setStrategy(generatorStrategy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator69.setNamingPolicy(namingPolicy70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator69.setDelegates((java.lang.Object[]) classArray81);
        generator60.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        boolean boolean86 = namingPolicy58.equals((java.lang.Object) classArray81);
        generator51.setDelegates((java.lang.Object[]) classArray81);
        generator5.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = null;
        generator5.setStrategy(generatorStrategy89);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy4.generate((org.mockito.cglib.core.ClassGenerator) generator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator7.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator7.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        boolean boolean49 = generatorStrategy37.equals((java.lang.Object) mixin48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setDelegates(objArray58);
        boolean boolean62 = generatorStrategy37.equals((java.lang.Object) objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class<?> wildcardClass64 = mixin63.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin1 = org.mockito.cglib.proxy.Mixin.createBean(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray19);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setDelegates(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator43.getStrategy();
        generator31.setStrategy(generatorStrategy47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator31.setClasses(classArray58);
        generator26.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator18.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator27.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setDelegates((java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray39);
        generator0.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator44.setAttemptLoad(true);
        boolean boolean47 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        boolean boolean55 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator4.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator4.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray41);
        boolean boolean44 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
        java.lang.Object[] objArray46 = null;
        org.mockito.cglib.proxy.Mixin mixin47 = mixin45.newInstance(objArray46);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray5 = new java.lang.Object[] { true, (-1), 0.0f, generator4 };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin9.newInstance((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setClasses(classArray33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray42);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator49.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setAttemptLoad(true);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator77.setClasses(classArray89);
        generator75.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator75.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy92);
        generator0.setNamingPolicy(namingPolicy92);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator12.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator12.setClasses(classArray42);
        generator6.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        boolean boolean57 = generator45.getAttemptLoad();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator45.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy62);
        boolean boolean64 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        java.lang.Object obj70 = null;
        org.mockito.cglib.core.Predicate predicate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = namingPolicy66.getClassName("", "", obj70, predicate71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, (-1), 0.0f, generator39 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        generator31.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(false);
        boolean boolean52 = generator47.getAttemptLoad();
        generator47.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        boolean boolean58 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator55.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray90);
        generator55.setClasses(classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        generator47.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin46.newInstance((java.lang.Object[]) classArray93);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        generator24.setAttemptLoad(false);
        boolean boolean29 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator24.setStrategy(generatorStrategy30);
        generator24.setAttemptLoad(false);
        generator24.setStyle((int) (byte) 0);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        generator24.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator0.setDelegates((java.lang.Object[]) classArray45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        generator5.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator24.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        boolean boolean30 = namingPolicy25.equals((java.lang.Object) classLoader28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        boolean boolean45 = namingPolicy25.equals((java.lang.Object) mixin44);
        generator5.setNamingPolicy(namingPolicy25);
        boolean boolean47 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator52.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = null;
        generator52.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator52.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator61.setAttemptLoad(true);
        generator61.setAttemptLoad(false);
        boolean boolean66 = namingPolicy59.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator67.getNamingPolicy();
        boolean boolean72 = namingPolicy59.equals((java.lang.Object) generator67);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator73.setAttemptLoad(true);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setClasses(classArray85);
        java.lang.ClassLoader classLoader87 = generator73.getClassLoader();
        generator73.setUseCache(true);
        boolean boolean90 = namingPolicy59.equals((java.lang.Object) generator73);
        java.lang.ClassLoader classLoader91 = generator73.getClassLoader();
        boolean boolean92 = generatorStrategy48.equals((java.lang.Object) generator73);
        org.mockito.cglib.proxy.Mixin mixin93 = generator73.create();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator1.setNamingPolicy(namingPolicy3);
        java.lang.ClassLoader classLoader5 = null;
        generator1.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray27);
        boolean boolean32 = generatorStrategy7.equals((java.lang.Object) classArray18);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator37.setAttemptLoad(true);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy52);
        generator37.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin56 = generator37.create();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin56.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        generator0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator8.setClasses(classArray20);
        generator6.setDelegates((java.lang.Object[]) classArray20);
        boolean boolean23 = generator6.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        generator24.setUseCache(false);
        java.lang.ClassLoader classLoader38 = null;
        generator24.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator43.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator52.setDelegates((java.lang.Object[]) classArray64);
        generator43.setClasses(classArray64);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator43.getNamingPolicy();
        java.lang.ClassLoader classLoader68 = generator43.getClassLoader();
        boolean boolean69 = namingPolicy41.equals((java.lang.Object) classLoader68);
        generator6.setClassLoader(classLoader68);
        generator0.setClassLoader(classLoader68);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator72.setAttemptLoad(true);
        generator72.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        generator72.setDelegates((java.lang.Object[]) classArray90);
        generator0.setClasses(classArray90);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        boolean boolean72 = generatorStrategy45.equals((java.lang.Object) (short) 10);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator73.setAttemptLoad(true);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator87.getNamingPolicy();
        generator73.setNamingPolicy(namingPolicy88);
        generator73.setUseCache(false);
        generator73.setUseCache(true);
        boolean boolean94 = generatorStrategy45.equals((java.lang.Object) true);
        generator0.setStrategy(generatorStrategy45);
        boolean boolean96 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray2 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(classArray2, objArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        generator1.setClasses(classArray11);
        java.lang.ClassLoader classLoader13 = generator1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = generator15.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator33.setAttemptLoad(true);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator33.setClasses(classArray45);
        generator31.setDelegates((java.lang.Object[]) classArray45);
        boolean boolean48 = generator31.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin49 = generator31.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator31.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator56.setClasses(classArray68);
        generator53.setDelegates((java.lang.Object[]) classArray68);
        boolean boolean71 = namingPolicy51.equals((java.lang.Object) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin41 = generator0.create();
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        boolean boolean30 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator25.setStrategy(generatorStrategy31);
        generator25.setAttemptLoad(false);
        generator25.setStyle((int) (byte) 0);
        generator25.setAttemptLoad(false);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin51.newInstance(objArray71);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin76.newInstance(objArray84);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator25.setClasses(classArray89);
        generator25.setAttemptLoad(true);
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader97 = generator25.getClassLoader();
        generator0.setClassLoader(classLoader97);
        boolean boolean99 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator23.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator35.getStrategy();
        generator23.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray46 = new java.lang.Object[] { true, (-1), 0.0f, generator45 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        generator23.setDelegates(objArray46);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator0.setDelegates(objArray46);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray52);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(objArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(objArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator25.setClasses(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader40 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(false);
        boolean boolean46 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator41.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setDelegates((java.lang.Object[]) classArray62);
        generator41.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin39.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray11);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator14.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader39 = generator14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator42.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator42.getNamingPolicy();
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator60.setClasses(classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin59.newInstance(objArray79);
        boolean boolean85 = namingPolicy46.equals((java.lang.Object) objArray79);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        boolean boolean88 = generatorStrategy40.equals((java.lang.Object) objArray79);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator24.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader28 = null;
        generator24.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray50);
        boolean boolean55 = generatorStrategy30.equals((java.lang.Object) classArray41);
        boolean boolean57 = generatorStrategy30.equals((java.lang.Object) (short) 10);
        generator22.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy63);
        boolean boolean65 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin17.newInstance(objArray37);
        boolean boolean43 = namingPolicy4.equals((java.lang.Object) objArray37);
        java.lang.Class<?> wildcardClass44 = namingPolicy4.getClass();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        generator0.setClasses(classArray30);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.core.Predicate predicate70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = namingPolicy47.getClassName("", "", (java.lang.Object) mixin69, predicate70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray4 = new java.lang.Object[] { true, (-1), 0.0f, generator3 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.create(objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        java.lang.Class<?> wildcardClass8 = objArray4.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = generator14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy27);
        boolean boolean29 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        boolean boolean31 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(false);
        boolean boolean22 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator17.setStrategy(generatorStrategy23);
        generator17.setAttemptLoad(false);
        generator17.setStyle((int) (byte) 0);
        generator17.setAttemptLoad(false);
        boolean boolean31 = generator17.getUseCache();
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator34.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader38 = null;
        generator34.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator34.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray60);
        boolean boolean65 = generatorStrategy40.equals((java.lang.Object) classArray51);
        boolean boolean67 = generatorStrategy40.equals((java.lang.Object) (short) 10);
        boolean boolean69 = generatorStrategy40.equals((java.lang.Object) 10);
        generator17.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader72 = null;
        generator71.setClassLoader(classLoader72);
        generator71.setUseCache(false);
        generator71.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator71.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator71.getNamingPolicy();
        boolean boolean80 = generatorStrategy40.equals((java.lang.Object) generator71);
        generator0.setStrategy(generatorStrategy40);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator10.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        generator19.setAttemptLoad(false);
        boolean boolean24 = namingPolicy17.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator25.getNamingPolicy();
        boolean boolean30 = namingPolicy17.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator25.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        generator32.setUseCache(false);
        java.lang.ClassLoader classLoader46 = null;
        generator32.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator48.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        boolean boolean77 = namingPolicy49.equals((java.lang.Object) classLoader76);
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray85);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator25.setDelegates((java.lang.Object[]) classArray90);
        generator0.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator9.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = null;
        generator9.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setUseCache(false);
        generator17.setUseCache(false);
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator26.setClasses(classArray38);
        java.lang.ClassLoader classLoader40 = generator26.getClassLoader();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray60);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = mixin67.newInstance((java.lang.Object[]) classArray78);
        generator17.setDelegates((java.lang.Object[]) classArray78);
        boolean boolean84 = generatorStrategy15.equals((java.lang.Object) generator17);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator38.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setClasses(classArray50);
        generator36.setDelegates((java.lang.Object[]) classArray50);
        java.lang.ClassLoader classLoader53 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator54.setAttemptLoad(true);
        generator54.setAttemptLoad(false);
        boolean boolean59 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator54.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator54.setStrategy(generatorStrategy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator63.setNamingPolicy(namingPolicy64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator63.setDelegates((java.lang.Object[]) classArray75);
        generator54.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray75);
        generator36.setClasses(classArray75);
        generator36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy82);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean88 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator23.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator14.getUseCache();
        boolean boolean50 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator51.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator51.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = null;
        generator75.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator75.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        boolean boolean12 = generator0.getAttemptLoad();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray34);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator45.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = null;
        generator45.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray71);
        boolean boolean76 = generatorStrategy51.equals((java.lang.Object) classArray62);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray62);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.ClassLoader classLoader21 = generator9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator30.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader34 = null;
        generator33.setClassLoader(classLoader34);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) classLoader34);
        generator15.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator40.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = null;
        generator40.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator40.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray66);
        boolean boolean71 = generatorStrategy46.equals((java.lang.Object) classArray57);
        boolean boolean73 = generatorStrategy46.equals((java.lang.Object) (short) 10);
        generator38.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator38.getStrategy();
        boolean boolean76 = namingPolicy31.equals((java.lang.Object) generatorStrategy75);
        generator0.setStrategy(generatorStrategy75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        java.lang.Class[] classArray39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance(objArray46);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin51.newInstance(objArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator0.setClasses(classArray64);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        boolean boolean12 = generatorStrategy5.equals((java.lang.Object) true);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator16.setClasses(classArray26);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray35);
        generator13.setClasses(classArray26);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        generator13.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator13.getStrategy();
        boolean boolean59 = generator13.getUseCache();
        java.lang.ClassLoader classLoader60 = generator13.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray61 = generatorStrategy5.generate((org.mockito.cglib.core.ClassGenerator) generator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        boolean boolean50 = generatorStrategy23.equals((java.lang.Object) (short) 10);
        generator15.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        boolean boolean85 = namingPolicy57.equals((java.lang.Object) classArray80);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        boolean boolean87 = generatorStrategy52.equals((java.lang.Object) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray86);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(false);
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator29.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator38.setNamingPolicy(namingPolicy39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setDelegates((java.lang.Object[]) classArray50);
        generator29.setClasses(classArray50);
        generator26.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        generator55.setDelegates((java.lang.Object[]) classArray69);
        boolean boolean72 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass75 = generator74.getClass();
        boolean boolean76 = namingPolicy73.equals((java.lang.Object) generator74);
        generator26.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator26.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy78);
        java.lang.Class<?> wildcardClass80 = generator17.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray88);
        boolean boolean90 = generator0.getUseCache();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(false);
        boolean boolean18 = generator13.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator13.setStrategy(generatorStrategy19);
        generator13.setAttemptLoad(false);
        generator13.setStyle((int) (byte) 0);
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray59);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin39.newInstance(objArray59);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin64.newInstance(objArray72);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator13.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray88);
        java.lang.Class<?> wildcardClass92 = objArray88.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin26.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        boolean boolean19 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray25 = new java.lang.Object[] { true, (-1), 0.0f, generator24 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator29.getClassLoader();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray63);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin28.newInstance((java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setClasses(classArray18);
        java.lang.ClassLoader classLoader20 = generator6.getClassLoader();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray40);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray30);
        generator0.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator49.setClasses(classArray59);
        generator49.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator63.setAttemptLoad(true);
        generator63.setAttemptLoad(false);
        boolean boolean68 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator63.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator63.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator72.setNamingPolicy(namingPolicy73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator72.setDelegates((java.lang.Object[]) classArray84);
        generator63.setClasses(classArray84);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator63.getNamingPolicy();
        java.lang.ClassLoader classLoader88 = generator63.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator63.getStrategy();
        generator49.setStrategy(generatorStrategy89);
        generator0.setStrategy(generatorStrategy89);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader47 = null;
        generator46.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy44.equals((java.lang.Object) classLoader47);
        generator28.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator51.getStrategy();
        generator28.setStrategy(generatorStrategy55);
        generator0.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        generator3.setStrategy(generatorStrategy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator3.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        boolean boolean35 = namingPolicy7.equals((java.lang.Object) classArray30);
        generator0.setDelegates((java.lang.Object[]) classArray30);
        generator0.setAttemptLoad(true);
        boolean boolean39 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator52.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray74);
        generator52.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin51.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        generator0.setUseCache(true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        java.lang.Class[] classArray4 = null;
        generator0.setClasses(classArray4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator6.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator26.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator32.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator41.setNamingPolicy(namingPolicy42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setDelegates((java.lang.Object[]) classArray53);
        generator32.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) classArray53);
        generator23.setDelegates((java.lang.Object[]) classArray53);
        generator23.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator62.setNamingPolicy(namingPolicy64);
        java.lang.ClassLoader classLoader66 = null;
        generator62.setClassLoader(classLoader66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator62.getStrategy();
        generator23.setStrategy(generatorStrategy68);
        generator6.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator71.setAttemptLoad(true);
        generator71.setAttemptLoad(false);
        boolean boolean76 = generator71.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator71.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        generator71.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator80.setNamingPolicy(namingPolicy81);
        java.lang.Class[] classArray83 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator80.setDelegates((java.lang.Object[]) classArray92);
        generator71.setClasses(classArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator71.getNamingPolicy();
        generator71.setAttemptLoad(true);
        boolean boolean98 = generatorStrategy68.equals((java.lang.Object) generator71);
        generator0.setStrategy(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setClasses(classArray72);
        generator58.setDelegates((java.lang.Object[]) classArray72);
        boolean boolean75 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator58.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator58.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray83 = new java.lang.Object[] { true, (-1), 0.0f, generator82 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        boolean boolean87 = namingPolicy77.equals((java.lang.Object) mixin86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setDelegates(objArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator77.getNamingPolicy();
        boolean boolean90 = generator77.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin91 = generator77.create();
        org.mockito.cglib.core.Predicate predicate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = namingPolicy74.getClassName("hi!", "hi!", (java.lang.Object) generator77, predicate92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy28);
        generator13.setAttemptLoad(true);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator13.setDelegates(objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        boolean boolean15 = generator10.getAttemptLoad();
        generator10.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        boolean boolean21 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray53);
        generator18.setClasses(classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        generator10.setClasses(classArray56);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator56.setClasses(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator19.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy73);
        boolean boolean75 = generator0.getAttemptLoad();
        boolean boolean76 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        boolean boolean78 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        generator21.setClasses(classArray42);
        generator18.setDelegates((java.lang.Object[]) classArray42);
        boolean boolean46 = generatorStrategy16.equals((java.lang.Object) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator47.setAttemptLoad(true);
        boolean boolean50 = generator47.getUseCache();
        java.lang.Class[] classArray51 = null;
        generator47.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator47.getNamingPolicy();
        boolean boolean54 = generatorStrategy16.equals((java.lang.Object) generator47);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin55 = generator47.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        generator0.setStyle((int) (byte) 0);
        boolean boolean58 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator15.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin14.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader35 = null;
        generator34.setClassLoader(classLoader35);
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        generator34.setDelegates(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator24.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator24.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator41.getStrategy();
        generator29.setStrategy(generatorStrategy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator29.setClasses(classArray56);
        generator24.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setClasses(classArray76);
        generator62.setDelegates((java.lang.Object[]) classArray76);
        boolean boolean79 = generator62.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator80.setDelegates(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        generator62.setDelegates(objArray88);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray88);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray88);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        boolean boolean15 = generator0.getUseCache();
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.Class<?> wildcardClass19 = mixin18.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        generator0.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        generator43.setAttemptLoad(false);
        boolean boolean48 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator50.setNamingPolicy(namingPolicy51);
        boolean boolean53 = namingPolicy49.equals((java.lang.Object) generator50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator50.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator71.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader75 = null;
        generator74.setClassLoader(classLoader75);
        boolean boolean77 = namingPolicy72.equals((java.lang.Object) classLoader75);
        generator56.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator79.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator79.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator79.getStrategy();
        generator56.setStrategy(generatorStrategy83);
        generator50.setStrategy(generatorStrategy83);
        generator31.setStrategy(generatorStrategy83);
        boolean boolean87 = generator31.getUseCache();
        java.lang.ClassLoader classLoader88 = generator31.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator31.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        java.lang.Object obj93 = null;
        org.mockito.cglib.core.Predicate predicate94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = namingPolicy89.getClassName("", "hi!", obj93, predicate94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator35.getNamingPolicy();
        generator35.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator41.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator41.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray66);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator41.setClasses(classArray71);
        generator35.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator74.setClasses(classArray84);
        boolean boolean86 = generator74.getAttemptLoad();
        generator74.setAttemptLoad(true);
        generator74.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator74.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator35.getStrategy();
        generator35.setUseCache(true);
        org.mockito.cglib.core.Predicate predicate96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = namingPolicy32.getClassName("hi!", "hi!", (java.lang.Object) generator35, predicate96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.Object obj18 = null;
        org.mockito.cglib.core.Predicate predicate19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = namingPolicy15.getClassName("hi!", "", obj18, predicate19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader6 = null;
        generator5.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator10.setAttemptLoad(true);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setClasses(classArray22);
        generator8.setDelegates((java.lang.Object[]) classArray22);
        boolean boolean25 = generator8.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        generator26.setUseCache(false);
        java.lang.ClassLoader classLoader40 = null;
        generator26.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        generator26.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) classLoader70);
        generator8.setClassLoader(classLoader70);
        generator5.setClassLoader(classLoader70);
        generator0.setClassLoader(classLoader70);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        generator0.setClasses(classArray88);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        boolean boolean7 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator4.getStrategy();
        boolean boolean12 = namingPolicy3.equals((java.lang.Object) generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        generator13.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin34 = generator13.create();
        boolean boolean35 = generator13.getUseCache();
        boolean boolean36 = namingPolicy3.equals((java.lang.Object) generator13);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator37.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setClasses(classArray61);
        generator47.setDelegates((java.lang.Object[]) classArray61);
        boolean boolean64 = generator47.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator65.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setAttemptLoad(true);
        generator68.setAttemptLoad(false);
        boolean boolean73 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator68.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator77.setNamingPolicy(namingPolicy78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator77.setDelegates((java.lang.Object[]) classArray89);
        generator68.setClasses(classArray89);
        generator65.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator65.getStrategy();
        generator47.setStrategy(generatorStrategy93);
        org.mockito.cglib.proxy.Mixin mixin95 = generator47.create();
        org.mockito.cglib.core.Predicate predicate96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = namingPolicy43.getClassName("", "hi!", (java.lang.Object) mixin95, predicate96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator3.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator3.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator3.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator10.setClasses(classArray20);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray29);
        boolean boolean34 = generatorStrategy9.equals((java.lang.Object) classArray20);
        boolean boolean36 = generatorStrategy9.equals((java.lang.Object) (short) 10);
        boolean boolean38 = generatorStrategy9.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator52.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator29.setAttemptLoad(true);
        generator29.setAttemptLoad(false);
        boolean boolean34 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator29.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator38.setNamingPolicy(namingPolicy39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator38.setDelegates((java.lang.Object[]) classArray50);
        generator29.setClasses(classArray50);
        generator26.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator57.setClasses(classArray69);
        generator55.setDelegates((java.lang.Object[]) classArray69);
        boolean boolean72 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass75 = generator74.getClass();
        boolean boolean76 = namingPolicy73.equals((java.lang.Object) generator74);
        generator26.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator26.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader80 = generator17.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setClasses(classArray60);
        generator46.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean63 = generator46.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin64 = generator46.create();
        boolean boolean65 = generator46.getAttemptLoad();
        boolean boolean66 = generator46.getAttemptLoad();
        generator46.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray69 = generatorStrategy16.generate((org.mockito.cglib.core.ClassGenerator) generator46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        boolean boolean18 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy37);
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator22.setDelegates(objArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        java.lang.Class[] classArray14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator11.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator25.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader29 = null;
        generator28.setClassLoader(classLoader29);
        boolean boolean31 = namingPolicy26.equals((java.lang.Object) classLoader29);
        generator10.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator33.getStrategy();
        generator10.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator41.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator44.setNamingPolicy(namingPolicy45);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator44.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        generator41.setClasses(classArray56);
        generator41.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator41.getStrategy();
        boolean boolean63 = generator41.getUseCache();
        boolean boolean64 = generator41.getAttemptLoad();
        boolean boolean65 = generator41.getUseCache();
        boolean boolean66 = generatorStrategy40.equals((java.lang.Object) generator41);
        generator41.setStyle((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            generator41.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator51.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator51.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray77);
        boolean boolean82 = generatorStrategy57.equals((java.lang.Object) classArray68);
        boolean boolean84 = generatorStrategy57.equals((java.lang.Object) (short) 10);
        generator47.setStrategy(generatorStrategy57);
        boolean boolean86 = generator47.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray87 = generatorStrategy46.generate((org.mockito.cglib.core.ClassGenerator) generator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = generator18.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = generator32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generator18.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = generator18.getClassLoader();
        boolean boolean49 = generator18.getUseCache();
        org.mockito.cglib.core.Predicate predicate50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = namingPolicy15.getClassName("hi!", "", (java.lang.Object) generator18, predicate50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator0.getUseCache();
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator39.setAttemptLoad(true);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setClasses(classArray51);
        generator37.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator37.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator57.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator57.getNamingPolicy();
        boolean boolean84 = namingPolicy82.equals((java.lang.Object) (byte) 10);
        generator0.setNamingPolicy(namingPolicy82);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass95 = generatorStrategy94.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        generator0.setUseCache(true);
        boolean boolean17 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        boolean boolean10 = generator7.getUseCache();
        java.lang.Class[] classArray11 = null;
        generator7.setClasses(classArray11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator17.setAttemptLoad(true);
        generator17.setAttemptLoad(false);
        boolean boolean22 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator17.setStrategy(generatorStrategy23);
        generator17.setAttemptLoad(false);
        generator17.setStyle((int) (byte) 0);
        generator17.setAttemptLoad(false);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin43.newInstance(objArray63);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin68.newInstance(objArray76);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator17.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.core.Predicate predicate86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = namingPolicy13.getClassName("", "", (java.lang.Object) mixin85, predicate86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator11.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = null;
        generator11.setClassLoader(classLoader15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        boolean boolean42 = generatorStrategy17.equals((java.lang.Object) classArray28);
        boolean boolean44 = generatorStrategy17.equals((java.lang.Object) (short) 10);
        generator9.setStrategy(generatorStrategy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator47.getNamingPolicy();
        java.lang.ClassLoader classLoader52 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classArray74);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        boolean boolean81 = generatorStrategy46.equals((java.lang.Object) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        boolean boolean87 = namingPolicy8.equals((java.lang.Object) mixin86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = generator6.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Object[] objArray46 = null;
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator48.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator62.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy63);
        generator48.setAttemptLoad(true);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator48.setDelegates(objArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray79);
        org.mockito.cglib.core.Predicate predicate81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = namingPolicy3.getClassName("hi!", "", (java.lang.Object) classArray79, predicate81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator4.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator13.setDelegates((java.lang.Object[]) classArray25);
        generator4.setClasses(classArray25);
        generator1.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator1.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray52);
        generator1.setDelegates((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        generator1.setAttemptLoad(false);
        boolean boolean6 = generator1.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator1.setStrategy(generatorStrategy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator10.setNamingPolicy(namingPolicy11);
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator10.setDelegates((java.lang.Object[]) classArray22);
        generator1.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        generator27.setAttemptLoad(false);
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator27.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator62.setNamingPolicy(namingPolicy64);
        java.lang.ClassLoader classLoader66 = null;
        generator62.setClassLoader(classLoader66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator62.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator69.setClasses(classArray79);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray88);
        boolean boolean93 = generatorStrategy68.equals((java.lang.Object) classArray79);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin48.newInstance((java.lang.Object[]) classArray79);
        generator27.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin26.newInstance((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator11.setNamingPolicy(namingPolicy12);
        boolean boolean14 = namingPolicy10.equals((java.lang.Object) generator11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator11.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator32.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader36 = null;
        generator35.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy33.equals((java.lang.Object) classLoader36);
        generator17.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator40.getStrategy();
        generator17.setStrategy(generatorStrategy44);
        generator11.setStrategy(generatorStrategy44);
        generator11.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator49.setAttemptLoad(true);
        generator49.setAttemptLoad(false);
        boolean boolean54 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator49.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator58.setNamingPolicy(namingPolicy59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setDelegates((java.lang.Object[]) classArray70);
        generator49.setClasses(classArray70);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator49.getClassLoader();
        generator11.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator11.getNamingPolicy();
        boolean boolean77 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator78.getStrategy();
        generator11.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        java.lang.ClassLoader classLoader33 = generator19.getClassLoader();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator47.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = null;
        generator47.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator47.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray73);
        boolean boolean78 = generatorStrategy53.equals((java.lang.Object) classArray64);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        boolean boolean47 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator39.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator39.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator25.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator64.setAttemptLoad(true);
        generator64.setAttemptLoad(false);
        boolean boolean69 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator64.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator64.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator73.setNamingPolicy(namingPolicy74);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setDelegates((java.lang.Object[]) classArray85);
        generator64.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator64.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy88);
        generator25.setNamingPolicy(namingPolicy88);
        generator5.setNamingPolicy(namingPolicy88);
        generator0.setNamingPolicy(namingPolicy88);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator17.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator24.setClasses(classArray34);
        java.lang.Class[] classArray36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray43);
        boolean boolean48 = generatorStrategy23.equals((java.lang.Object) classArray34);
        boolean boolean50 = generatorStrategy23.equals((java.lang.Object) (short) 10);
        generator15.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator15.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        boolean boolean85 = namingPolicy57.equals((java.lang.Object) classArray80);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        boolean boolean87 = generatorStrategy52.equals((java.lang.Object) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator63.setClasses(classArray73);
        java.lang.Class[] classArray75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray82);
        boolean boolean87 = generatorStrategy62.equals((java.lang.Object) classArray73);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin42.newInstance((java.lang.Object[]) classArray73);
        generator21.setClasses(classArray73);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        boolean boolean28 = namingPolicy25.equals((java.lang.Object) namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray47 = new java.lang.Object[] { true, (-1), 0.0f, generator46 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        generator29.setDelegates(objArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator29.getStrategy();
        boolean boolean51 = namingPolicy25.equals((java.lang.Object) generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader53 = null;
        generator52.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        generator52.setClassLoader(classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray61 = new java.lang.Object[] { true, (-1), 0.0f, generator60 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        generator52.setDelegates(objArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator52.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator68.setAttemptLoad(true);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setClasses(classArray80);
        generator66.setDelegates((java.lang.Object[]) classArray80);
        boolean boolean83 = generator66.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin84 = generator66.create();
        boolean boolean85 = generator66.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator66.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator66.getStrategy();
        java.lang.ClassLoader classLoader88 = generator66.getClassLoader();
        generator52.setClassLoader(classLoader88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator52.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy50.generate((org.mockito.cglib.core.ClassGenerator) generator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        boolean boolean22 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator19.setAttemptLoad(true);
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator19.setClasses(classArray31);
        generator0.setClasses(classArray31);
        java.lang.ClassLoader classLoader34 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass35 = classLoader34.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator22.setClasses(classArray32);
        generator22.setUseCache(false);
        java.lang.ClassLoader classLoader36 = null;
        generator22.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator22.getStrategy();
        java.lang.ClassLoader classLoader39 = generator22.getClassLoader();
        boolean boolean40 = generator22.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator42.setAttemptLoad(true);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator42.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator56.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader60 = null;
        generator59.setClassLoader(classLoader60);
        boolean boolean62 = namingPolicy57.equals((java.lang.Object) classLoader60);
        generator41.setNamingPolicy(namingPolicy57);
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator78.setClasses(classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        generator41.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator41.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator23.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator14.getUseCache();
        boolean boolean50 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator51.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator51.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin19);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setDelegates((java.lang.Object[]) classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin43.newInstance(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        generator70.setUseCache(false);
        java.lang.ClassLoader classLoader84 = null;
        generator70.setClassLoader(classLoader84);
        java.lang.Object[] objArray86 = new java.lang.Object[] { objArray63, (byte) 100, generator70 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray63);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        generator0.setDelegates(objArray63);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator15.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin14.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray36 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        boolean boolean72 = generatorStrategy45.equals((java.lang.Object) (short) 10);
        generator37.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator37.getStrategy();
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator37.setDelegates(objArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray36);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        boolean boolean10 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        generator13.setDelegates(objArray34);
        generator0.setDelegates(objArray34);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray9 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator8.setClasses(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        generator9.setAttemptLoad(false);
        boolean boolean14 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setDelegates((java.lang.Object[]) classArray30);
        generator9.setClasses(classArray30);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator46.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader50 = null;
        generator46.setClassLoader(classLoader50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator46.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator53.setClasses(classArray63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray72);
        boolean boolean77 = generatorStrategy52.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray45);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray2 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(classArray2, objArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        generator1.setClasses(classArray11);
        generator1.setUseCache(false);
        java.lang.ClassLoader classLoader15 = null;
        generator1.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        generator20.setAttemptLoad(false);
        boolean boolean25 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator20.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator29.setNamingPolicy(namingPolicy30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator29.setDelegates((java.lang.Object[]) classArray41);
        generator20.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = generator20.getClassLoader();
        boolean boolean46 = namingPolicy18.equals((java.lang.Object) classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray80);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        boolean boolean63 = generatorStrategy13.equals((java.lang.Object) objArray58);
        generator0.setDelegates(objArray58);
        boolean boolean65 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        generator7.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = null;
        generator7.setClassLoader(classLoader11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray33);
        boolean boolean38 = generatorStrategy13.equals((java.lang.Object) classArray24);
        boolean boolean40 = generatorStrategy13.equals((java.lang.Object) (short) 10);
        generator5.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        generator0.setDelegates(objArray64);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getUseCache();
        boolean boolean78 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator81.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator81.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        java.lang.Class<?> wildcardClass87 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator6.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = null;
        generator6.setClassLoader(classLoader10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator14.setClasses(classArray24);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader28 = null;
        generator14.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        boolean boolean45 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator31.getNamingPolicy();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        boolean boolean57 = namingPolicy46.equals((java.lang.Object) objArray54);
        generator14.setNamingPolicy(namingPolicy46);
        generator14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator14.getNamingPolicy();
        generator14.setAttemptLoad(false);
        boolean boolean64 = generator14.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = generatorStrategy12.generate((org.mockito.cglib.core.ClassGenerator) generator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin59 = generator0.create();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = generator0.getClassLoader();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        generator0.setClasses(classArray80);
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        boolean boolean9 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = null;
        generator13.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray37);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        generator13.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        boolean boolean47 = generatorStrategy12.equals((java.lang.Object) classArray28);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator33.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator45.getStrategy();
        generator33.setStrategy(generatorStrategy49);
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator53.setNamingPolicy(namingPolicy54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setDelegates((java.lang.Object[]) classArray65);
        boolean boolean67 = generator53.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator53.getStrategy();
        java.lang.Object obj69 = null;
        boolean boolean70 = generatorStrategy68.equals(obj69);
        boolean boolean71 = generatorStrategy52.equals(obj69);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setStyle(0);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator4.setAttemptLoad(true);
        generator4.setAttemptLoad(false);
        boolean boolean9 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator4.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator4.setClassLoader(classLoader12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        boolean boolean18 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader4 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        java.lang.ClassLoader classLoader19 = generator5.getClassLoader();
        boolean boolean20 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator21.setAttemptLoad(true);
        generator21.setAttemptLoad(false);
        boolean boolean26 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator21.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        generator21.setClasses(classArray42);
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator58.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = null;
        generator58.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator65.setClasses(classArray75);
        java.lang.Class[] classArray77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray84);
        boolean boolean89 = generatorStrategy64.equals((java.lang.Object) classArray75);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        generator5.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        generator0.setDelegates(objArray9);
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader21 = null;
        generator20.setClassLoader(classLoader21);
        generator20.setUseCache(false);
        generator20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator20.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator30.getNamingPolicy();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = generator30.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        boolean boolean61 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator58.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator58.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray93);
        generator58.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray93);
        generator0.setClassLoader(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator14.setNamingPolicy(namingPolicy16);
        java.lang.ClassLoader classLoader18 = null;
        generator14.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray40);
        boolean boolean45 = generatorStrategy20.equals((java.lang.Object) classArray31);
        generator12.setClasses(classArray31);
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator60.setNamingPolicy(namingPolicy62);
        java.lang.ClassLoader classLoader64 = null;
        generator60.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator60.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator67.setClasses(classArray77);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray86);
        boolean boolean91 = generatorStrategy66.equals((java.lang.Object) classArray77);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray10);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        generator0.setStyle(0);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        boolean boolean6 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator9.setAttemptLoad(true);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator23.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy24);
        generator9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator9.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator30.setNamingPolicy(namingPolicy31);
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator30.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator9.setClasses(classArray42);
        generator0.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        java.lang.Class[] classArray53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator50.setClasses(classArray62);
        generator48.setDelegates((java.lang.Object[]) classArray62);
        boolean boolean65 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setDelegates(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        generator48.setDelegates(objArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator81.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator81.setStrategy(generatorStrategy83);
        generator81.setAttemptLoad(false);
        boolean boolean87 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator81.getStrategy();
        generator48.setStrategy(generatorStrategy88);
        generator48.setUseCache(false);
        boolean boolean92 = generatorStrategy47.equals((java.lang.Object) generator48);
        // The following exception was thrown during execution in test generation
        try {
            generator48.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator0.setDelegates(objArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray7, objArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator6.setClasses(classArray16);
        java.lang.ClassLoader classLoader18 = generator6.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.ClassLoader classLoader32 = generator20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator20.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy33);
        boolean boolean35 = generator6.getAttemptLoad();
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator6.getNamingPolicy();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator43.setClasses(classArray55);
        generator41.setDelegates((java.lang.Object[]) classArray55);
        java.lang.ClassLoader classLoader58 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        generator59.setAttemptLoad(false);
        boolean boolean64 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator59.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator59.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator68.setNamingPolicy(namingPolicy69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator68.setDelegates((java.lang.Object[]) classArray80);
        generator59.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray80);
        generator41.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator85.setAttemptLoad(true);
        boolean boolean88 = generator85.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator85.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy89);
        generator41.setUseCache(true);
        generator41.setUseCache(true);
        java.lang.ClassLoader classLoader95 = generator41.getClassLoader();
        generator6.setClassLoader(classLoader95);
        generator0.setClassLoader(classLoader95);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        generator18.setAttemptLoad(false);
        boolean boolean23 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator18.setStrategy(generatorStrategy24);
        generator18.setAttemptLoad(false);
        generator18.setStyle((int) (byte) 0);
        generator18.setAttemptLoad(false);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin44.newInstance(objArray64);
        java.lang.Class[] classArray70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin69.newInstance(objArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator18.setClasses(classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        generator0.setClasses(classArray82);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator27.setAttemptLoad(true);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator27.setClasses(classArray39);
        generator25.setDelegates((java.lang.Object[]) classArray39);
        boolean boolean42 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        boolean boolean44 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator25.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray56);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        generator0.setDelegates(objArray56);
        boolean boolean63 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        boolean boolean78 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        java.lang.ClassLoader classLoader65 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader65);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator34.setClasses(classArray44);
        generator34.setUseCache(false);
        java.lang.ClassLoader classLoader48 = null;
        generator34.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator50.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator53.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator53.getClassLoader();
        boolean boolean79 = namingPolicy51.equals((java.lang.Object) classLoader78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray87);
        boolean boolean91 = namingPolicy33.equals((java.lang.Object) classLoader78);
        generator0.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass95 = generatorStrategy94.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setStyle(1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator0.setStrategy(generatorStrategy17);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator9.setClasses(classArray19);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray28);
        boolean boolean33 = generatorStrategy8.equals((java.lang.Object) classArray19);
        boolean boolean35 = generatorStrategy8.equals((java.lang.Object) (short) 10);
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator39.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = null;
        generator39.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator39.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator46.setClasses(classArray56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray65);
        boolean boolean70 = generatorStrategy45.equals((java.lang.Object) classArray56);
        boolean boolean72 = generatorStrategy45.equals((java.lang.Object) (short) 10);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator73.setAttemptLoad(true);
        java.lang.Class[] classArray76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator73.setClasses(classArray85);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator87.getNamingPolicy();
        generator73.setNamingPolicy(namingPolicy88);
        generator73.setUseCache(false);
        generator73.setUseCache(true);
        boolean boolean94 = generatorStrategy45.equals((java.lang.Object) true);
        generator0.setStrategy(generatorStrategy45);
        boolean boolean96 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader14 = null;
        generator13.setClassLoader(classLoader14);
        generator13.setUseCache(false);
        generator13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator22.setAttemptLoad(true);
        java.lang.Class[] classArray25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator22.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator22.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader39 = null;
        generator38.setClassLoader(classLoader39);
        java.lang.ClassLoader classLoader41 = null;
        generator38.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        generator38.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator22.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin72 = generator22.create();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        boolean boolean74 = namingPolicy20.equals((java.lang.Object) classLoader73);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        generator3.setDelegates((java.lang.Object[]) classArray17);
        boolean boolean20 = generator3.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator21.setClasses(classArray31);
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator40.setAttemptLoad(true);
        generator40.setAttemptLoad(false);
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator40.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator49.setNamingPolicy(namingPolicy50);
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator49.setDelegates((java.lang.Object[]) classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator40.getNamingPolicy();
        java.lang.ClassLoader classLoader65 = generator40.getClassLoader();
        boolean boolean66 = namingPolicy38.equals((java.lang.Object) classLoader65);
        generator3.setClassLoader(classLoader65);
        generator0.setClassLoader(classLoader65);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass73 = generatorStrategy72.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator40.setClasses(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator55.setClasses(classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin54.newInstance((java.lang.Object[]) classArray67);
        boolean boolean71 = namingPolicy27.equals((java.lang.Object) mixin70);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator38.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader42 = null;
        generator38.setClassLoader(classLoader42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator38.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray64);
        boolean boolean69 = generatorStrategy44.equals((java.lang.Object) classArray55);
        boolean boolean71 = generatorStrategy44.equals((java.lang.Object) (short) 10);
        generator36.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator36.getStrategy();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        boolean boolean86 = generatorStrategy73.equals((java.lang.Object) classArray83);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin35.newInstance((java.lang.Object[]) classArray83);
        java.lang.Class<?> wildcardClass89 = classArray83.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        generator29.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass49 = generator48.getClass();
        boolean boolean50 = namingPolicy47.equals((java.lang.Object) generator48);
        generator0.setNamingPolicy(namingPolicy47);
        boolean boolean52 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator36.setDelegates(objArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator36.getNamingPolicy();
        boolean boolean51 = namingPolicy34.equals((java.lang.Object) namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator54.setClasses(classArray64);
        java.lang.ClassLoader classLoader66 = generator54.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator54.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = generator68.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator68.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy81);
        boolean boolean83 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader84 = generator54.getClassLoader();
        org.mockito.cglib.core.Predicate predicate85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = namingPolicy50.getClassName("hi!", "hi!", (java.lang.Object) classLoader84, predicate85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classLoader84);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.ClassLoader classLoader8 = null;
        generator0.setClassLoader(classLoader8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator11.setClasses(classArray21);
        generator11.setUseCache(false);
        java.lang.ClassLoader classLoader25 = null;
        generator11.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator30.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator39.setDelegates((java.lang.Object[]) classArray51);
        generator30.setClasses(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader55 = generator30.getClassLoader();
        boolean boolean56 = namingPolicy28.equals((java.lang.Object) classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator57.setClasses(classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray81);
        generator0.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = namingPolicy9.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator17.getNamingPolicy();
        boolean boolean22 = namingPolicy9.equals((java.lang.Object) generator17);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        generator17.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray9 = new java.lang.Object[] { true, (-1), 0.0f, generator8 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator16.setAttemptLoad(true);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator16.setClasses(classArray28);
        generator14.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean31 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin32 = generator14.create();
        boolean boolean33 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator14.getStrategy();
        java.lang.ClassLoader classLoader36 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        boolean boolean3 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        generator5.setAttemptLoad(false);
        boolean boolean10 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        generator5.setAttemptLoad(false);
        boolean boolean15 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator16.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator5.getAttemptLoad();
        boolean boolean20 = namingPolicy4.equals((java.lang.Object) generator5);
        java.lang.Class<?> wildcardClass21 = generator5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        boolean boolean19 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator21.setNamingPolicy(namingPolicy23);
        java.lang.ClassLoader classLoader25 = null;
        generator21.setClassLoader(classLoader25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator21.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator28.setClasses(classArray38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray47);
        boolean boolean52 = generatorStrategy27.equals((java.lang.Object) classArray38);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        generator0.setClasses(classArray55);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator2.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = null;
        generator2.setClassLoader(classLoader6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator2.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator11.setAttemptLoad(true);
        generator11.setAttemptLoad(false);
        boolean boolean16 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator11.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator20.setNamingPolicy(namingPolicy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setDelegates((java.lang.Object[]) classArray32);
        generator11.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator11.getNamingPolicy();
        java.lang.ClassLoader classLoader36 = generator11.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray47);
        generator0.setClassLoader(classLoader36);
        generator0.setUseCache(true);
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator56.setAttemptLoad(true);
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator56.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator70.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader74 = null;
        generator73.setClassLoader(classLoader74);
        boolean boolean76 = namingPolicy71.equals((java.lang.Object) classLoader74);
        java.lang.Object obj77 = null;
        boolean boolean78 = namingPolicy71.equals(obj77);
        generator0.setNamingPolicy(namingPolicy71);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader97 = null;
        generator0.setClassLoader(classLoader97);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        java.lang.ClassLoader classLoader3 = null;
        generator0.setClassLoader(classLoader3);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator5.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = null;
        generator5.setClassLoader(classLoader9);
        boolean boolean11 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator14.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator14.setClasses(classArray47);
        generator5.setClasses(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator5.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass55 = generatorStrategy54.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader73 = generator7.getClassLoader();
        java.lang.Class[] classArray74 = null;
        generator7.setClasses(classArray74);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator7.getStrategy();
        boolean boolean80 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator7.getNamingPolicy();
        java.lang.Class<?> wildcardClass82 = namingPolicy81.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator23.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator14.getUseCache();
        boolean boolean50 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator51.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator51.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy72);
        boolean boolean75 = namingPolicy72.equals((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator18.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator8.getNamingPolicy();
        generator8.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator14.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator20.setClasses(classArray30);
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray39);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator14.setClasses(classArray44);
        generator8.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator47.setClasses(classArray57);
        boolean boolean59 = generator47.getAttemptLoad();
        generator47.setAttemptLoad(true);
        generator47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator47.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy64);
        boolean boolean66 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean69 = namingPolicy7.equals((java.lang.Object) generator8);
        org.mockito.cglib.proxy.Mixin mixin70 = generator8.create();
        // The following exception was thrown during execution in test generation
        try {
            generator8.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Object[] objArray40 = null;
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        boolean boolean40 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator43.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setDelegates(objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator60.getStrategy();
        generator48.setStrategy(generatorStrategy64);
        java.lang.Class[] classArray66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        generator48.setClasses(classArray75);
        generator43.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator5.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        generator5.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator5.setClasses(classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        java.lang.Object[] objArray37 = null;
        generator0.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        generator39.setUseCache(false);
        boolean boolean53 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator55.setAttemptLoad(true);
        generator55.setAttemptLoad(false);
        boolean boolean60 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator64.setNamingPolicy(namingPolicy65);
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator64.setDelegates((java.lang.Object[]) classArray76);
        generator55.setClasses(classArray76);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator55.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator55.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator81.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray91);
        generator39.setClassLoader(classLoader80);
        generator0.setClassLoader(classLoader80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class<?> wildcardClass11 = mixin10.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        java.lang.Class[] classArray0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create(objArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin26.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator61.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        generator61.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator61.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator68.setClasses(classArray78);
        java.lang.Class[] classArray80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray87);
        boolean boolean92 = generatorStrategy67.equals((java.lang.Object) classArray78);
        generator59.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray96);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator59.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator59.getStrategy();
        boolean boolean63 = generatorStrategy58.equals((java.lang.Object) generator59);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin64 = generator59.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        generator18.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass27 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator2.setAttemptLoad(true);
        java.lang.Class[] classArray5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator2.setClasses(classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator0.setDelegates((java.lang.Object[]) classArray28);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator31.setClasses(classArray41);
        generator31.setUseCache(false);
        java.lang.ClassLoader classLoader45 = null;
        generator31.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator47.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        generator50.setAttemptLoad(false);
        boolean boolean55 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator50.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator59.setNamingPolicy(namingPolicy60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator59.setDelegates((java.lang.Object[]) classArray71);
        generator50.setClasses(classArray71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator50.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator50.getClassLoader();
        boolean boolean76 = namingPolicy48.equals((java.lang.Object) classLoader75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator77.setClasses(classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray89);
        generator0.setClassLoader(classLoader75);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        generator0.setStyle(2);
        boolean boolean97 = generator0.getUseCache();
        boolean boolean98 = generator0.getUseCache();
        boolean boolean99 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader11 = null;
        generator10.setClassLoader(classLoader11);
        java.lang.ClassLoader classLoader13 = null;
        generator10.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator15.setClasses(classArray25);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        generator10.setClasses(classArray25);
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(false);
        boolean boolean50 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        generator54.setNamingPolicy(namingPolicy55);
        java.lang.Class[] classArray57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator54.setDelegates((java.lang.Object[]) classArray66);
        generator45.setClasses(classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator45.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator45.getClassLoader();
        generator7.setClassLoader(classLoader70);
        boolean boolean72 = generator7.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = generator7.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator22.getNamingPolicy();
        java.lang.ClassLoader classLoader27 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        generator28.setAttemptLoad(false);
        boolean boolean33 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator37.setNamingPolicy(namingPolicy38);
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator37.setDelegates((java.lang.Object[]) classArray49);
        generator28.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        boolean boolean54 = namingPolicy26.equals((java.lang.Object) classArray49);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator57.getNamingPolicy();
        java.lang.ClassLoader classLoader82 = generator57.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray84 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator83.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator6.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator15.setDelegates((java.lang.Object[]) classArray27);
        generator6.setClasses(classArray27);
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator43.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = null;
        generator43.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator50.setClasses(classArray60);
        java.lang.Class[] classArray62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray69);
        boolean boolean74 = generatorStrategy49.equals((java.lang.Object) classArray60);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray77);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        generator12.setUseCache(false);
        java.lang.ClassLoader classLoader26 = null;
        generator12.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        generator31.setAttemptLoad(false);
        boolean boolean36 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator40.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator40.setDelegates((java.lang.Object[]) classArray52);
        generator31.setClasses(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator31.getClassLoader();
        boolean boolean57 = namingPolicy29.equals((java.lang.Object) classLoader56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator58.setClasses(classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray82);
        generator0.setDelegates((java.lang.Object[]) classArray82);
        java.lang.Class<?> wildcardClass85 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator3.setAttemptLoad(true);
        generator3.setAttemptLoad(false);
        boolean boolean8 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator3.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator12.setNamingPolicy(namingPolicy13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator12.setDelegates((java.lang.Object[]) classArray24);
        generator3.setClasses(classArray24);
        generator0.setDelegates((java.lang.Object[]) classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator67.setStrategy(generatorStrategy73);
        java.lang.ClassLoader classLoader75 = null;
        generator67.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator67.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy77);
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator12.setClasses(classArray22);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator6.setClasses(classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        boolean boolean51 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        generator39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator39.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy56);
        boolean boolean58 = generator0.getAttemptLoad();
        boolean boolean59 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator60.getStrategy();
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator66.setClasses(classArray76);
        java.lang.ClassLoader classLoader78 = generator66.getClassLoader();
        generator60.setClassLoader(classLoader78);
        generator0.setClassLoader(classLoader78);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator15.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator18.setAttemptLoad(true);
        java.lang.Class[] classArray21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator18.setClasses(classArray30);
        generator15.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin14.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setDelegates(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = generator30.create();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator43.setClasses(classArray53);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator67.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        java.lang.Class[] classArray82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray89);
        generator67.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin66.newInstance((java.lang.Object[]) classArray80);
        generator30.setDelegates((java.lang.Object[]) classArray80);
        java.lang.Class<?> wildcardClass97 = classArray80.getClass();
        boolean boolean98 = namingPolicy29.equals((java.lang.Object) classArray80);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy23);
        generator17.setStyle((int) (short) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        boolean boolean34 = namingPolicy28.equals((java.lang.Object) generatorStrategy33);
        java.lang.Class<?> wildcardClass35 = namingPolicy28.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        java.lang.Class<?> wildcardClass26 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setAttemptLoad(false);
        boolean boolean14 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator18.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = generator18.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator31.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy46);
        generator31.setAttemptLoad(true);
        java.lang.Class[] classArray50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator31.setDelegates(objArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        generator18.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator18.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator18.setNamingPolicy(namingPolicy66);
        generator18.setStyle(1);
        boolean boolean70 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator18.getStrategy();
        boolean boolean74 = generatorStrategy17.equals((java.lang.Object) generator18);
        generator18.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator18.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        generator3.setNamingPolicy(namingPolicy4);
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator3.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        generator0.setUseCache(false);
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator24.setAttemptLoad(true);
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator24.setClasses(classArray36);
        generator22.setDelegates((java.lang.Object[]) classArray36);
        boolean boolean39 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class<?> wildcardClass42 = generator41.getClass();
        boolean boolean43 = namingPolicy40.equals((java.lang.Object) generator41);
        generator0.setNamingPolicy(namingPolicy40);
        boolean boolean45 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin47 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy2);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator76.setAttemptLoad(true);
        java.lang.Class[] classArray79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator76.setClasses(classArray88);
        java.lang.ClassLoader classLoader90 = generator76.getClassLoader();
        generator0.setClassLoader(classLoader90);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader23 = null;
        generator22.setClassLoader(classLoader23);
        boolean boolean25 = namingPolicy20.equals((java.lang.Object) classLoader23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        boolean boolean40 = namingPolicy20.equals((java.lang.Object) mixin39);
        generator0.setNamingPolicy(namingPolicy20);
        boolean boolean42 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator45.setClasses(classArray55);
        boolean boolean57 = generator45.getAttemptLoad();
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader64 = null;
        generator63.setClassLoader(classLoader64);
        generator63.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator63.getStrategy();
        generator45.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator45.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator26.setAttemptLoad(true);
        generator26.setAttemptLoad(false);
        boolean boolean31 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        generator35.setNamingPolicy(namingPolicy36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator35.setDelegates((java.lang.Object[]) classArray47);
        generator26.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean52 = namingPolicy24.equals((java.lang.Object) classArray47);
        generator17.setDelegates((java.lang.Object[]) classArray47);
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator56.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = null;
        generator56.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        generator17.setStrategy(generatorStrategy62);
        generator0.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator67.setAttemptLoad(true);
        generator67.setAttemptLoad(false);
        boolean boolean72 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator67.setStrategy(generatorStrategy73);
        generator67.setAttemptLoad(false);
        boolean boolean77 = generator67.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator78.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator82.setAttemptLoad(true);
        java.lang.Class[] classArray85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        generator82.setClasses(classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray94);
        generator0.setClasses(classArray94);
        java.lang.Class<?> wildcardClass98 = generator0.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader13 = null;
        generator12.setClassLoader(classLoader13);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator17.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator22.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator29.setClasses(classArray39);
        java.lang.Class[] classArray41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray48);
        boolean boolean53 = generatorStrategy28.equals((java.lang.Object) classArray39);
        boolean boolean55 = generatorStrategy28.equals((java.lang.Object) (short) 10);
        generator20.setStrategy(generatorStrategy28);
        generator12.setStrategy(generatorStrategy28);
        generator0.setStrategy(generatorStrategy28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader59 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Class[] classArray6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator19.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator26.setClasses(classArray36);
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray45);
        boolean boolean50 = generatorStrategy25.equals((java.lang.Object) classArray36);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray55);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator17.setNamingPolicy(namingPolicy18);
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator17.setDelegates((java.lang.Object[]) classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Class[] classArray32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator44.setClasses(classArray54);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin43.newInstance(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator70.setClasses(classArray80);
        generator70.setUseCache(false);
        java.lang.ClassLoader classLoader84 = null;
        generator70.setClassLoader(classLoader84);
        java.lang.Object[] objArray86 = new java.lang.Object[] { objArray63, (byte) 100, generator70 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray63);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        generator0.setDelegates(objArray63);
        java.lang.Class<?> wildcardClass90 = objArray63.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator3.setClasses(classArray13);
        java.lang.Class[] classArray15 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray13, objArray22);
        generator0.setClasses(classArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator30.setAttemptLoad(true);
        generator30.setAttemptLoad(false);
        boolean boolean35 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator30.setStrategy(generatorStrategy36);
        generator30.setAttemptLoad(false);
        generator30.setStyle((int) (byte) 0);
        generator30.setAttemptLoad(false);
        boolean boolean44 = generator30.getUseCache();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy47);
        boolean boolean49 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator50.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        generator53.setAttemptLoad(false);
        boolean boolean58 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator53.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator62.setNamingPolicy(namingPolicy63);
        java.lang.Class[] classArray65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator62.setDelegates((java.lang.Object[]) classArray74);
        generator53.setClasses(classArray74);
        generator50.setDelegates((java.lang.Object[]) classArray74);
        generator0.setDelegates((java.lang.Object[]) classArray74);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(namingPolicy79);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray23 = new java.lang.Object[] { true, (-1), 0.0f, generator22 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        java.lang.Object[] objArray30 = null;
        generator0.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator32.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        generator32.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator32.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator39.setClasses(classArray49);
        java.lang.Class[] classArray51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray58);
        boolean boolean63 = generatorStrategy38.equals((java.lang.Object) classArray49);
        boolean boolean65 = generatorStrategy38.equals((java.lang.Object) (short) 10);
        boolean boolean67 = generatorStrategy38.equals((java.lang.Object) 10);
        generator0.setStrategy(generatorStrategy38);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin69 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        generator16.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        boolean boolean77 = generatorStrategy50.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin81 = generator0.create();
        generator0.setUseCache(true);
        boolean boolean84 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.Object[] objArray15 = null;
        org.mockito.cglib.proxy.Mixin mixin16 = mixin14.newInstance(objArray15);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator30.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        generator30.setClassLoader(classLoader34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator30.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator37.setClasses(classArray47);
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray56);
        boolean boolean61 = generatorStrategy36.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin16.newInstance((java.lang.Object[]) classArray47);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator0.setStrategy(generatorStrategy27);
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setClasses(classArray44);
        generator30.setDelegates((java.lang.Object[]) classArray44);
        boolean boolean47 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator30.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        generator51.setAttemptLoad(false);
        boolean boolean57 = generator51.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator58.setAttemptLoad(true);
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator58.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator72.getNamingPolicy();
        generator58.setNamingPolicy(namingPolicy73);
        generator51.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator77.setAttemptLoad(true);
        generator77.setAttemptLoad(false);
        boolean boolean82 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator77.setStrategy(generatorStrategy83);
        java.lang.ClassLoader classLoader85 = null;
        generator77.setClassLoader(classLoader85);
        boolean boolean87 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator77.getStrategy();
        boolean boolean89 = namingPolicy76.equals((java.lang.Object) generator77);
        generator0.setNamingPolicy(namingPolicy76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        generator14.setAttemptLoad(false);
        boolean boolean19 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator14.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator23.setAttemptLoad(true);
        generator23.setAttemptLoad(false);
        boolean boolean28 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator32.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator32.setDelegates((java.lang.Object[]) classArray44);
        generator23.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator23.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator14.getUseCache();
        boolean boolean50 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator53.setAttemptLoad(true);
        java.lang.Class[] classArray56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator53.setClasses(classArray65);
        generator51.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator51.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy68);
        boolean boolean70 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        generator17.setUseCache(false);
        boolean boolean31 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator17.getNamingPolicy();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        boolean boolean43 = namingPolicy32.equals((java.lang.Object) objArray40);
        generator0.setNamingPolicy(namingPolicy32);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator48.setAttemptLoad(true);
        generator48.setAttemptLoad(false);
        boolean boolean53 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator48.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator48.setStrategy(generatorStrategy55);
        generator48.setStyle(0);
        boolean boolean59 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator48.getNamingPolicy();
        boolean boolean61 = generatorStrategy47.equals((java.lang.Object) namingPolicy60);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator30.setClasses(classArray40);
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin29.newInstance(objArray49);
        java.lang.Class[] classArray55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin54.newInstance(objArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin16.newInstance((java.lang.Object[]) classArray67);
        java.lang.Class<?> wildcardClass69 = classArray67.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        generator0.setNamingPolicy(namingPolicy1);
        java.lang.Class[] classArray3 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray3, objArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        generator0.setDelegates((java.lang.Object[]) classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator16.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator19.setClasses(classArray29);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray38);
        generator16.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator44.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator44.setClassLoader(classLoader48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator44.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator51.setClasses(classArray61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray70);
        boolean boolean75 = generatorStrategy50.equals((java.lang.Object) classArray61);
        boolean boolean77 = generatorStrategy50.equals((java.lang.Object) (short) 10);
        generator16.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        generator0.setStyle(2);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator12.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = null;
        generator12.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator23.setNamingPolicy(namingPolicy24);
        java.lang.Class[] classArray26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator23.setDelegates((java.lang.Object[]) classArray35);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator39.setNamingPolicy(namingPolicy42);
        generator39.setUseCache(true);
        generator39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator39.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy48);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray50 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator5.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator10.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        generator10.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator17.setClasses(classArray27);
        java.lang.Class[] classArray29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray36);
        boolean boolean41 = generatorStrategy16.equals((java.lang.Object) classArray27);
        boolean boolean43 = generatorStrategy16.equals((java.lang.Object) (short) 10);
        generator8.setStrategy(generatorStrategy16);
        generator0.setStrategy(generatorStrategy16);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator48.setClasses(classArray58);
        java.lang.Class[] classArray60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray67);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = generator0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader80);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        boolean boolean6 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator7.setAttemptLoad(true);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setClasses(classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator21.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean28 = generator0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator1.setAttemptLoad(true);
        java.lang.Class[] classArray4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray4, objArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator1.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) classLoader19);
        generator0.setNamingPolicy(namingPolicy16);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator27.setClasses(classArray37);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator43.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator46.setAttemptLoad(true);
        generator46.setAttemptLoad(false);
        boolean boolean51 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator55.setNamingPolicy(namingPolicy56);
        java.lang.Class[] classArray58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator55.setDelegates((java.lang.Object[]) classArray67);
        generator46.setClasses(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator46.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = generator46.getClassLoader();
        boolean boolean72 = namingPolicy44.equals((java.lang.Object) classLoader71);
        generator0.setClassLoader(classLoader71);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        generator0.setNamingPolicy(namingPolicy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator7.setClasses(classArray17);
        java.lang.Class[] classArray19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray26);
        boolean boolean31 = generatorStrategy6.equals((java.lang.Object) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator32.setAttemptLoad(true);
        generator32.setAttemptLoad(false);
        boolean boolean37 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator39.setNamingPolicy(namingPolicy40);
        boolean boolean42 = namingPolicy38.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator39.setStrategy(generatorStrategy43);
        boolean boolean45 = generatorStrategy6.equals((java.lang.Object) generator39);
        boolean boolean46 = generator39.getUseCache();
        boolean boolean47 = generator39.getUseCache();
        boolean boolean48 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator39.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin50 = generator39.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray8, objArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator19.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy20);
        generator5.setAttemptLoad(true);
        java.lang.Class[] classArray24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator5.setDelegates(objArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator41.setAttemptLoad(true);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator41.setClasses(classArray53);
        generator39.setDelegates((java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator57.setAttemptLoad(true);
        generator57.setAttemptLoad(false);
        boolean boolean62 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator57.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator66.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator66.setDelegates((java.lang.Object[]) classArray78);
        generator57.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray78);
        generator39.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator83.setAttemptLoad(true);
        boolean boolean86 = generator83.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator83.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy87);
        generator39.setAttemptLoad(true);
        boolean boolean91 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator39.getStrategy();
        boolean boolean93 = namingPolicy38.equals((java.lang.Object) generator39);
        // The following exception was thrown during execution in test generation
        try {
            generator39.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator9.setNamingPolicy(namingPolicy10);
        java.lang.Class[] classArray12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator9.setDelegates((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator28.setAttemptLoad(true);
        java.lang.Class[] classArray31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator28.setClasses(classArray40);
        generator26.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator26.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator0.getNamingPolicy();
        boolean boolean49 = generator0.getAttemptLoad();
        boolean boolean50 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass51 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        generator0.setClasses(classArray10);
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator0.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator25.setAttemptLoad(true);
        java.lang.Class[] classArray28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator25.setClasses(classArray37);
        generator23.setDelegates((java.lang.Object[]) classArray37);
        boolean boolean40 = generator23.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator41.setClasses(classArray51);
        generator41.setUseCache(false);
        java.lang.ClassLoader classLoader55 = null;
        generator41.setClassLoader(classLoader55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator57.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator60.setAttemptLoad(true);
        generator60.setAttemptLoad(false);
        boolean boolean65 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator60.setStrategy(generatorStrategy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator69.setNamingPolicy(namingPolicy70);
        java.lang.Class[] classArray72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator69.setDelegates((java.lang.Object[]) classArray81);
        generator60.setClasses(classArray81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator60.getNamingPolicy();
        java.lang.ClassLoader classLoader85 = generator60.getClassLoader();
        boolean boolean86 = namingPolicy58.equals((java.lang.Object) classLoader85);
        generator23.setClassLoader(classLoader85);
        generator23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator23.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy20.getClassName("hi!", "", (java.lang.Object) namingPolicy90, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        java.lang.Class[] classArray10 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray10, objArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator7.setDelegates((java.lang.Object[]) classArray19);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator25.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader29 = null;
        generator25.setClassLoader(classLoader29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator25.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator32.setClasses(classArray42);
        java.lang.Class[] classArray44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray51);
        boolean boolean56 = generatorStrategy31.equals((java.lang.Object) classArray42);
        boolean boolean58 = generatorStrategy31.equals((java.lang.Object) (short) 10);
        generator23.setStrategy(generatorStrategy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator23.getStrategy();
        java.lang.Class[] classArray61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        boolean boolean72 = generatorStrategy60.equals((java.lang.Object) mixin71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Class[] classArray74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator73.setDelegates(objArray81);
        boolean boolean85 = generatorStrategy60.equals((java.lang.Object) objArray81);
        generator7.setDelegates(objArray81);
        generator7.setAttemptLoad(false);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin91 = generator7.create();
        generator7.setUseCache(true);
        generator7.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray96 = generatorStrategy6.generate((org.mockito.cglib.core.ClassGenerator) generator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator7.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator14.setAttemptLoad(true);
        java.lang.Class[] classArray17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator14.setClasses(classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator28.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader32 = null;
        generator31.setClassLoader(classLoader32);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) classLoader32);
        generator13.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator36.getStrategy();
        generator13.setStrategy(generatorStrategy40);
        generator7.setStrategy(generatorStrategy40);
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.Object[] objArray50 = new java.lang.Object[] { true, (-1), 0.0f, generator49 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        generator7.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = generator7.create();
        generator7.setAttemptLoad(true);
        boolean boolean58 = generator7.getUseCache();
        boolean boolean59 = generator7.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator6.setAttemptLoad(true);
        generator6.setAttemptLoad(false);
        boolean boolean11 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = namingPolicy12.equals((java.lang.Object) generator13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator13.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator20.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator20.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator34.getNamingPolicy();
        generator20.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader38 = null;
        generator37.setClassLoader(classLoader38);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) classLoader38);
        generator19.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator42.getStrategy();
        generator19.setStrategy(generatorStrategy46);
        generator13.setStrategy(generatorStrategy46);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        generator51.setAttemptLoad(true);
        generator51.setAttemptLoad(false);
        boolean boolean56 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator51.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator60.setNamingPolicy(namingPolicy61);
        java.lang.Class[] classArray63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { 100.0f, (short) 1, (byte) 100, 100L, (byte) 10, ' ' };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator60.setDelegates((java.lang.Object[]) classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator51.getNamingPolicy();
        java.lang.ClassLoader classLoader76 = generator51.getClassLoader();
        generator13.setClassLoader(classLoader76);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator13.getNamingPolicy();
        java.lang.ClassLoader classLoader79 = generator13.getClassLoader();
        java.lang.Class[] classArray80 = null;
        generator13.setClasses(classArray80);
        generator13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy84);
        boolean boolean86 = generator0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[100.0, 1, 100, 100, 10,  ]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }
}


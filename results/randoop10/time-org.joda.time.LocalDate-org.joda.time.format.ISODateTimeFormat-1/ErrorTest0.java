import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        int[] intArray29 = localDateTime25.getValues();
        boolean boolean30 = dateTimeZone24.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTime dateTime31 = dateTime4.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        int[] intArray40 = localDateTime36.getValues();
        boolean boolean41 = dateTimeZone35.isLocalDateTimeGap(localDateTime36);
        int int43 = dateTimeZone35.getOffsetFromLocal((long) 4);
        java.util.Locale locale46 = new java.util.Locale("");
        java.lang.String str47 = dateTimeZone35.getName((long) 9, locale46);
        java.lang.String str48 = dateTimeZone24.getName((long) '4', locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime31", (dateTime4.compareTo(dateTime31) == 0) == dateTime4.equals(dateTime31));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.hours();
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField15", Math.signum(durationField14.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField14)));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.hours();
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField15", Math.signum(durationField14.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField14)));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withWeekyear(2021);
        org.joda.time.LocalDate localDate3 = dateMidnight0.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        boolean boolean19 = calendar10.after((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1644606480000L, chronology20);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone28);
        java.util.TimeZone timeZone30 = dateTimeZone28.toTimeZone();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = dateTimeZone28.getOffset(readableInstant32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight23.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime35 = localDate3.toDateTimeAtStartOfDay(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight23 and mutableDateTime34", (dateMidnight23.compareTo(mutableDateTime34) == 0) == dateMidnight23.equals(mutableDateTime34));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        java.lang.Object obj31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj31, chronology32);
        long long34 = interval33.toDurationMillis();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval33.toPeriod(periodType35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean39 = interval33.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 10, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 2022);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withPeriodAdded(readablePeriod49, (int) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        long long58 = interval57.toDurationMillis();
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime44.minus((org.joda.time.ReadablePeriod) period59);
        java.lang.String str62 = period59.toString();
        org.joda.time.Interval interval63 = interval33.withPeriodAfterStart((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DurationFieldType durationFieldType65 = period59.getFieldType(0);
        int[] intArray67 = chronology25.get((org.joda.time.ReadablePeriod) period59, (long) (-292275054));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        boolean boolean6 = interval5.containsNow();
        org.joda.time.DateTime dateTime7 = interval5.getStart();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusDays(1);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.weekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withChronology(chronology14);
        boolean boolean16 = interval5.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        boolean boolean17 = interval2.overlaps((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval2.withDurationAfterStart(readableDuration18);
        java.lang.Object obj20 = null;
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        boolean boolean32 = calendar23.after((java.lang.Object) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.DurationField durationField35 = chronology33.years();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj20, chronology33);
        org.joda.time.Interval interval37 = interval19.withChronology(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime36", (dateTime7.compareTo(dateTime36) == 0) == dateTime7.equals(dateTime36));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minus(readableDuration7);
        boolean boolean9 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        java.util.Locale locale12 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = dateTimeZone2.getShortName((long) 9, locale12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 10, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(12);
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        boolean boolean37 = calendar28.after((java.lang.Object) localDateTime34);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        boolean boolean40 = dateTimeFieldType25.isSupported(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.weekyears();
        org.joda.time.DateTime dateTime42 = dateTime19.withChronology(chronology38);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = dateTime42.toString("09:47:54.770", locale44);
        java.lang.String str46 = locale12.getDisplayVariant(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime42", (dateTime19.compareTo(dateTime42) == 0) == dateTime19.equals(dateTime42));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(dateTimeZone2);
        boolean boolean11 = dateMidnight9.isAfter((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusDays(1);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths(13);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        boolean boolean28 = calendar19.after((java.lang.Object) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.year();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime38.withField(dateTimeFieldType39, 2022);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withPeriodAdded(readablePeriod43, (int) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        long long52 = interval51.toDurationMillis();
        org.joda.time.Period period53 = interval51.toPeriod();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = dateTime38.minus((org.joda.time.ReadablePeriod) period53);
        java.lang.String str56 = period53.toString();
        int[] intArray59 = chronology29.get((org.joda.time.ReadablePeriod) period53, (long) 'a', 0L);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight13.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfYear();
        org.joda.time.DateMidnight dateMidnight62 = property61.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        int[] intArray70 = localDateTime66.getValues();
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime66);
        int int73 = dateTimeZone65.getOffsetFromLocal((long) 4);
        java.util.Locale locale76 = new java.util.Locale("");
        java.lang.String str77 = dateTimeZone65.getName((long) 9, locale76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) 10, chronology80);
        java.util.Date date82 = dateTime81.toDate();
        org.joda.time.DateTime dateTime84 = dateTime81.withYearOfEra(1);
        org.joda.time.DateTime dateTime86 = dateTime84.withDayOfMonth(12);
        int int87 = dateTime84.getDayOfWeek();
        org.joda.time.DateTime dateTime89 = dateTime84.withHourOfDay(2);
        int int90 = dateTime78.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime93 = dateTime89.toDateTime(dateTimeZone92);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight62.withZoneRetainFields(dateTimeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime89 and dateTime93", (dateTime89.compareTo(dateTime93) == 0) == dateTime89.equals(dateTime93));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1644606480000L, chronology42);
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime46", (dateTime4.compareTo(dateTime46) == 0) == dateTime4.equals(dateTime46));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 10, chronology3);
        java.util.Date date5 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.withYearOfEra(1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth(12);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DurationField durationField24 = chronology22.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime9.toMutableDateTime(chronology22);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) 53, 225608213L, chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime26", (dateTime9.compareTo(mutableDateTime26) == 0) == dateTime9.equals(mutableDateTime26));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        int int5 = dateTime3.getWeekyear();
        boolean boolean7 = dateTime3.isBefore((long) 11);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime3.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime27", (dateTime3.compareTo(dateTime27) == 0) == dateTime3.equals(dateTime27));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minus(readableDuration17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(12);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime21.minusHours(9);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekOfWeekyear();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology42);
        org.joda.time.DateTime dateTime45 = dateTime21.withChronology(chronology42);
        boolean boolean46 = localDateTime18.equals((java.lang.Object) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime45", (dateTime21.compareTo(dateTime45) == 0) == dateTime21.equals(dateTime45));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime2.minusHours(9);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime2.withChronology(chronology23);
        org.joda.time.DateTime.Property property27 = dateTime2.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DurationField durationField7 = durationFieldType5.getField(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withFieldAdded(durationFieldType5, 35268191);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime10.isSupported(dateTimeFieldType13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight9.property(dateTimeFieldType13);
        org.joda.time.DateMidnight dateMidnight17 = property15.addToCopy(11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (int) '#');
        int[] intArray25 = localDateTime21.getValues();
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property27.getFieldType();
        int int30 = dateMidnight17.get(dateTimeFieldType29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        java.util.Date date34 = dateTime33.toDate();
        org.joda.time.DateTime dateTime36 = dateTime33.withYearOfEra(1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth(12);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withPeriodAdded(readablePeriod43, (int) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.minuteOfHour();
        boolean boolean50 = calendar41.after((java.lang.Object) localDateTime47);
        org.joda.time.Chronology chronology51 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.year();
        org.joda.time.DurationField durationField53 = chronology51.hours();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime38.toMutableDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType29.getField(chronology51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and mutableDateTime55", (dateTime38.compareTo(mutableDateTime55) == 0) == dateTime38.equals(mutableDateTime55));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DurationField durationField23 = chronology19.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField23, and durationField21", !(durationField21.compareTo(durationField23) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField23.compareTo(durationField21))));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        org.joda.time.LocalTime localTime28 = dateTime4.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        org.joda.time.DurationField durationField28 = chronology23.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        org.joda.time.LocalDate localDate28 = dateTime4.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField44, and durationField21", !(durationField21.compareTo(durationField44) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField44.compareTo(durationField21))));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withField(dateTimeFieldType6, 2022);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        long long19 = interval18.toDurationMillis();
        org.joda.time.Period period20 = interval18.toPeriod();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, (int) '#');
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.minuteOfHour();
        boolean boolean35 = calendar26.after((java.lang.Object) localDateTime32);
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = chronology36.eras();
        org.joda.time.DateTime dateTime39 = dateTime22.withChronology(chronology36);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) "52821583", chronology36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime39", (dateTime5.compareTo(dateTime39) == 0) == dateTime5.equals(dateTime39));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale31.getDisplayVariant(locale33);
        java.lang.String str35 = locale31.getDisplayName();
        java.lang.String str36 = locale29.getDisplayLanguage(locale31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        boolean boolean19 = calendar10.after((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology20.years();
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology20);
        org.joda.time.DateTime dateTime30 = dateTime4.minusMillis(52816456);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime28", (dateTime4.compareTo(dateTime28) == 0) == dateTime4.equals(dateTime28));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear(12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime11.minusHours(9);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.minuteOfHour();
        boolean boolean31 = calendar22.after((java.lang.Object) localDateTime28);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime11.withChronology(chronology32);
        org.joda.time.DateTime dateTime36 = dateTime8.toDateTime(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime35", (dateTime2.compareTo(dateTime35) == 0) == dateTime2.equals(dateTime35));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        java.lang.Object obj4 = null;
        boolean boolean5 = interval2.equals(obj4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withFieldAdded(durationFieldType10, 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded(readableDuration13, 0);
        org.joda.time.Interval interval16 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        java.util.Date date20 = dateTime19.toDate();
        org.joda.time.DateTime dateTime22 = dateTime19.withYearOfEra(1);
        org.joda.time.DateMidnight dateMidnight23 = dateTime19.toDateMidnight();
        org.joda.time.Interval interval24 = interval2.withStart((org.joda.time.ReadableInstant) dateTime19);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.millisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime19.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField44 = chronology37.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime43", (dateTime19.compareTo(dateTime43) == 0) == dateTime19.equals(dateTime43));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology13.centuries();
        org.joda.time.DurationField durationField19 = chronology13.hours();
        org.joda.time.DurationField durationField20 = chronology13.centuries();
        org.joda.time.DurationField durationField21 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField18, and durationField19", !(durationField21.compareTo(durationField18) == 0) || (Math.signum(durationField21.compareTo(durationField19)) == Math.signum(durationField18.compareTo(durationField19))));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        boolean boolean29 = dateTime27.isAfter((-1L));
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime27.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        int int29 = dateTimeZone21.getOffset(35270798L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime21.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime38", (dateTime39.compareTo(dateTime38) == 0) == dateTime39.equals(dateTime38));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.Locale.FilteringMode filteringMode56 = null;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList54, filteringMode56);
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.Locale.FilteringMode filteringMode68 = null;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList66, filteringMode68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, strMap70);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        java.util.Locale.FilteringMode filteringMode80 = null;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList78, filteringMode80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, strMap82);
        java.util.Locale locale85 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList83, (java.util.Collection<java.lang.String>) strSet86, filteringMode87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList88);
        java.lang.String str90 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList88);
        boolean boolean91 = calendar2.before((java.lang.Object) str90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime46", (dateTime25.compareTo(dateTime46) == 0) == dateTime25.equals(dateTime46));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime4.minusMillis(1970);
        org.joda.time.DateTime dateTime25 = dateTime4.plusWeeks((int) '4');
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval(obj26, chronology27);
        long long29 = interval28.toDurationMillis();
        java.lang.Object obj30 = null;
        boolean boolean31 = interval28.equals(obj30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plus(readableDuration34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withFieldAdded(durationFieldType36, 0);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withDurationAdded(readableDuration39, 0);
        org.joda.time.Interval interval42 = interval28.withStart((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 10, chronology44);
        java.util.Date date46 = dateTime45.toDate();
        org.joda.time.DateTime dateTime48 = dateTime45.withYearOfEra(1);
        org.joda.time.DateMidnight dateMidnight49 = dateTime45.toDateMidnight();
        org.joda.time.Interval interval50 = interval28.withStart((org.joda.time.ReadableInstant) dateTime45);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.minuteOfHour();
        boolean boolean62 = calendar53.after((java.lang.Object) localDateTime59);
        org.joda.time.Chronology chronology63 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.millisOfDay();
        org.joda.time.DateTime dateTime69 = dateTime45.toDateTime(chronology63);
        org.joda.time.DateTime dateTime70 = dateTime4.withChronology(chronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime69", (dateTime2.compareTo(dateTime69) == 0) == dateTime2.equals(dateTime69));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        long long29 = dateTimeZone21.convertUTCToLocal((long) '#');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology13.weeks();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        calendar20.clear();
        calendar20.roll(363120000, (int) (short) 0);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromCalendarFields(calendar20);
        org.joda.time.LocalDate localDate27 = localDate25.withYear((-1));
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.LocalDate localDate34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate36 = property33.addWrapFieldToCopy(15);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        boolean boolean38 = localDate36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = localDate25.withField(dateTimeFieldType37, 2022);
        java.lang.Object obj42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval(obj42, chronology43);
        boolean boolean45 = interval44.containsNow();
        org.joda.time.DateTime dateTime46 = interval44.getStart();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusDays(1);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.DateMidnight dateMidnight51 = dateTime50.toDateMidnight();
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.weekyear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight51.withChronology(chronology53);
        boolean boolean55 = interval44.isBefore((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateTime dateTime56 = interval44.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter57.withPivotYear((int) '#');
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = locale60.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter59.withLocale(locale61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        int[] intArray70 = localDateTime66.getValues();
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(dateTimeZone65);
        java.lang.String str73 = dateTimeFormatter62.print((org.joda.time.ReadableInstant) dateMidnight72);
        java.util.Locale locale74 = dateTimeFormatter62.getLocale();
        java.util.Calendar calendar75 = dateTime56.toCalendar(locale74);
        java.lang.String str76 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDate40, (int) 'x', locale74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar75", (calendar3.compareTo(calendar75) == 0) == calendar3.equals(calendar75));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.year();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withField(dateTimeFieldType23, 2022);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        long long36 = interval35.toDurationMillis();
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime22.minus((org.joda.time.ReadablePeriod) period37);
        java.lang.String str40 = period37.toString();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) period37, (long) 'a', 0L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusDays(1);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        int int49 = dateTime47.getWeekyear();
        boolean boolean51 = dateTime47.isBefore((long) 11);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withPeriodAdded(readablePeriod57, (int) '#');
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.minuteOfHour();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.minuteOfHour();
        boolean boolean64 = calendar55.after((java.lang.Object) localDateTime61);
        org.joda.time.Chronology chronology65 = localDateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.year();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1, chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.secondOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.yearOfEra();
        org.joda.time.DateTime dateTime71 = dateTime47.withChronology(chronology65);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime71", (dateTime47.compareTo(dateTime71) == 0) == dateTime47.equals(dateTime71));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(chronology13);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusYears(14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (int) '#');
        int[] intArray25 = localDateTime21.getValues();
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        int int28 = dateTimeZone20.getOffsetFromLocal((long) 4);
        int int30 = dateTimeZone20.getOffset((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight15.toMutableDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 15, dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight15 and mutableDateTime31", (dateMidnight15.compareTo(mutableDateTime31) == 0) == dateMidnight15.equals(mutableDateTime31));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35268191);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        long long14 = interval13.toDurationMillis();
        org.joda.time.Period period15 = interval13.toPeriod();
        org.joda.time.Interval interval16 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 2022);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        long long35 = interval34.toDurationMillis();
        org.joda.time.Period period36 = interval34.toPeriod();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime21.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long48 = dateTimeZone44.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        long long52 = dateTimeZone44.convertUTCToLocal((long) 6);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, dateTimeZone44);
        boolean boolean54 = interval16.contains((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(1);
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.weekyear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minus((long) 12);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.minusMonths((int) (short) 0);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(139);
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight66.toMutableDateTime(dateTimeZone69);
        java.util.TimeZone timeZone71 = dateTimeZone69.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight59 and mutableDateTime70", (dateMidnight59.compareTo(mutableDateTime70) == 0) == dateMidnight59.equals(mutableDateTime70));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DateTime.Property property39 = dateTime21.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime38", (dateTime21.compareTo(dateTime38) == 0) == dateTime21.equals(dateTime38));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        boolean boolean19 = calendar10.after((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology20.years();
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology20);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withField(dateTimeFieldType6, 2022);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        long long19 = interval18.toDurationMillis();
        org.joda.time.Period period20 = interval18.toPeriod();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        long long27 = interval26.toDurationMillis();
        org.joda.time.Period period28 = interval26.toPeriod();
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, (int) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        boolean boolean42 = calendar33.after((java.lang.Object) localDateTime39);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1644606480000L, chronology43);
        org.joda.time.DateTime dateTime47 = dateTime23.toDateTime(chronology43);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((long) 72006, chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime47", (dateTime5.compareTo(dateTime47) == 0) == dateTime5.equals(dateTime47));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = localDate1.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        org.joda.time.DateTime dateTime15 = dateTime10.withZone(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.getShortName((long) 52840);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime15", (dateTime6.compareTo(dateTime15) == 0) == dateTime6.equals(dateTime15));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        boolean boolean16 = calendar7.after((java.lang.Object) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology17.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1644606480000L, chronology42);
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(chronology42);
        org.joda.time.DateTime.Property property47 = dateTime22.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime46", (dateTime22.compareTo(dateTime46) == 0) == dateTime22.equals(dateTime46));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        boolean boolean19 = calendar10.after((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology20.years();
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology20);
        org.joda.time.DurationField durationField29 = chronology20.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DurationField durationField43 = chronology41.years();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 363120000, chronology41);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField43", (durationField26.compareTo(durationField43) == 0) == durationField26.equals(durationField43));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withFieldAdded(durationFieldType11, 32);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        boolean boolean26 = calendar17.after((java.lang.Object) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 100, chronology27);
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        long long32 = interval31.toDurationMillis();
        org.joda.time.Period period33 = interval31.toPeriod();
        java.lang.String str34 = period33.toString();
        long long37 = chronology27.add((org.joda.time.ReadablePeriod) period33, (long) (byte) 100, 0);
        long long43 = chronology27.getDateTimeMillis((long) 35268191, (int) (byte) 1, 20, (int) (byte) 0, 42);
        boolean boolean44 = durationFieldType11.isSupported(chronology27);
        org.joda.time.DurationField durationField45 = chronology27.eras();
        org.joda.time.DurationField durationField46 = durationFieldType0.getField(chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField46, and durationField45", !(durationField45.compareTo(durationField46) == 0) || (Math.signum(durationField45.compareTo(durationField45)) == Math.signum(durationField46.compareTo(durationField45))));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        boolean boolean16 = calendar7.after((java.lang.Object) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DurationField durationField15 = chronology12.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField15, and durationField14", !(durationField14.compareTo(durationField15) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField15.compareTo(durationField14))));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter0.getPrinter();
        java.lang.String str5 = dateTimeFormatter0.print(4855919958L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withDefaultYear(2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.Chronology chronology25 = chronology22.withUTC();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DurationField durationField29 = chronology25.years();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter9.withChronology(chronology25);
        org.joda.time.DurationField durationField31 = chronology25.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withChronology(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField29 and durationField31", (durationField29.compareTo(durationField31) == 0) == durationField29.equals(durationField31));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.plus(363120010L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight16.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight16.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight33 = property32.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        boolean boolean17 = calendar8.after((java.lang.Object) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.weeks();
        boolean boolean21 = durationFieldType5.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(chronology18);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        java.lang.Object obj31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval(obj31, chronology32);
        long long34 = interval33.toDurationMillis();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = interval33.toPeriod(periodType35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean39 = interval33.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 10, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 2022);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withPeriodAdded(readablePeriod49, (int) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        long long58 = interval57.toDurationMillis();
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime44.minus((org.joda.time.ReadablePeriod) period59);
        java.lang.String str62 = period59.toString();
        org.joda.time.Interval interval63 = interval33.withPeriodAfterStart((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.halfdays();
        int int65 = period59.get(durationFieldType64);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        java.util.Locale.FilteringMode filteringMode74 = null;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strList72, filteringMode74);
        java.util.Locale locale77 = new java.util.Locale("");
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleKeys();
        boolean boolean79 = strList75.retainAll((java.util.Collection<java.lang.String>) strSet78);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withPeriodAdded(readablePeriod81, (int) '#');
        int[] intArray84 = localDateTime80.getValues();
        boolean boolean85 = strList75.contains((java.lang.Object) localDateTime80);
        boolean boolean86 = period59.equals((java.lang.Object) strList75);
        long long89 = chronology25.add((org.joda.time.ReadablePeriod) period59, (long) 880, 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35268191);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        long long14 = interval13.toDurationMillis();
        org.joda.time.Period period15 = interval13.toPeriod();
        org.joda.time.Interval interval16 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 2022);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        long long35 = interval34.toDurationMillis();
        org.joda.time.Period period36 = interval34.toPeriod();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime21.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long48 = dateTimeZone44.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        long long52 = dateTimeZone44.convertUTCToLocal((long) 6);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, dateTimeZone44);
        boolean boolean54 = interval16.contains((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(1);
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.weekyear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minus((long) 12);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.minusMonths((int) (short) 0);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(139);
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight66.toMutableDateTime(dateTimeZone69);
        int int71 = dateMidnight66.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight66 and mutableDateTime70", (dateMidnight66.compareTo(mutableDateTime70) == 0) == dateMidnight66.equals(mutableDateTime70));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DateTime dateTime40 = dateTime21.plusMinutes(52839);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime38", (dateTime21.compareTo(dateTime38) == 0) == dateTime21.equals(dateTime38));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.plus(363120010L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight16.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight16.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight34 = property32.setCopy(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        int int5 = dateTime3.getWeekyear();
        boolean boolean7 = dateTime3.isBefore((long) 11);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime3.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime27", (dateTime3.compareTo(dateTime27) == 0) == dateTime3.equals(dateTime27));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(1);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (short) -1);
        boolean boolean14 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime11);
        java.lang.String str15 = interval6.toString();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        boolean boolean19 = interval18.containsNow();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        boolean boolean29 = interval18.isBefore((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval18.withDurationBeforeEnd(readableDuration30);
        boolean boolean32 = interval6.overlaps((org.joda.time.ReadableInterval) interval18);
        long long33 = interval18.getEndMillis();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays(1);
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        int int39 = dateTime37.getWeekyear();
        org.joda.time.DateTime.Property property40 = dateTime37.weekOfWeekyear();
        org.joda.time.DateTime.Property property41 = dateTime37.yearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.Interval interval43 = interval18.withEnd((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusDays(1);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime53 = dateTime48.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property54 = dateTime48.minuteOfHour();
        org.joda.time.DateTime.Property property55 = dateTime48.weekOfWeekyear();
        org.joda.time.DateTime dateTime57 = dateTime48.withMillisOfDay(35268191);
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded((long) 48, (int) (short) 0);
        org.joda.time.Instant instant61 = dateTime60.toInstant();
        boolean boolean62 = interval43.contains((org.joda.time.ReadableInstant) instant61);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(1);
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.DateMidnight dateMidnight67 = dateTime66.toDateMidnight();
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.weekyear();
        org.joda.time.DateMidnight dateMidnight70 = property68.addToCopy((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusYears((int) (byte) 1);
        org.joda.time.DateMidnight.Property property73 = dateMidnight70.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight74 = property73.withMinimumValue();
        boolean boolean75 = interval43.isAfter((org.joda.time.ReadableInstant) dateMidnight74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime57 and instant61", (dateTime57.compareTo(instant61) == 0) == dateTime57.equals(instant61));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withField(dateTimeFieldType6, 2022);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        long long19 = interval18.toDurationMillis();
        org.joda.time.Period period20 = interval18.toPeriod();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime23 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime22.minusMillis(52810033);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        boolean boolean37 = calendar28.after((java.lang.Object) localDateTime34);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTime dateTime42 = dateTime22.withChronology(chronology38);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 50, chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime42", (dateTime5.compareTo(dateTime42) == 0) == dateTime5.equals(dateTime42));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        boolean boolean19 = calendar10.after((java.lang.Object) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology20.years();
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField29 = chronology20.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 10, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(12);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime4.minusHours(9);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology25);
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) 2084, 68880000L, chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime28", (dateTime4.compareTo(dateTime28) == 0) == dateTime4.equals(dateTime28));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField43 = chronology42.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField43, and durationField21", !(durationField21.compareTo(durationField43) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField43.compareTo(durationField21))));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        java.lang.Object obj4 = null;
        boolean boolean5 = interval2.equals(obj4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withFieldAdded(durationFieldType10, 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded(readableDuration13, 0);
        org.joda.time.Interval interval16 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        java.util.Date date20 = dateTime19.toDate();
        org.joda.time.DateTime dateTime22 = dateTime19.withYearOfEra(1);
        org.joda.time.DateMidnight dateMidnight23 = dateTime19.toDateMidnight();
        org.joda.time.Interval interval24 = interval2.withStart((org.joda.time.ReadableInstant) dateTime19);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.millisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime19.toDateTime(chronology37);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withPeriodAdded(readablePeriod48, (int) '#');
        int[] intArray51 = localDateTime47.getValues();
        boolean boolean52 = dateTimeZone46.isLocalDateTimeGap(localDateTime47);
        org.joda.time.LocalDateTime.Property property53 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime47.withMonthOfYear(8);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime47.withYear((-1));
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays(47);
        long long62 = chronology37.set((org.joda.time.ReadablePartial) localDateTime60, 604800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime43", (dateTime19.compareTo(dateTime43) == 0) == dateTime19.equals(dateTime43));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime33 = property31.addWrapFieldToCopy(2021);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime2.toMutableDateTime();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        long long30 = interval29.toDurationMillis();
        org.joda.time.Period period31 = interval29.toPeriod();
        java.lang.String str32 = period31.toString();
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period31, (long) (byte) 100, 0);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minus(readableDuration55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 100, chronology70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        java.lang.String str77 = period76.toString();
        long long80 = chronology70.add((org.joda.time.ReadablePeriod) period76, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight56.minus((org.joda.time.ReadablePeriod) period76);
        int[] intArray84 = chronology48.get((org.joda.time.ReadablePeriod) period76, (long) 47, 3801600000L);
        long long87 = chronology25.add((org.joda.time.ReadablePeriod) period76, (-363119994L), 19);
        org.joda.time.DateTime dateTime88 = dateTime2.toDateTime(chronology25);
        org.joda.time.DateTime dateTime90 = dateTime2.plusHours(40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime88", (mutableDateTime11.compareTo(dateTime88) == 0) == mutableDateTime11.equals(dateTime88));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("8");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("8");
        java.lang.String str6 = locale2.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayLanguage(locale2);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(12);
        int int13 = dateTime12.getMillisOfSecond();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime12.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime12.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.minuteOfHour();
        boolean boolean30 = calendar21.after((java.lang.Object) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        boolean boolean33 = dateTimeFieldType18.isSupported(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.weekyears();
        org.joda.time.DateTime dateTime35 = dateTime12.withChronology(chronology31);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = dateTime35.toString("09:47:54.770", locale37);
        java.lang.String str39 = locale2.getDisplayName(locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime35", (dateTime12.compareTo(dateTime35) == 0) == dateTime12.equals(dateTime35));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        int[] intArray29 = localDateTime25.getValues();
        boolean boolean30 = dateTimeZone24.isLocalDateTimeGap(localDateTime25);
        int int32 = dateTimeZone24.getOffsetFromLocal((long) 4);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime4.withZoneRetainFields(dateTimeZone24);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1, chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekyearOfCentury();
        org.joda.time.DateTime dateTime52 = dateTime4.toDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime52", (dateTime4.compareTo(dateTime52) == 0) == dateTime4.equals(dateTime52));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1644606480000L, chronology42);
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(chronology42);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 52854475);
        long long50 = chronology42.set((org.joda.time.ReadablePartial) localDate48, (long) 52833543);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime46", (dateTime4.compareTo(dateTime46) == 0) == dateTime4.equals(dateTime46));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        java.lang.String str2 = dateTimeFormatter0.print((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(15);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1644606480000L, chronology19);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone27.getOffset(readableInstant31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight22.toMutableDateTime(dateTimeZone27);
        int int36 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime33, "14:40:37.405", (int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear(52810033);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTimeFormatter40.parseMutableDateTime("1969-01-05T04:52:00.000");
        int int45 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime42, "Koreanisch", 52869635);
        int int48 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime42, "14:40:39.122", 298);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight22 and mutableDateTime33", (dateMidnight22.compareTo(mutableDateTime33) == 0) == dateMidnight22.equals(mutableDateTime33));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology12.months();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        boolean boolean28 = calendar19.after((java.lang.Object) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.centuryOfEra();
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withYear(35268191);
        int int50 = localDateTime44.getMonthOfYear();
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Interval interval53 = new org.joda.time.Interval(obj51, chronology52);
        boolean boolean54 = interval53.containsNow();
        org.joda.time.DateTime dateTime55 = interval53.getStart();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusDays(1);
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        org.joda.time.DateMidnight dateMidnight60 = dateTime59.toDateMidnight();
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.weekyear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withChronology(chronology62);
        boolean boolean64 = interval53.isBefore((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval53.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Period period67 = interval53.toPeriod();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime44.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 52814315);
        long long72 = chronology29.add((org.joda.time.ReadablePeriod) period67, (-31172820000L), 23);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.centuryOfEra();
        java.lang.Object obj75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval(obj75, chronology76);
        long long78 = interval77.toDurationMillis();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = interval77.toPeriod(periodType79);
        int[] intArray82 = chronology29.get((org.joda.time.ReadablePeriod) period80, 0L);
        long long85 = chronology12.add((org.joda.time.ReadablePeriod) period80, 3801600000L, 15);
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.util.Locale locale87 = locale86.stripExtensions();
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale87);
        calendar88.setMinimalDaysInFirstWeek(7);
        java.util.Date date91 = calendar88.getTime();
        calendar88.setFirstDayOfWeek(32);
        java.util.Date date94 = calendar88.getTime();
        boolean boolean95 = period80.equals((java.lang.Object) date94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar88", (calendar2.compareTo(calendar88) == 0) == calendar2.equals(calendar88));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth(12);
        int int8 = dateTime5.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone10);
        int int13 = dateTime5.getWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime5.plusMillis(358);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime12", (dateTime5.compareTo(dateTime12) == 0) == dateTime5.equals(dateTime12));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone4.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((int) '#');
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone6, locale13);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus(readableDuration19);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        boolean boolean32 = calendar23.after((java.lang.Object) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        long long37 = dateTimeField34.getDifferenceAsLong((long) (byte) 0, (long) (-1));
        java.lang.String str38 = dateTimeField34.toString();
        boolean boolean39 = dateTimeField34.isSupported();
        int int40 = dateMidnight20.get(dateTimeField34);
        int int42 = dateTimeField34.getMinimumValue((long) (byte) -1);
        java.lang.String str44 = dateTimeField34.getAsShortText(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long51 = dateTimeZone47.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDateTime56.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusMillis((int) (short) 10);
        boolean boolean61 = dateTimeZone47.isLocalDateTimeGap(localDateTime56);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.plusMinutes((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withPeriodAdded(readablePeriod69, (int) '#');
        int[] intArray72 = localDateTime68.getValues();
        boolean boolean73 = dateTimeZone67.isLocalDateTimeGap(localDateTime68);
        org.joda.time.LocalDateTime.Property property74 = localDateTime68.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfCeilingCopy();
        java.util.Locale locale77 = java.util.Locale.KOREA;
        org.joda.time.LocalDateTime localDateTime78 = property74.setCopy("35271248", locale77);
        java.lang.String str79 = locale77.getLanguage();
        java.lang.String str80 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime63, (int) (byte) 0, locale77);
        java.util.Locale.setDefault(locale77);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone6, locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar23", (calendar15.compareTo(calendar23) == 0) == calendar15.equals(calendar23));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.hourOfHalfday();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        long long23 = dateTimeZone21.previousTransition(363120010L);
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale25.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear((int) '#');
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = locale32.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter31.withLocale(locale33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withPeriodAdded(readablePeriod39, (int) '#');
        int[] intArray42 = localDateTime38.getValues();
        boolean boolean43 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(dateTimeZone37);
        java.lang.String str45 = dateTimeFormatter34.print((org.joda.time.ReadableInstant) dateMidnight44);
        java.util.Locale locale46 = dateTimeFormatter34.getLocale();
        java.lang.String str47 = locale46.getScript();
        java.lang.String str48 = locale46.getScript();
        java.lang.String str49 = locale25.getDisplayVariant(locale46);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone24, locale46);
        java.lang.String str51 = locale46.getDisplayScript();
        int int52 = dateTimeField19.getMaximumTextLength(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar50", (calendar3.compareTo(calendar50) == 0) == calendar3.equals(calendar50));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 10, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withField(dateTimeFieldType7, 2022);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval(obj17, chronology18);
        long long20 = interval19.toDurationMillis();
        org.joda.time.Period period21 = interval19.toPeriod();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime6.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime24 = dateTime23.withLaterOffsetAtOverlap();
        java.lang.Object obj25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj25, chronology26);
        long long28 = interval27.toDurationMillis();
        org.joda.time.Period period29 = interval27.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, (int) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.minuteOfHour();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.minuteOfHour();
        boolean boolean43 = calendar34.after((java.lang.Object) localDateTime40);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1644606480000L, chronology44);
        org.joda.time.DateTime dateTime48 = dateTime24.toDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType0.getField(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime48", (dateTime6.compareTo(dateTime48) == 0) == dateTime6.equals(dateTime48));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology12);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusYears(14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int27 = dateTimeZone19.getOffsetFromLocal((long) 4);
        int int29 = dateTimeZone19.getOffset((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight14.toMutableDateTime(dateTimeZone19);
        java.util.TimeZone timeZone31 = dateTimeZone19.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight14 and mutableDateTime30", (dateMidnight14.compareTo(mutableDateTime30) == 0) == dateMidnight14.equals(mutableDateTime30));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.joda.time.DurationField durationField20 = chronology15.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField19", Math.signum(durationField14.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField14)));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property2.addToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate6 = localDate4.plusYears((int) '4');
        int int7 = localDate4.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime11", (dateTime8.compareTo(dateTime11) == 0) == dateTime8.equals(dateTime11));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime2.toMutableDateTime();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        long long30 = interval29.toDurationMillis();
        org.joda.time.Period period31 = interval29.toPeriod();
        java.lang.String str32 = period31.toString();
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period31, (long) (byte) 100, 0);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minus(readableDuration55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 100, chronology70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        java.lang.String str77 = period76.toString();
        long long80 = chronology70.add((org.joda.time.ReadablePeriod) period76, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight56.minus((org.joda.time.ReadablePeriod) period76);
        int[] intArray84 = chronology48.get((org.joda.time.ReadablePeriod) period76, (long) 47, 3801600000L);
        long long87 = chronology25.add((org.joda.time.ReadablePeriod) period76, (-363119994L), 19);
        org.joda.time.DateTime dateTime88 = dateTime2.toDateTime(chronology25);
        org.joda.time.DateTime dateTime90 = dateTime88.minusHours(52913996);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        java.util.Locale locale92 = dateTimeFormatter91.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter91.withPivotYear(35268191);
        java.util.Locale locale95 = dateTimeFormatter94.getLocale();
        java.lang.String str96 = dateTime90.toString(dateTimeFormatter94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime88", (dateTime2.compareTo(dateTime88) == 0) == dateTime2.equals(dateTime88));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(604800000L);
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime4 = dateTime1.plus(363120097L);
        org.joda.time.DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        int[] intArray14 = localDateTime10.getValues();
        boolean boolean15 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.withFieldAdded(durationFieldType17, 32);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        boolean boolean32 = calendar23.after((java.lang.Object) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) -1, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withField(dateTimeFieldType43, 2022);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        long long56 = interval55.toDurationMillis();
        org.joda.time.Period period57 = interval55.toPeriod();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        java.lang.String str60 = period57.toString();
        int[] intArray63 = chronology33.get((org.joda.time.ReadablePeriod) period57, (long) 'a', 0L);
        org.joda.time.DurationField durationField64 = durationFieldType17.getField(chronology33);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withPeriodAdded(readablePeriod69, (int) '#');
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime73 = property72.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.minuteOfHour();
        boolean boolean76 = calendar67.after((java.lang.Object) localDateTime73);
        org.joda.time.Chronology chronology77 = localDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(chronology77);
        org.joda.time.DateTimeField dateTimeField80 = chronology77.clockhourOfHalfday();
        org.joda.time.DurationField durationField81 = chronology77.minutes();
        org.joda.time.DateTimeField dateTimeField82 = chronology77.clockhourOfHalfday();
        org.joda.time.DurationField durationField83 = chronology77.hours();
        java.lang.String str84 = chronology77.toString();
        boolean boolean85 = durationFieldType17.isSupported(chronology77);
        org.joda.time.DateTime dateTime86 = dateTime6.toDateTime(chronology77);
        org.joda.time.DateTimeField dateTimeField87 = chronology77.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime86", (dateTime4.compareTo(dateTime86) == 0) == dateTime4.equals(dateTime86));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.minuteOfHour();
        boolean boolean15 = calendar6.after((java.lang.Object) localDateTime12);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) calendar2, chronology16);
        calendar2.setFirstDayOfWeek(12);
        java.lang.String str21 = calendar2.getCalendarType();
        int int22 = calendar2.getMinimalDaysInFirstWeek();
        calendar2.set(42, 52816456, 17, 4, 100);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone33);
        java.util.TimeZone timeZone35 = dateTimeZone33.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale36.getISO3Language();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.lang.String str40 = locale36.getDisplayScript(locale39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone35, locale39);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone35);
        java.util.TimeZone timeZone43 = calendar42.getTimeZone();
        calendar2.setTimeZone(timeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar41", (calendar6.compareTo(calendar41) == 0) == calendar6.equals(calendar41));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology13.eras();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology13.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField19 and durationField22", Math.signum(durationField19.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField19)));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = interval2.toPeriod(periodType4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean8 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withField(dateTimeFieldType14, 2022);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval(obj24, chronology25);
        long long27 = interval26.toDurationMillis();
        org.joda.time.Period period28 = interval26.toPeriod();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime13.minus((org.joda.time.ReadablePeriod) period28);
        java.lang.String str31 = period28.toString();
        org.joda.time.Interval interval32 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType34 = period28.getFieldType(0);
        java.lang.String str35 = durationFieldType34.getName();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 10, chronology37);
        java.util.Date date39 = dateTime38.toDate();
        org.joda.time.DateTime dateTime41 = dateTime38.withYearOfEra(1);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfMonth(12);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withPeriodAdded(readablePeriod48, (int) '#');
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.minuteOfHour();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.minuteOfHour();
        boolean boolean55 = calendar46.after((java.lang.Object) localDateTime52);
        org.joda.time.Chronology chronology56 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.year();
        org.joda.time.DurationField durationField58 = chronology56.hours();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime43.toMutableDateTime(chronology56);
        boolean boolean61 = durationFieldType34.isSupported(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and mutableDateTime60", (dateTime43.compareTo(mutableDateTime60) == 0) == dateTime43.equals(mutableDateTime60));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35268191);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        long long14 = interval13.toDurationMillis();
        org.joda.time.Period period15 = interval13.toPeriod();
        org.joda.time.Interval interval16 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 2022);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        long long35 = interval34.toDurationMillis();
        org.joda.time.Period period36 = interval34.toPeriod();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime21.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long48 = dateTimeZone44.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        long long52 = dateTimeZone44.convertUTCToLocal((long) 6);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, dateTimeZone44);
        boolean boolean54 = interval16.contains((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(1);
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.weekyear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minus((long) 12);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.minusMonths((int) (short) 0);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(139);
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight66.toMutableDateTime(dateTimeZone69);
        int int72 = dateTimeZone69.getOffset(1644520087000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight59 and mutableDateTime70", (dateMidnight59.compareTo(mutableDateTime70) == 0) == dateMidnight59.equals(mutableDateTime70));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis(52810033);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime21.withChronology(chronology37);
        org.joda.time.DurationField durationField42 = chronology37.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime41", (dateTime4.compareTo(dateTime41) == 0) == dateTime4.equals(dateTime41));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology19.centuries();
        org.joda.time.DateTime dateTime28 = dateTime5.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime28", (dateTime5.compareTo(dateTime28) == 0) == dateTime5.equals(dateTime28));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField43 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField44 = chronology19.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField44, and durationField21", !(durationField21.compareTo(durationField44) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField44.compareTo(durationField21))));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.hours();
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DurationField durationField16 = chronology12.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField15", Math.signum(durationField14.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField14)));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(chronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField19", Math.signum(durationField14.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField14)));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        boolean boolean17 = calendar8.after((java.lang.Object) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.year();
        org.joda.time.DurationField durationField20 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = dateTimeField21.getAsText((long) 7, locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleKeys();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone2, locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar8", (calendar3.compareTo(calendar8) == 0) == calendar3.equals(calendar8));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField15, and durationField14", !(durationField14.compareTo(durationField15) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField15.compareTo(durationField14))));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval(obj3, chronology4);
        long long6 = interval5.toDurationMillis();
        java.lang.Object obj7 = null;
        boolean boolean8 = interval5.equals(obj7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus(readableDuration11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withFieldAdded(durationFieldType13, 0);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded(readableDuration16, 0);
        org.joda.time.Interval interval19 = interval5.withStart((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        java.util.Date date23 = dateTime22.toDate();
        org.joda.time.DateTime dateTime25 = dateTime22.withYearOfEra(1);
        org.joda.time.DateMidnight dateMidnight26 = dateTime22.toDateMidnight();
        org.joda.time.Interval interval27 = interval5.withStart((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = interval27.isBeforeNow();
        boolean boolean29 = interval2.overlaps((org.joda.time.ReadableInterval) interval27);
        boolean boolean31 = interval2.contains((long) 'a');
        org.joda.time.Interval interval33 = interval2.withStartMillis(35270798L);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear(12);
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration34, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(1);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (short) -1);
        boolean boolean48 = interval40.isBefore((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str49 = interval40.toString();
        java.lang.Object obj50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval(obj50, chronology51);
        boolean boolean53 = interval52.containsNow();
        org.joda.time.DateTime dateTime54 = interval52.getStart();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(1);
        org.joda.time.DateTime dateTime58 = localDateTime57.toDateTime();
        org.joda.time.DateMidnight dateMidnight59 = dateTime58.toDateMidnight();
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.weekyear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.withChronology(chronology61);
        boolean boolean63 = interval52.isBefore((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval52.withDurationBeforeEnd(readableDuration64);
        boolean boolean66 = interval40.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Interval interval67 = interval33.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 10, chronology69);
        java.util.Date date71 = dateTime70.toDate();
        int int72 = dateTime70.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale75);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withPeriodAdded(readablePeriod78, (int) '#');
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = property81.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.minuteOfHour();
        org.joda.time.LocalDateTime.Property property84 = localDateTime82.minuteOfHour();
        boolean boolean85 = calendar76.after((java.lang.Object) localDateTime82);
        org.joda.time.Chronology chronology86 = localDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.weekOfWeekyear();
        org.joda.time.DurationField durationField88 = chronology86.weeks();
        boolean boolean89 = durationFieldType73.isSupported(chronology86);
        org.joda.time.DateTimeField dateTimeField90 = chronology86.hourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology86.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology86.monthOfYear();
        org.joda.time.DateTime dateTime93 = dateTime70.toDateTime(chronology86);
        boolean boolean94 = interval52.equals((java.lang.Object) chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime93", (dateTime22.compareTo(dateTime93) == 0) == dateTime22.equals(dateTime93));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        boolean boolean16 = calendar7.after((java.lang.Object) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.plus(363120010L);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfCentury();
        int int32 = dateTime27.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime27.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = dateTime34.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        int int10 = property9.getMinimumValue();
        java.lang.String str11 = property9.getAsShortText();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        boolean boolean16 = localDateTime14.isSupported(durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMillis(52816456);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekOfWeekyear(7);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DurationField durationField28 = durationFieldType26.getField(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withFieldAdded(durationFieldType26, 35268191);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withFieldAdded(durationFieldType26, (int) (short) -1);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        boolean boolean45 = calendar36.after((java.lang.Object) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1, chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DurationField durationField54 = chronology46.centuries();
        org.joda.time.DurationField durationField55 = durationFieldType26.getField(chronology46);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusDays(1);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.DateMidnight dateMidnight61 = dateTime60.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DurationField durationField64 = durationFieldType62.getField(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight61.withFieldAdded(durationFieldType62, 35268191);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean71 = localDateTime67.isSupported(dateTimeFieldType70);
        org.joda.time.DateMidnight.Property property72 = dateMidnight66.property(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType70.getDurationType();
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale75);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withPeriodAdded(readablePeriod78, (int) '#');
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.millisOfDay();
        org.joda.time.LocalDateTime localDateTime82 = property81.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.minuteOfHour();
        org.joda.time.LocalDateTime.Property property84 = localDateTime82.minuteOfHour();
        boolean boolean85 = calendar76.after((java.lang.Object) localDateTime82);
        org.joda.time.Chronology chronology86 = localDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.year();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.minuteOfDay();
        boolean boolean89 = durationFieldType73.isSupported(chronology86);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(chronology86);
        org.joda.time.DurationField durationField91 = durationFieldType56.getField(chronology86);
        org.joda.time.DurationField durationField92 = chronology86.minutes();
        org.joda.time.DurationField durationField93 = durationFieldType26.getField(chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField93", (durationField28.compareTo(durationField93) == 0) == durationField28.equals(durationField93));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        java.lang.Object obj4 = null;
        boolean boolean5 = interval2.equals(obj4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withFieldAdded(durationFieldType10, 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded(readableDuration13, 0);
        org.joda.time.Interval interval16 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval16.withDurationBeforeEnd(readableDuration17);
        boolean boolean20 = interval18.isAfter((long) 8);
        boolean boolean22 = interval18.isBefore((long) 19);
        org.joda.time.DateTime dateTime23 = interval18.getStart();
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.Interval interval25 = property24.toInterval();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        calendar28.clear();
        calendar28.roll(363120000, (int) (short) 0);
        int int33 = calendar28.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        calendar28.setTimeZone(timeZone40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays(1);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime51 = dateTime46.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withPeriodAdded(readablePeriod59, (int) '#');
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.minuteOfHour();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.minuteOfHour();
        boolean boolean66 = calendar57.after((java.lang.Object) localDateTime63);
        org.joda.time.Chronology chronology67 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.year();
        boolean boolean69 = dateTimeFieldType54.isSupported(chronology67);
        org.joda.time.DurationField durationField70 = chronology67.weekyears();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.yearOfCentury();
        org.joda.time.DateTime dateTime72 = dateTime51.toDateTime(chronology67);
        boolean boolean73 = calendar28.before((java.lang.Object) dateTime51);
        int int74 = dateTime51.getMonthOfYear();
        java.lang.String str76 = dateTime51.toString("7");
        boolean boolean77 = property24.equals((java.lang.Object) "7");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime51 and dateTime72", (dateTime51.compareTo(dateTime72) == 0) == dateTime51.equals(dateTime72));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.Chronology chronology45 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField46, and durationField21", !(durationField21.compareTo(durationField46) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField46.compareTo(durationField21))));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(1);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(32);
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(1644573059041L, dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime12", (dateTime7.compareTo(dateTime12) == 0) == dateTime7.equals(dateTime12));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.millisOfDay();
        int int11 = property10.getMinimumValue();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property10.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        boolean boolean17 = localDateTime15.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMillis(52816456);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekOfWeekyear(7);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays(1);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DurationField durationField29 = durationFieldType27.getField(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight26.withFieldAdded(durationFieldType27, 35268191);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime19.withFieldAdded(durationFieldType27, (int) (short) -1);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withPeriodAdded(readablePeriod39, (int) '#');
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.minuteOfHour();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.minuteOfHour();
        boolean boolean46 = calendar37.after((java.lang.Object) localDateTime43);
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) -1, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology47);
        org.joda.time.DurationField durationField55 = chronology47.centuries();
        org.joda.time.DurationField durationField56 = durationFieldType27.getField(chronology47);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(0L, chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField29 and durationField56", (durationField29.compareTo(durationField56) == 0) == durationField29.equals(durationField56));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMinuteOfHour(1);
        org.joda.time.Instant instant10 = dateTime6.toInstant();
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = dateTime6.isAfter(readableInstant11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime38 = dateTime35.withField(dateTimeFieldType36, 2022);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        long long49 = interval48.toDurationMillis();
        org.joda.time.Period period50 = interval48.toPeriod();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime35.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime53 = dateTime52.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        java.lang.Object obj61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval(obj61, chronology62);
        long long64 = interval63.toDurationMillis();
        org.joda.time.Period period65 = interval63.toPeriod();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime68 = dateTime52.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(2022);
        org.joda.time.DateTime dateTime73 = dateTime70.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter74.withOffsetParsed();
        java.lang.Integer int76 = dateTimeFormatter74.getPivotYear();
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale78);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withPeriodAdded(readablePeriod81, (int) '#');
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.millisOfDay();
        org.joda.time.LocalDateTime localDateTime85 = property84.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.minuteOfHour();
        org.joda.time.LocalDateTime.Property property87 = localDateTime85.minuteOfHour();
        boolean boolean88 = calendar79.after((java.lang.Object) localDateTime85);
        org.joda.time.Chronology chronology89 = localDateTime85.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.year();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter74.withChronology(chronology89);
        org.joda.time.DurationField durationField94 = chronology89.seconds();
        org.joda.time.DateTime dateTime95 = dateTime73.withChronology(chronology89);
        org.joda.time.DateTime dateTime96 = dateTime9.withChronology(chronology89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime73 and dateTime95", (dateTime73.compareTo(dateTime95) == 0) == dateTime73.equals(dateTime95));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth(12);
        int int8 = dateTime5.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone10);
        int int13 = dateTime5.getWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime5.plusMillis(358);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear(856);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime12", (dateTime5.compareTo(dateTime12) == 0) == dateTime5.equals(dateTime12));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(52814315, 10, 69, 0);
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        boolean boolean9 = interval8.containsNow();
        org.joda.time.DateTime dateTime10 = interval8.getStart();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(1);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.weekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withChronology(chronology17);
        boolean boolean19 = interval8.isBefore((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateTime dateTime20 = interval8.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((int) '#');
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = locale24.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withPeriodAdded(readablePeriod31, (int) '#');
        int[] intArray34 = localDateTime30.getValues();
        boolean boolean35 = dateTimeZone29.isLocalDateTimeGap(localDateTime30);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone29);
        java.lang.String str37 = dateTimeFormatter26.print((org.joda.time.ReadableInstant) dateMidnight36);
        java.util.Locale locale38 = dateTimeFormatter26.getLocale();
        java.util.Calendar calendar39 = dateTime20.toCalendar(locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        boolean boolean41 = calendar39.after((java.lang.Object) dateTimeFormatter40);
        java.util.TimeZone timeZone42 = calendar39.getTimeZone();
        java.util.Calendar.Builder builder43 = builder5.setTimeZone(timeZone42);
        java.util.Calendar calendar44 = builder43.build();
        java.util.Calendar.Builder builder49 = builder43.setTimeOfDay(52, 362, 47, 52816456);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        int[] intArray58 = localDateTime54.getValues();
        boolean boolean59 = dateTimeZone53.isLocalDateTimeGap(localDateTime54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight61 = org.joda.time.DateMidnight.now(dateTimeZone53);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight64 = property62.addToCopy((int) (short) 0);
        org.joda.time.DateTimeField dateTimeField65 = property62.getField();
        java.lang.String str66 = dateTimeField65.toString();
        boolean boolean67 = dateTimeField65.isLenient();
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Locale locale70 = locale69.stripExtensions();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale70);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withPeriodAdded(readablePeriod73, (int) '#');
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfDay();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.minuteOfHour();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.minuteOfHour();
        boolean boolean80 = calendar71.after((java.lang.Object) localDateTime77);
        org.joda.time.Chronology chronology81 = localDateTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.year();
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Locale locale84 = locale83.stripExtensions();
        int int85 = dateTimeField82.getMaximumTextLength(locale83);
        java.lang.String str86 = dateTimeField65.getAsShortText((-1L), locale83);
        java.lang.String str87 = locale83.getDisplayScript();
        java.util.Calendar.Builder builder88 = builder43.setLocale(locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar71", (calendar39.compareTo(calendar71) == 0) == calendar39.equals(calendar71));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology19.centuries();
        org.joda.time.DateTime dateTime28 = dateTime5.toDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear(12);
        int int34 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTimeISO();
        int int38 = mutableDateTime37.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int40 = mutableDateTime37.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTime dateTime43 = dateTime28.withChronology(chronology41);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear(4670);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime28", (dateTime5.compareTo(dateTime28) == 0) == dateTime5.equals(dateTime28));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.era();
        org.joda.time.DurationField durationField19 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        boolean boolean33 = calendar24.after((java.lang.Object) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1, chronology34);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withField(dateTimeFieldType43, 2022);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        long long56 = interval55.toDurationMillis();
        org.joda.time.Period period57 = interval55.toPeriod();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime37.minus((org.joda.time.ReadablePeriod) period57);
        int[] intArray63 = chronology13.get((org.joda.time.ReadablePeriod) period57, (long) (short) 10, (-62163607920000L));
        org.joda.time.DurationField durationField64 = chronology13.minutes();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, (int) '#');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime71 = property69.roundFloorCopy();
        int[] intArray73 = chronology13.get((org.joda.time.ReadablePartial) localDateTime71, (long) (-46800000));
        org.joda.time.DurationField durationField74 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField74, durationField19, and durationField64", !(durationField74.compareTo(durationField19) == 0) || (Math.signum(durationField74.compareTo(durationField64)) == Math.signum(durationField19.compareTo(durationField64))));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DurationField durationField44 = chronology42.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField44, and durationField21", !(durationField21.compareTo(durationField44) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField44.compareTo(durationField21))));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy((long) (short) 0);
        long long8 = property5.remainder();
        org.joda.time.DateMidnight dateMidnight9 = property5.roundHalfFloorCopy();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology22.weekyears();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight9.toMutableDateTime(chronology22);
        org.joda.time.Interval interval30 = dateMidnight9.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        int int36 = dateTime35.getMillisOfSecond();
        org.joda.time.DateTime dateTime38 = dateTime35.plusSeconds(0);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, readableDuration39);
        org.joda.time.Interval interval41 = interval30.overlap((org.joda.time.ReadableInterval) interval40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and mutableDateTime29", (dateMidnight9.compareTo(mutableDateTime29) == 0) == dateMidnight9.equals(mutableDateTime29));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        boolean boolean48 = calendar2.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime46", (dateTime25.compareTo(dateTime46) == 0) == dateTime25.equals(dateTime46));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        java.lang.Object obj0 = null;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj0, chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyear();
        org.joda.time.DurationField durationField18 = chronology13.weeks();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DurationField durationField20 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField15, and durationField18", !(durationField20.compareTo(durationField15) == 0) || (Math.signum(durationField20.compareTo(durationField18)) == Math.signum(durationField15.compareTo(durationField18))));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(35268191);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval(obj11, chronology12);
        long long14 = interval13.toDurationMillis();
        org.joda.time.Period period15 = interval13.toPeriod();
        org.joda.time.Interval interval16 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int27 = dateTimeZone19.getOffsetFromLocal((long) 4);
        java.util.Locale locale30 = new java.util.Locale("");
        java.lang.String str31 = dateTimeZone19.getName((long) 9, locale30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone19);
        boolean boolean33 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime32.plusSeconds(8);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withField(dateTimeFieldType43, 2022);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        long long56 = interval55.toDurationMillis();
        org.joda.time.Period period57 = interval55.toPeriod();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withPeriodAdded(readablePeriod64, (int) '#');
        int[] intArray67 = localDateTime63.getValues();
        boolean boolean68 = dateTimeZone62.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTime dateTime69 = dateTime42.withZone(dateTimeZone62);
        boolean boolean71 = dateTimeZone62.isStandardOffset((long) 362);
        java.lang.String str73 = dateTimeZone62.getName((long) 43);
        org.joda.time.DateTime dateTime74 = dateTime32.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property75 = dateTime32.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime69", (dateTime42.compareTo(dateTime69) == 0) == dateTime42.equals(dateTime69));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfDay(35268191);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long20 = dateTimeZone16.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMillis((int) (short) 10);
        boolean boolean30 = dateTimeZone16.isLocalDateTimeGap(localDateTime25);
        long long32 = dateTimeZone16.convertUTCToLocal(0L);
        int int34 = dateTimeZone16.getOffset((long) 35268191);
        java.lang.String str36 = dateTimeZone16.getNameKey((long) 70);
        org.joda.time.DateTime dateTime37 = dateTime13.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone16);
        long long40 = dateTimeZone16.nextTransition(63433187291547L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology19.centuries();
        org.joda.time.DateTime dateTime28 = dateTime5.toDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear(12);
        int int34 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTimeISO();
        int int38 = mutableDateTime37.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int40 = mutableDateTime37.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTime dateTime43 = dateTime28.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime28", (dateTime5.compareTo(dateTime28) == 0) == dateTime5.equals(dateTime28));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury(12);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight9.withChronology(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.weeks();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withPeriodAdded(readablePeriod31, (int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        boolean boolean38 = calendar29.after((java.lang.Object) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology39);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.minus(readableDuration46);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.minuteOfHour();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.minuteOfHour();
        boolean boolean60 = calendar51.after((java.lang.Object) localDateTime57);
        org.joda.time.Chronology chronology61 = localDateTime57.getChronology();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 100, chronology61);
        java.lang.Object obj63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval(obj63, chronology64);
        long long66 = interval65.toDurationMillis();
        org.joda.time.Period period67 = interval65.toPeriod();
        java.lang.String str68 = period67.toString();
        long long71 = chronology61.add((org.joda.time.ReadablePeriod) period67, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight47.minus((org.joda.time.ReadablePeriod) period67);
        int[] intArray75 = chronology39.get((org.joda.time.ReadablePeriod) period67, (long) 47, 3801600000L);
        int[] intArray78 = chronology22.get((org.joda.time.ReadablePeriod) period67, (long) (short) 100, 1L);
        org.joda.time.DurationField durationField79 = chronology22.eras();
        long long83 = chronology22.add(535920000L, (-1054320000L), 2010);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField79", Math.signum(durationField26.compareTo(durationField79)) == -Math.signum(durationField79.compareTo(durationField26)));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(dateTimeZone3);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight15 = property12.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withYearOfCentury(12);
        org.joda.time.Interval interval27 = dateMidnight21.toInterval();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.hourOfHalfday();
        org.joda.time.Interval interval49 = interval27.withChronology(chronology41);
        org.joda.time.DurationField durationField50 = chronology41.weeks();
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight16.toMutableDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight11 and mutableDateTime51", (dateMidnight11.compareTo(mutableDateTime51) == 0) == dateMidnight11.equals(mutableDateTime51));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withMonthOfYear(8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minusMinutes((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime3.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.minusMillis(8);
        java.lang.Object obj18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval(obj18, chronology19);
        long long21 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = interval20.toPeriod(periodType22);
        int int24 = period23.size();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 5107);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval(obj36, chronology37);
        long long39 = interval38.toDurationMillis();
        org.joda.time.Period period40 = interval38.toPeriod();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.plusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusYears(17521);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int47 = localDateTime45.indexOf(dateTimeFieldType46);
        int int48 = localDateTime28.get(dateTimeFieldType46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime53.withField(dateTimeFieldType54, 2022);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withPeriodAdded(readablePeriod58, (int) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        java.lang.Object obj64 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Interval interval66 = new org.joda.time.Interval(obj64, chronology65);
        long long67 = interval66.toDurationMillis();
        org.joda.time.Period period68 = interval66.toPeriod();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime53.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime71 = dateTime70.withLaterOffsetAtOverlap();
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.util.Locale locale80 = locale79.stripExtensions();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale80);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withPeriodAdded(readablePeriod83, (int) '#');
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.millisOfDay();
        org.joda.time.LocalDateTime localDateTime87 = property86.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.minuteOfHour();
        org.joda.time.LocalDateTime.Property property89 = localDateTime87.minuteOfHour();
        boolean boolean90 = calendar81.after((java.lang.Object) localDateTime87);
        org.joda.time.Chronology chronology91 = localDateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.year();
        org.joda.time.DateTimeField dateTimeField93 = chronology91.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight(1644606480000L, chronology91);
        org.joda.time.DateTime dateTime95 = dateTime71.toDateTime(chronology91);
        boolean boolean96 = dateTimeFieldType46.isSupported(chronology91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime95", (dateTime53.compareTo(dateTime95) == 0) == dateTime53.equals(dateTime95));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus(readableDuration4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property6.addToCopy(17520);
        org.joda.time.DateMidnight dateMidnight9 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus(readableDuration12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withFieldAdded(durationFieldType14, 0);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight.Property property20 = dateMidnight11.era();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withDurationAdded(363120999L, 363120000);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDurationAdded(0L, 1970);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(23);
        org.joda.time.DateTime dateTime29 = dateMidnight26.toDateTime(dateTimeZone28);
        boolean boolean30 = dateMidnight9.isBefore((org.joda.time.ReadableInstant) dateMidnight26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight26 and dateTime29", (dateMidnight26.compareTo(dateTime29) == 0) == dateMidnight26.equals(dateTime29));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        long long33 = interval32.toDurationMillis();
        org.joda.time.Period period34 = interval32.toPeriod();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime37 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(2022);
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Integer int45 = dateTimeFormatter43.getPivotYear();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.seconds();
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology58);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfMonth(20);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime66.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        java.lang.Object obj4 = null;
        boolean boolean5 = interval2.equals(obj4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withFieldAdded(durationFieldType10, 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded(readableDuration13, 0);
        org.joda.time.Interval interval16 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval16.withDurationBeforeEnd(readableDuration17);
        boolean boolean20 = interval18.isAfter((long) 8);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        boolean boolean24 = interval23.containsNow();
        org.joda.time.MutableInterval mutableInterval25 = interval23.toMutableInterval();
        boolean boolean26 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval28 = interval18.withStartMillis(345600000L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime36 = dateTime33.withField(dateTimeFieldType34, 2022);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval(obj44, chronology45);
        long long47 = interval46.toDurationMillis();
        org.joda.time.Period period48 = interval46.toPeriod();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime33.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.minuteOfHour();
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        long long62 = interval61.toDurationMillis();
        org.joda.time.Period period63 = interval61.toPeriod();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime50.withPeriodAdded((org.joda.time.ReadablePeriod) period63, 10);
        org.joda.time.DateTime dateTime68 = dateTime66.plusDays(2022);
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter72.withOffsetParsed();
        java.lang.Integer int74 = dateTimeFormatter72.getPivotYear();
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale76);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withPeriodAdded(readablePeriod79, (int) '#');
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.minuteOfHour();
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.minuteOfHour();
        boolean boolean86 = calendar77.after((java.lang.Object) localDateTime83);
        org.joda.time.Chronology chronology87 = localDateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.year();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter72.withChronology(chronology87);
        org.joda.time.DurationField durationField92 = chronology87.seconds();
        org.joda.time.DateTime dateTime93 = dateTime71.withChronology(chronology87);
        org.joda.time.Interval interval94 = interval18.withChronology(chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime71 and dateTime93", (dateTime71.compareTo(dateTime93) == 0) == dateTime71.equals(dateTime93));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        int int9 = dateMidnight8.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        int int12 = dateMidnight8.get(dateTimeFieldType11);
        java.lang.Object obj13 = null;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        boolean boolean25 = calendar16.after((java.lang.Object) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj13, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType11.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField33", (durationField28.compareTo(durationField33) == 0) == durationField28.equals(durationField33));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        boolean boolean4 = interval2.containsNow();
        boolean boolean5 = interval2.isBeforeNow();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) 10, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.withField(dateTimeFieldType11, 2022);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        long long24 = interval23.toDurationMillis();
        org.joda.time.Period period25 = interval23.toPeriod();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime10.minus((org.joda.time.ReadablePeriod) period25);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays(1);
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime.Property property37 = dateTime34.weekOfWeekyear();
        boolean boolean38 = calendar30.after((java.lang.Object) dateTime34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime34.toDateTime(chronology39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean42 = interval2.contains((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean43 = interval2.isAfterNow();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime51 = dateTime48.withField(dateTimeFieldType49, 2022);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.minuteOfHour();
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval(obj59, chronology60);
        long long62 = interval61.toDurationMillis();
        org.joda.time.Period period63 = interval61.toPeriod();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime48.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime65.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime68 = dateTime65.minusMillis(52810033);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Locale locale70 = locale69.stripExtensions();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale70);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withPeriodAdded(readablePeriod73, (int) '#');
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfDay();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.minuteOfHour();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.minuteOfHour();
        boolean boolean80 = calendar71.after((java.lang.Object) localDateTime77);
        org.joda.time.Chronology chronology81 = localDateTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.year();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology81.getZone();
        org.joda.time.DateTime dateTime85 = dateTime65.withChronology(chronology81);
        org.joda.time.DateTime dateTime86 = dateTime85.toDateTime();
        org.joda.time.Interval interval87 = interval2.withStart((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime85", (dateTime10.compareTo(dateTime85) == 0) == dateTime10.equals(dateTime85));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.minuteOfHour();
        boolean boolean14 = calendar5.after((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        boolean boolean17 = dateTimeFieldType2.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 10, (long) 358, chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField22", (durationField18.compareTo(durationField22) == 0) == durationField18.equals(durationField22));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology19.centuries();
        org.joda.time.DateTime dateTime28 = dateTime5.toDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear(12);
        int int34 = dateTime33.getMillisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTimeISO();
        int int38 = mutableDateTime37.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int40 = mutableDateTime37.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTime dateTime43 = dateTime28.withChronology(chronology41);
        int int44 = dateTime43.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime28", (dateTime5.compareTo(dateTime28) == 0) == dateTime5.equals(dateTime28));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus(readableDuration4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withFieldAdded(durationFieldType6, 0);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight3.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = localDateTime19.isSupported(dateTimeFieldType22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight13.withField(dateTimeFieldType22, 0);
        java.lang.String str26 = dateTimeFieldType22.getName();
        int int27 = dateMidnight1.get(dateTimeFieldType22);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight1.withYearOfEra(53);
        org.joda.time.Instant instant30 = dateMidnight29.toInstant();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight29 and instant30", (dateMidnight29.compareTo(instant30) == 0) == dateMidnight29.equals(instant30));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury(12);
        org.joda.time.Interval interval10 = dateMidnight4.toInterval();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, (int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        boolean boolean23 = calendar14.after((java.lang.Object) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.year();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.hourOfHalfday();
        org.joda.time.Interval interval32 = interval10.withChronology(chronology24);
        org.joda.time.DurationField durationField33 = chronology24.eras();
        org.joda.time.DurationField durationField34 = chronology24.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField34, and durationField33", !(durationField33.compareTo(durationField34) == 0) || (Math.signum(durationField33.compareTo(durationField33)) == Math.signum(durationField34.compareTo(durationField33))));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis(52810033);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime21.withChronology(chronology37);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTime();
        int int43 = dateTime42.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime42", (dateTime4.compareTo(dateTime42) == 0) == dateTime4.equals(dateTime42));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) 12);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.centuryOfEra();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, (int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        boolean boolean23 = calendar14.after((java.lang.Object) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.months();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long32 = dateTimeZone28.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis((int) (short) 10);
        boolean boolean42 = dateTimeZone28.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.plusMinutes((int) (short) 1);
        long long46 = chronology24.set((org.joda.time.ReadablePartial) localDateTime44, (long) 32);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology24.hourOfDay();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(1644572920123L, chronology24);
        org.joda.time.DateTime dateTime50 = dateMidnight9.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField51 = chronology24.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and dateTime50", (dateMidnight9.compareTo(dateTime50) == 0) == dateMidnight9.equals(dateTime50));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        java.lang.String str31 = locale29.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        int int10 = property9.getMinimumValue();
        java.lang.String str11 = property9.getAsShortText();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        boolean boolean16 = localDateTime14.isSupported(durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMillis(52816456);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekOfWeekyear(7);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DurationField durationField28 = durationFieldType26.getField(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withFieldAdded(durationFieldType26, 35268191);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withFieldAdded(durationFieldType26, (int) (short) -1);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        boolean boolean45 = calendar36.after((java.lang.Object) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1, chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DurationField durationField54 = chronology46.centuries();
        org.joda.time.DurationField durationField55 = durationFieldType26.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField56 = chronology46.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField55", (durationField28.compareTo(durationField55) == 0) == durationField28.equals(durationField55));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology12);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusYears(14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int27 = dateTimeZone19.getOffsetFromLocal((long) 4);
        int int29 = dateTimeZone19.getOffset((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight14.toMutableDateTime(dateTimeZone19);
        long long33 = dateTimeZone19.convertLocalToUTC(106460568212L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight14 and mutableDateTime30", (dateMidnight14.compareTo(mutableDateTime30) == 0) == dateMidnight14.equals(mutableDateTime30));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        int int48 = calendar2.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime46", (dateTime25.compareTo(dateTime46) == 0) == dateTime25.equals(dateTime46));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime2.toMutableDateTime();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        long long30 = interval29.toDurationMillis();
        org.joda.time.Period period31 = interval29.toPeriod();
        java.lang.String str32 = period31.toString();
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period31, (long) (byte) 100, 0);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minus(readableDuration55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 100, chronology70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        java.lang.String str77 = period76.toString();
        long long80 = chronology70.add((org.joda.time.ReadablePeriod) period76, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight56.minus((org.joda.time.ReadablePeriod) period76);
        int[] intArray84 = chronology48.get((org.joda.time.ReadablePeriod) period76, (long) 47, 3801600000L);
        long long87 = chronology25.add((org.joda.time.ReadablePeriod) period76, (-363119994L), 19);
        org.joda.time.DateTime dateTime88 = dateTime2.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField89 = chronology25.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime88", (dateTime2.compareTo(dateTime88) == 0) == dateTime2.equals(dateTime88));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        boolean boolean3 = interval2.containsNow();
        org.joda.time.DateTime dateTime4 = interval2.getStart();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(1);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.weekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withChronology(chronology11);
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DurationField durationField23 = durationFieldType21.getField(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withFieldAdded(durationFieldType21, 35268191);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean30 = localDateTime26.isSupported(dateTimeFieldType29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight25.property(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        boolean boolean48 = durationFieldType32.isSupported(chronology45);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DurationField durationField50 = durationFieldType15.getField(chronology45);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight12.withChronology(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime49", (dateTime4.compareTo(dateTime49) == 0) == dateTime4.equals(dateTime49));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfEra(6);
        java.lang.Object obj9 = null;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj9, chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField29 = chronology22.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.withDayOfYear(100);
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(11);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(9);
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime9.plusDays(999);
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        boolean boolean19 = instant17.isBefore(1644572920123L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        java.util.Date date23 = dateTime22.toDate();
        int int24 = date23.getYear();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date23);
        org.joda.time.LocalDate localDate27 = localDate25.withYear(1970);
        org.joda.time.LocalDate localDate29 = localDate27.plusWeeks(46);
        org.joda.time.Interval interval30 = localDate29.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate35.toDateTimeAtStartOfDay(dateTimeZone40);
        int int44 = dateTimeZone40.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime45 = localDate29.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) 1644572920123L, dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        int int4 = localTime3.size();
        int int5 = localTime3.getMillisOfDay();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        long long9 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval8.toPeriod(periodType10);
        int int12 = period11.size();
        org.joda.time.LocalTime localTime14 = localTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 358);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 10, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(12);
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(52798648);
        org.joda.time.DateTime dateTime28 = dateTime19.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime19.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime28", (dateTime19.compareTo(dateTime28) == 0) == dateTime19.equals(dateTime28));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.withDayOfYear(100);
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime4.withMillisOfDay(32769);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        boolean boolean26 = calendar17.after((java.lang.Object) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        boolean boolean29 = dateTimeFieldType14.isSupported(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.weekyears();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 10, (long) 358, chronology27);
        org.joda.time.DateTime dateTime33 = dateTime11.toDateTime(chronology27);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime33", (dateTime11.compareTo(dateTime33) == 0) == dateTime11.equals(dateTime33));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfDay(35268191);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) 48, (int) (short) 0);
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.DateTime.Property property18 = dateTime16.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime2.minusHours(9);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime2.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus(readableDuration4);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        long long24 = interval23.toDurationMillis();
        org.joda.time.Period period25 = interval23.toPeriod();
        java.lang.String str26 = period25.toString();
        long long29 = chronology19.add((org.joda.time.ReadablePeriod) period25, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight5.minus((org.joda.time.ReadablePeriod) period25);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, (int) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        boolean boolean42 = calendar33.after((java.lang.Object) localDateTime39);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight30, chronology43);
        java.lang.Object obj46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval(obj46, chronology47);
        boolean boolean49 = interval48.containsNow();
        org.joda.time.DateTime dateTime50 = interval48.getStart();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusDays(1);
        org.joda.time.DateTime dateTime54 = localDateTime53.toDateTime();
        org.joda.time.DateMidnight dateMidnight55 = dateTime54.toDateMidnight();
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.weekyear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withChronology(chronology57);
        boolean boolean59 = interval48.isBefore((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = interval48.withDurationBeforeEnd(readableDuration60);
        org.joda.time.Period period62 = interval48.toPeriod();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight30.minus((org.joda.time.ReadablePeriod) period62);
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale65);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withPeriodAdded(readablePeriod68, (int) '#');
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.minuteOfHour();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.minuteOfHour();
        boolean boolean75 = calendar66.after((java.lang.Object) localDateTime72);
        org.joda.time.Chronology chronology76 = localDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        org.joda.time.DurationField durationField78 = chronology76.hours();
        org.joda.time.DateTimeField dateTimeField79 = chronology76.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.hourOfHalfday();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology76);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000");
        java.lang.String str85 = dateTime81.toString("880", locale84);
        org.joda.time.Instant instant86 = dateTime81.toInstant();
        boolean boolean87 = period62.equals((java.lang.Object) instant86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime81", (dateTime50.compareTo(dateTime81) == 0) == dateTime50.equals(dateTime81));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval(obj5, chronology6);
        boolean boolean8 = interval7.containsNow();
        org.joda.time.DateTime dateTime9 = interval7.getStart();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(1);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withChronology(chronology16);
        boolean boolean18 = interval7.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTime dateTime19 = interval7.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) '#');
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        int[] intArray33 = localDateTime29.getValues();
        boolean boolean34 = dateTimeZone28.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(dateTimeZone28);
        java.lang.String str36 = dateTimeFormatter25.print((org.joda.time.ReadableInstant) dateMidnight35);
        java.util.Locale locale37 = dateTimeFormatter25.getLocale();
        java.util.Calendar calendar38 = dateTime19.toCalendar(locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        boolean boolean40 = calendar38.after((java.lang.Object) dateTimeFormatter39);
        java.lang.String str41 = dateTime2.toString(dateTimeFormatter39);
        org.joda.time.DateTime dateTime43 = dateTime2.plus(367920042L);
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1, chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.year();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 10, chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime70 = dateTime67.withField(dateTimeFieldType68, 2022);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withPeriodAdded(readablePeriod72, (int) '#');
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.minuteOfHour();
        java.lang.Object obj78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval(obj78, chronology79);
        long long81 = interval80.toDurationMillis();
        org.joda.time.Period period82 = interval80.toPeriod();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime76.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.DateTime dateTime84 = dateTime67.minus((org.joda.time.ReadablePeriod) period82);
        java.lang.String str85 = period82.toString();
        int[] intArray88 = chronology58.get((org.joda.time.ReadablePeriod) period82, (long) 'a', 0L);
        org.joda.time.DurationField durationField89 = chronology58.halfdays();
        org.joda.time.DurationField durationField90 = chronology58.centuries();
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(1644572928852L, chronology58);
        org.joda.time.DateTime dateTime92 = dateTime43.toDateTime(chronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar48", (calendar38.compareTo(calendar48) == 0) == calendar38.equals(calendar48));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime4.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(255);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime14", (dateTime11.compareTo(dateTime14) == 0) == dateTime11.equals(dateTime14));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra(139);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(52840);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology13.centuries();
        org.joda.time.DurationField durationField19 = chronology13.hours();
        org.joda.time.DurationField durationField20 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField18, and durationField19", !(durationField20.compareTo(durationField18) == 0) || (Math.signum(durationField20.compareTo(durationField19)) == Math.signum(durationField18.compareTo(durationField19))));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property2.addToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate6 = localDate4.plusYears((int) '4');
        int int7 = localDate4.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(604800000L);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime17 = dateTime14.plus(363120097L);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime dateTime21 = dateTime17.withField(dateTimeFieldType19, 72);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale23.getDisplayVariant();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str27 = locale23.toLanguageTag();
        java.util.Calendar calendar28 = dateTime21.toCalendar(locale23);
        java.lang.String str29 = dateTimeZone10.getName((long) 880, locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime11", (dateTime8.compareTo(dateTime11) == 0) == dateTime8.equals(dateTime11));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight4.getZone();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight4.toMutableDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(1);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime16.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property22 = dateTime16.minuteOfHour();
        org.joda.time.DateTime.Property property23 = dateTime16.weekOfWeekyear();
        int int24 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(13);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 22, dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset(1644936203564L);
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime25.plusWeeks(97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime34", (dateTime3.compareTo(dateTime34) == 0) == dateTime3.equals(dateTime34));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds(13);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        boolean boolean22 = dateTime6.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long29 = dateTimeZone25.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusMillis((int) (short) 10);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long41 = dateTimeZone25.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology42 = chronology19.withZone(dateTimeZone25);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.minuteOfHour();
        boolean boolean54 = calendar45.after((java.lang.Object) localDateTime51);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        org.joda.time.DurationField durationField57 = chronology55.hours();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.hourOfHalfday();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withPeriodAdded(readablePeriod64, (int) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.minuteOfHour();
        boolean boolean71 = calendar62.after((java.lang.Object) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withYear(35268191);
        int int74 = localDateTime68.getMonthOfYear();
        java.lang.Object obj75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval(obj75, chronology76);
        boolean boolean78 = interval77.containsNow();
        org.joda.time.DateTime dateTime79 = interval77.getStart();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusDays(1);
        org.joda.time.DateTime dateTime83 = localDateTime82.toDateTime();
        org.joda.time.DateMidnight dateMidnight84 = dateTime83.toDateMidnight();
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.weekyear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight84.withChronology(chronology86);
        boolean boolean88 = interval77.isBefore((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Interval interval90 = interval77.withDurationBeforeEnd(readableDuration89);
        org.joda.time.Period period91 = interval77.toPeriod();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime68.withPeriodAdded((org.joda.time.ReadablePeriod) period91, 52814315);
        int[] intArray96 = chronology55.get((org.joda.time.ReadablePeriod) period91, (long) 1439, 1644572898864L);
        int[] intArray99 = chronology19.get((org.joda.time.ReadablePeriod) period91, (long) 52907950, 1857399360000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField21 and durationField57", Math.signum(durationField21.compareTo(durationField57)) == -Math.signum(durationField57.compareTo(durationField21)));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        long long3 = interval2.toDurationMillis();
        java.lang.Object obj4 = null;
        boolean boolean5 = interval2.equals(obj4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withFieldAdded(durationFieldType10, 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded(readableDuration13, 0);
        org.joda.time.Interval interval16 = interval2.withStart((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval16.withDurationBeforeEnd(readableDuration17);
        boolean boolean20 = interval18.isAfter((long) 8);
        boolean boolean22 = interval18.isBefore((long) 19);
        org.joda.time.DateTime dateTime23 = interval18.getStart();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1644606480000L, chronology37);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone45);
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = dateTimeZone45.getOffset(readableInstant49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight40.toMutableDateTime(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight40.withWeekyear((-9902));
        boolean boolean54 = interval18.equals((java.lang.Object) dateMidnight53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight40 and mutableDateTime51", (dateMidnight40.compareTo(mutableDateTime51) == 0) == dateMidnight40.equals(mutableDateTime51));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra(139);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((-17522));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        long long29 = dateTimeZone21.previousTransition(1644572913799L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean21 = localDateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withField(dateTimeFieldType20, 0);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((long) '#');
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withPeriodAdded(readablePeriod31, (int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        boolean boolean38 = calendar29.after((java.lang.Object) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.weeks();
        org.joda.time.Chronology chronology42 = chronology39.withUTC();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfYear();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateTime dateTime47 = dateMidnight25.toDateTime(chronology42);
        org.joda.time.DurationField durationField48 = chronology42.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight11 and dateTime47", (dateMidnight11.compareTo(dateTime47) == 0) == dateMidnight11.equals(dateTime47));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        boolean boolean27 = dateTimeFieldType12.isSupported(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology25);
        org.joda.time.DurationField durationField31 = chronology25.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean21 = localDateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withField(dateTimeFieldType20, 0);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight11.plus((long) 292);
        org.joda.time.Instant instant26 = dateMidnight11.toInstant();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.minusYears(52998822);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight11 and instant26", (dateMidnight11.compareTo(instant26) == 0) == dateMidnight11.equals(instant26));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime4.minusMillis(1970);
        org.joda.time.DateTime dateTime25 = dateTime4.plusWeeks((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.joda.time.DateTime dateTime28 = property26.roundCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        org.joda.time.DurationField durationField50 = chronology42.eras();
        org.joda.time.DateTime dateTime51 = dateTime28.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField52 = chronology42.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime51", (dateTime28.compareTo(dateTime51) == 0) == dateTime28.equals(dateTime51));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.010Z");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        int[] intArray10 = localDateTime6.getValues();
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYearOfCentury((int) ' ');
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withWeekOfWeekyear(20);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        java.util.Date date21 = dateTime20.toDate();
        org.joda.time.DateTime dateTime23 = dateTime20.withYearOfEra(1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, (int) '#');
        int[] intArray31 = localDateTime27.getValues();
        boolean boolean32 = dateTimeZone26.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfFloorCopy();
        int int35 = localDateTime34.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        int[] intArray43 = localDateTime39.getValues();
        boolean boolean44 = dateTimeZone38.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear(900);
        java.lang.Object obj52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(obj52, chronology53);
        boolean boolean55 = interval54.containsNow();
        org.joda.time.Duration duration56 = interval54.toDuration();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration56, 32769);
        org.joda.time.DateTime dateTime60 = dateTime23.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight17.withDurationAdded((org.joda.time.ReadableDuration) duration56, 52833543);
        org.joda.time.DateTime dateTime64 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration56, 538);
        org.joda.time.DateTime dateTime66 = dateTime1.minusMinutes(52962);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime1", (dateTime20.compareTo(dateTime1) == 0) == dateTime20.equals(dateTime1));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(dateTimeZone3);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight15 = property12.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(1);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withYearOfCentury(12);
        org.joda.time.Interval interval27 = dateMidnight21.toInterval();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.hourOfHalfday();
        org.joda.time.Interval interval49 = interval27.withChronology(chronology41);
        org.joda.time.DurationField durationField50 = chronology41.weeks();
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight16.toMutableDateTime(chronology41);
        java.lang.String str52 = dateMidnight16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime51", (dateMidnight16.compareTo(mutableDateTime51) == 0) == dateMidnight16.equals(mutableDateTime51));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime4.minusMillis(1970);
        org.joda.time.DateTime dateTime25 = dateTime4.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.010Z");
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        int[] intArray36 = localDateTime32.getValues();
        boolean boolean37 = dateTimeZone31.isLocalDateTimeGap(localDateTime32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.withYearOfCentury((int) ' ');
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withWeekOfWeekyear(20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        java.util.Date date47 = dateTime46.toDate();
        org.joda.time.DateTime dateTime49 = dateTime46.withYearOfEra(1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, (int) '#');
        int[] intArray57 = localDateTime53.getValues();
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalDateTime.Property property59 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfFloorCopy();
        int int61 = localDateTime60.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, (int) '#');
        int[] intArray69 = localDateTime65.getValues();
        boolean boolean70 = dateTimeZone64.isLocalDateTimeGap(localDateTime65);
        org.joda.time.LocalDateTime.Property property71 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime74 = property73.withMaximumValue();
        org.joda.time.DateTime dateTime75 = localDateTime74.toDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withYear(900);
        java.lang.Object obj78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval(obj78, chronology79);
        boolean boolean81 = interval80.containsNow();
        org.joda.time.Duration duration82 = interval80.toDuration();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.minus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime60.withDurationAdded((org.joda.time.ReadableDuration) duration82, 32769);
        org.joda.time.DateTime dateTime86 = dateTime49.plus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration82, 52833543);
        org.joda.time.DateTime dateTime90 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration82, 538);
        org.joda.time.DateTime dateTime92 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration82, 2941038);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime27", (dateTime2.compareTo(dateTime27) == 0) == dateTime2.equals(dateTime27));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime2.minusHours(9);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime2.withChronology(chronology23);
        org.joda.time.DateTime dateTime28 = dateTime2.withYearOfEra(53064487);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(1);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateMidnight dateMidnight5 = dateTime4.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withChronology(chronology7);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight5.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(6L, chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight5 and mutableDateTime30", (dateMidnight5.compareTo(mutableDateTime30) == 0) == dateMidnight5.equals(mutableDateTime30));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight.Property property10 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withDurationAdded(363120999L, 363120000);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded(0L, 1970);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(23);
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(dateTimeZone18);
        int int21 = dateTimeZone18.getOffsetFromLocal(127315663200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight13 and dateTime19", (dateMidnight13.compareTo(dateTime19) == 0) == dateMidnight13.equals(dateTime19));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.lang.Object obj0 = null;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.minuteOfHour();
        boolean boolean14 = calendar5.after((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) 1644572872597L, chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(obj0, chronology15);
        org.joda.time.DurationField durationField24 = chronology15.weeks();
        org.joda.time.DurationField durationField25 = chronology15.seconds();
        org.joda.time.DurationField durationField26 = chronology15.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField24, and durationField25", !(durationField26.compareTo(durationField24) == 0) || (Math.signum(durationField26.compareTo(durationField25)) == Math.signum(durationField24.compareTo(durationField25))));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField19 and durationField22", Math.signum(durationField19.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField19)));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.010Z");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        int[] intArray10 = localDateTime6.getValues();
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYearOfCentury((int) ' ');
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withWeekOfWeekyear(20);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        java.util.Date date21 = dateTime20.toDate();
        org.joda.time.DateTime dateTime23 = dateTime20.withYearOfEra(1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, (int) '#');
        int[] intArray31 = localDateTime27.getValues();
        boolean boolean32 = dateTimeZone26.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfFloorCopy();
        int int35 = localDateTime34.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        int[] intArray43 = localDateTime39.getValues();
        boolean boolean44 = dateTimeZone38.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear(900);
        java.lang.Object obj52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval(obj52, chronology53);
        boolean boolean55 = interval54.containsNow();
        org.joda.time.Duration duration56 = interval54.toDuration();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration56, 32769);
        org.joda.time.DateTime dateTime60 = dateTime23.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight17.withDurationAdded((org.joda.time.ReadableDuration) duration56, 52833543);
        org.joda.time.DateTime dateTime64 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration56, 538);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(52851532);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime64 and dateTime20", (dateTime64.compareTo(dateTime20) == 0) == dateTime64.equals(dateTime20));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        long long33 = interval32.toDurationMillis();
        org.joda.time.Period period34 = interval32.toPeriod();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime37 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(2022);
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Integer int45 = dateTimeFormatter43.getPivotYear();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.seconds();
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology58);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(locale67);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withPeriodAdded(readablePeriod70, (int) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.minuteOfHour();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.minuteOfHour();
        boolean boolean77 = calendar68.after((java.lang.Object) localDateTime74);
        org.joda.time.Chronology chronology78 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 12, chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYear(32769);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int83 = localDateTime81.get(dateTimeFieldType82);
        org.joda.time.DateTime.Property property84 = dateTime64.property(dateTimeFieldType82);
        org.joda.time.Interval interval85 = property84.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.minuteOfHour();
        boolean boolean14 = calendar5.after((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        boolean boolean17 = dateTimeFieldType2.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 10, (long) 358, chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.minuteOfHour();
        org.joda.time.DurationField durationField23 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField23", (durationField18.compareTo(durationField23) == 0) == durationField18.equals(durationField23));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(32);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight13.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight13.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = localDateTime29.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight23.withField(dateTimeFieldType32, 0);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((long) '#');
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusWeeks(0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDurationAdded((long) 'a', 362);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight37.withWeekyear(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        boolean boolean60 = dateTimeFieldType45.isSupported(chronology58);
        org.joda.time.DateMidnight.Property property61 = dateMidnight37.property(dateTimeFieldType45);
        org.joda.time.DateTime.Property property62 = dateTime11.property(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType45.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime11", (dateTime6.compareTo(dateTime11) == 0) == dateTime6.equals(dateTime11));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 13);
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone2);
        java.lang.String str6 = dateMidnight5.toString();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plusDays(2008);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        int int16 = localDateTime14.getMillisOfDay();
        int[] intArray17 = localDateTime14.getValues();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((int) (short) 1);
        int int23 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds(5);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(1);
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withEra(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusDays(1);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.DateMidnight dateMidnight41 = dateTime40.toDateMidnight();
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.weekyear();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withYearOfCentury(12);
        org.joda.time.Interval interval47 = dateMidnight41.toInterval();
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        boolean boolean52 = interval51.containsNow();
        org.joda.time.Duration duration53 = interval51.toDuration();
        org.joda.time.Interval interval54 = interval47.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime56 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration53, 11);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime28.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime14.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration53);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withPeriodAdded(readablePeriod64, (int) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.minuteOfHour();
        boolean boolean71 = calendar62.after((java.lang.Object) localDateTime68);
        org.joda.time.Chronology chronology72 = localDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.year();
        org.joda.time.DurationField durationField74 = chronology72.hours();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.hourOfHalfday();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField78 = chronology72.weekyear();
        org.joda.time.DateTime dateTime79 = dateMidnight5.toDateTime(chronology72);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(obj0, chronology72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight5 and dateTime79", (dateMidnight5.compareTo(dateTime79) == 0) == dateMidnight5.equals(dateTime79));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(1);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (short) -1);
        boolean boolean14 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime11);
        java.lang.String str15 = interval6.toString();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        boolean boolean19 = interval18.containsNow();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        boolean boolean29 = interval18.isBefore((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval18.withDurationBeforeEnd(readableDuration30);
        boolean boolean32 = interval6.overlaps((org.joda.time.ReadableInterval) interval18);
        long long33 = interval18.getEndMillis();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays(1);
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        int int39 = dateTime37.getWeekyear();
        org.joda.time.DateTime.Property property40 = dateTime37.weekOfWeekyear();
        org.joda.time.DateTime.Property property41 = dateTime37.yearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime37.toDateTimeISO();
        org.joda.time.Interval interval43 = interval18.withEnd((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusDays(1);
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime53 = dateTime48.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property54 = dateTime48.minuteOfHour();
        org.joda.time.DateTime.Property property55 = dateTime48.weekOfWeekyear();
        org.joda.time.DateTime dateTime57 = dateTime48.withMillisOfDay(35268191);
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded((long) 48, (int) (short) 0);
        org.joda.time.Instant instant61 = dateTime60.toInstant();
        boolean boolean62 = interval43.contains((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Duration duration63 = interval43.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime57 and instant61", (dateTime57.compareTo(instant61) == 0) == dateTime57.equals(instant61));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        int int9 = dateMidnight8.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        int int12 = dateMidnight8.get(dateTimeFieldType11);
        java.lang.Object obj13 = null;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        boolean boolean25 = calendar16.after((java.lang.Object) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj13, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType11.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField33", (durationField28.compareTo(durationField33) == 0) == durationField28.equals(durationField33));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfCentury();
        int int32 = dateTime27.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime27.withDayOfYear((int) (short) 10);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1644606480000L, chronology13);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight16.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight16.withWeekyear((-9902));
        org.joda.time.DateMidnight.Property property30 = dateMidnight16.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight16 and mutableDateTime27", (dateMidnight16.compareTo(mutableDateTime27) == 0) == dateMidnight16.equals(mutableDateTime27));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.withField(dateTimeFieldType12, 86399999);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(17520);
        boolean boolean17 = dateTime14.isAfterNow();
        boolean boolean19 = dateTime14.isEqual((long) 292278993);
        org.joda.time.DateTime.Property property20 = dateTime14.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        boolean boolean33 = calendar24.after((java.lang.Object) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DurationField durationField36 = chronology34.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) 1648892896655L, chronology34);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        org.joda.time.MutableDateTime mutableDateTime45 = instant44.toMutableDateTime();
        int int46 = dateTime14.compareTo((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and mutableDateTime45", (dateTime43.compareTo(mutableDateTime45) == 0) == dateTime43.equals(mutableDateTime45));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withChronology(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (int) '#');
        int[] intArray15 = localDateTime11.getValues();
        boolean boolean16 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property17.getFieldType();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.withField(dateTimeFieldType19, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays(1);
        org.joda.time.DateTime dateTime25 = localDateTime24.toDateTime();
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = property27.addToCopy((long) (short) 0);
        int int30 = dateMidnight4.compareTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight4.year();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.era();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = dateMidnight33.toString("14:40:27.523", locale36);
        java.lang.String str38 = property31.getAsText(locale36);
        org.joda.time.DateMidnight dateMidnight39 = property31.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.withDayOfYear(97);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays(1);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.DateTime dateTime46 = dateTime45.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime51 = dateTime46.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property52 = dateTime46.minuteOfHour();
        org.joda.time.DateTime.Property property53 = dateTime46.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = dateTime46.withMillisOfDay(35268191);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long62 = dateTimeZone58.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(0L, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = localDateTime67.isSupported(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusMillis((int) (short) 10);
        boolean boolean72 = dateTimeZone58.isLocalDateTimeGap(localDateTime67);
        long long74 = dateTimeZone58.convertUTCToLocal(0L);
        int int76 = dateTimeZone58.getOffset((long) 35268191);
        java.lang.String str78 = dateTimeZone58.getNameKey((long) 70);
        org.joda.time.DateTime dateTime79 = dateTime55.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight41.withZoneRetainFields(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime79", (dateTime55.compareTo(dateTime79) == 0) == dateTime55.equals(dateTime79));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        int[] intArray12 = localDateTime8.getValues();
        boolean boolean13 = dateTimeZone7.isLocalDateTimeGap(localDateTime8);
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        java.lang.String str18 = date16.toGMTString();
        int int19 = date16.getTimezoneOffset();
        int int20 = date16.getDay();
        int int21 = date16.getHours();
        calendar4.setTime(date16);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        calendar25.setMinimalDaysInFirstWeek(7);
        long long28 = calendar25.getTimeInMillis();
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval(obj29, chronology30);
        boolean boolean32 = interval31.containsNow();
        org.joda.time.DateTime dateTime33 = interval31.getStart();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays(1);
        org.joda.time.DateTime dateTime37 = localDateTime36.toDateTime();
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.weekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withChronology(chronology40);
        boolean boolean42 = interval31.isBefore((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateTime dateTime43 = interval31.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withPivotYear((int) '#');
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale locale48 = locale47.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter46.withLocale(locale48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, (int) '#');
        int[] intArray57 = localDateTime53.getValues();
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(dateTimeZone52);
        java.lang.String str60 = dateTimeFormatter49.print((org.joda.time.ReadableInstant) dateMidnight59);
        java.util.Locale locale61 = dateTimeFormatter49.getLocale();
        java.util.Calendar calendar62 = dateTime43.toCalendar(locale61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        boolean boolean64 = calendar62.after((java.lang.Object) dateTimeFormatter63);
        java.util.TimeZone timeZone65 = calendar62.getTimeZone();
        calendar25.setTimeZone(timeZone65);
        calendar4.setTimeZone(timeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar25", (calendar3.compareTo(calendar25) == 0) == calendar3.equals(calendar25));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        boolean boolean15 = dateTimeFieldType0.isSupported(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.hours();
        org.joda.time.DurationField durationField17 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(4, 0);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay(7, 69, 32770);
        java.util.Calendar.Builder builder11 = builder7.setTimeOfDay(2922789, (int) (short) -1, 4);
        java.util.Calendar.Builder builder13 = builder7.setLenient(true);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.clear();
        calendar16.roll(363120000, (int) (short) 0);
        int int21 = calendar16.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        calendar16.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder30 = builder13.setTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long37 = dateTimeZone33.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusMillis((int) (short) 10);
        boolean boolean47 = dateTimeZone33.isLocalDateTimeGap(localDateTime42);
        long long49 = dateTimeZone33.convertUTCToLocal(0L);
        int int51 = dateTimeZone33.getOffset((long) 35268191);
        java.lang.String str52 = dateTimeZone33.toString();
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withPeriodAdded(readablePeriod63, (int) '#');
        int[] intArray66 = localDateTime62.getValues();
        boolean boolean67 = dateTimeZone61.isLocalDateTimeGap(localDateTime62);
        int int69 = dateTimeZone61.getOffsetFromLocal((long) 4);
        java.util.Locale locale72 = new java.util.Locale("");
        java.lang.String str73 = dateTimeZone61.getName((long) 9, locale72);
        java.lang.String str74 = locale58.getDisplayLanguage(locale72);
        java.lang.String str75 = locale54.getDisplayCountry(locale72);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusDays(1);
        org.joda.time.DateTime dateTime79 = localDateTime78.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime79.withEarlierOffsetAtOverlap();
        int int81 = dateTime79.getWeekyear();
        org.joda.time.DateTime.Property property82 = dateTime79.weekOfWeekyear();
        java.util.Locale locale84 = new java.util.Locale("");
        java.lang.String str85 = locale84.getDisplayLanguage();
        int int86 = property82.getMaximumShortTextLength(locale84);
        java.lang.String str87 = locale72.getDisplayVariant(locale84);
        java.util.Locale locale88 = java.util.Locale.ENGLISH;
        java.lang.String str89 = locale84.getDisplayName(locale88);
        java.lang.String str90 = dateTimeZone33.getName((long) 2922789, locale84);
        java.lang.String str91 = locale84.getDisplayLanguage();
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone28, locale84);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone28);
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(timeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar92 and calendar93", (calendar92.compareTo(calendar93) == 0) == calendar92.equals(calendar93));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, readableDuration8);
        int int10 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(1L, dateTimeZone15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 32769, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(1L, dateTimeZone22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 32769, dateTimeZone22);
        boolean boolean26 = dateTimeZone22.isStandardOffset((long) 2022);
        org.joda.time.DateTime dateTime27 = localTime17.toDateTimeToday(dateTimeZone22);
        org.joda.time.Chronology chronology28 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfMonth();
        org.joda.time.DateTime dateTime31 = dateTime7.toDateTime(chronology28);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.getNameKey((long) 12);
        java.lang.String str38 = dateTimeZone33.getNameKey((long) 'u');
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.Chronology chronology41 = chronology28.withZone(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime31", (dateTime4.compareTo(dateTime31) == 0) == dateTime4.equals(dateTime31));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long21 = dateTimeZone17.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = localDateTime26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMillis((int) (short) 10);
        boolean boolean31 = dateTimeZone17.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusMinutes((int) (short) 1);
        long long35 = chronology13.set((org.joda.time.ReadablePartial) localDateTime33, (long) 32);
        org.joda.time.DateTimeField dateTimeField36 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField38 = chronology13.eras();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 52862639, chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField38", Math.signum(durationField14.compareTo(durationField38)) == -Math.signum(durationField38.compareTo(durationField14)));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        boolean boolean15 = dateTimeFieldType0.isSupported(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.hours();
        org.joda.time.DurationField durationField17 = chronology13.eras();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (int) '#');
        int[] intArray25 = localDateTime21.getValues();
        boolean boolean26 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfFloorCopy();
        int int29 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        int[] intArray37 = localDateTime33.getValues();
        boolean boolean38 = dateTimeZone32.isLocalDateTimeGap(localDateTime33);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfCentury();
        int int44 = localDateTime42.getMillisOfSecond();
        java.lang.Object obj45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval(obj45, chronology46);
        long long48 = interval47.toDurationMillis();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval47.toPeriod(periodType49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean53 = interval47.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 10, chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime61 = dateTime58.withField(dateTimeFieldType59, 2022);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withPeriodAdded(readablePeriod63, (int) '#');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        long long72 = interval71.toDurationMillis();
        org.joda.time.Period period73 = interval71.toPeriod();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.DateTime dateTime75 = dateTime58.minus((org.joda.time.ReadablePeriod) period73);
        java.lang.String str76 = period73.toString();
        org.joda.time.Interval interval77 = interval47.withPeriodAfterStart((org.joda.time.ReadablePeriod) period73);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period73, (int) 'u');
        int int80 = period73.size();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime28.plus((org.joda.time.ReadablePeriod) period73);
        int int82 = period73.size();
        long long85 = chronology13.add((org.joda.time.ReadablePeriod) period73, (-61788891120000L), 358);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime.Property property7 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = property7.withMinimumValue();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        boolean boolean25 = calendar16.after((java.lang.Object) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 999, chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology26.getZone();
        long long35 = dateTimeZone33.convertUTCToLocal(946684800000L);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(63433187383757L, dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime11.withZone(dateTimeZone33);
        long long39 = dateTimeZone33.nextTransition(1644573059041L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime37", (dateTime5.compareTo(dateTime37) == 0) == dateTime5.equals(dateTime37));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        int int9 = property7.getMaximumValueOverall();
        org.joda.time.DateTime dateTime11 = property7.addToCopy((-11));
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfYear();
        org.joda.time.DurationField durationField30 = chronology25.centuries();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfDay();
        java.lang.String str32 = chronology25.toString();
        org.joda.time.DurationField durationField33 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.minuteOfHour();
        org.joda.time.DurationField durationField35 = chronology25.seconds();
        org.joda.time.DateTime dateTime36 = dateTime11.withChronology(chronology25);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime36", (dateTime11.compareTo(dateTime36) == 0) == dateTime11.equals(dateTime36));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj9, chronology10);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        long long15 = interval14.toDurationMillis();
        java.lang.Object obj16 = null;
        boolean boolean17 = interval14.equals(obj16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus(readableDuration20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withFieldAdded(durationFieldType22, 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withDurationAdded(readableDuration25, 0);
        org.joda.time.Interval interval28 = interval14.withStart((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        java.util.Date date32 = dateTime31.toDate();
        org.joda.time.DateTime dateTime34 = dateTime31.withYearOfEra(1);
        org.joda.time.DateMidnight dateMidnight35 = dateTime31.toDateMidnight();
        org.joda.time.Interval interval36 = interval14.withStart((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = interval36.isBeforeNow();
        boolean boolean38 = interval11.overlaps((org.joda.time.ReadableInterval) interval36);
        boolean boolean40 = interval11.contains((long) 'a');
        org.joda.time.Interval interval42 = interval11.withStartMillis(35270798L);
        org.joda.time.Chronology chronology43 = interval11.getChronology();
        boolean boolean44 = dateTimeZone2.equals((java.lang.Object) chronology43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withDefaultYear(7);
        org.joda.time.format.DateTimeParser dateTimeParser49 = dateTimeFormatter48.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withZoneUTC();
        boolean boolean51 = dateTimeFormatter48.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter48.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusDays(1);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        org.joda.time.DateMidnight dateMidnight57 = dateTime56.toDateMidnight();
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.weekyear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withChronology(chronology59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withPeriodAdded(readablePeriod65, (int) '#');
        int[] intArray68 = localDateTime64.getValues();
        boolean boolean69 = dateTimeZone63.isLocalDateTimeGap(localDateTime64);
        org.joda.time.LocalDateTime.Property property70 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property70.getFieldType();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight57.withField(dateTimeFieldType72, (int) (short) 10);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale76);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withPeriodAdded(readablePeriod79, (int) '#');
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.minuteOfHour();
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.minuteOfHour();
        boolean boolean86 = calendar77.after((java.lang.Object) localDateTime83);
        org.joda.time.Chronology chronology87 = localDateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(chronology87);
        org.joda.time.DateTimeField dateTimeField90 = chronology87.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType72.getField(chronology87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter52.withChronology(chronology87);
        org.joda.time.MutableDateTime mutableDateTime93 = dateMidnight45.toMutableDateTime(chronology87);
        org.joda.time.DateTimeField dateTimeField94 = chronology87.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight45 and mutableDateTime93", (dateMidnight45.compareTo(mutableDateTime93) == 0) == dateMidnight45.equals(mutableDateTime93));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        boolean boolean16 = calendar7.after((java.lang.Object) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime(chronology17);
        org.joda.time.DateTime dateTime21 = dateTime4.withTimeAtStartOfDay();
        int int22 = dateTime21.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime4.minusMillis(1970);
        org.joda.time.DateTime dateTime25 = dateTime4.plusWeeks((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.joda.time.DateTime dateTime28 = property26.roundCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        org.joda.time.DurationField durationField50 = chronology42.eras();
        org.joda.time.DateTime dateTime51 = dateTime28.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField52 = chronology42.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime51", (dateTime28.compareTo(dateTime51) == 0) == dateTime28.equals(dateTime51));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean4 = localDateTime0.isSupported(dateTimeFieldType3);
        boolean boolean6 = localDateTime0.equals((java.lang.Object) 10.0f);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusYears(32769);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.months();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology21);
        int int24 = dateMidnight23.getWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minus((long) 14);
        org.joda.time.DateMidnight.Property property27 = dateMidnight23.weekyear();
        org.joda.time.DateTime dateTime28 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear(12);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.plus(readableDuration35);
        int int37 = dateTime36.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.minus(readableDuration38);
        java.lang.Object obj40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval(obj40, chronology41);
        long long43 = interval42.toDurationMillis();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval42.toPeriod(periodType44);
        int int46 = period45.size();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusDays(1);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        org.joda.time.DateMidnight dateMidnight51 = dateTime50.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DurationField durationField54 = durationFieldType52.getField(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight51.withFieldAdded(durationFieldType52, 35268191);
        boolean boolean57 = period45.equals((java.lang.Object) dateMidnight51);
        org.joda.time.DateTime dateTime58 = dateTime36.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withPeriodAdded(readablePeriod60, (int) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getDurationType();
        boolean boolean68 = dateTime58.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays(1);
        org.joda.time.DateTime dateTime72 = localDateTime71.toDateTime();
        org.joda.time.DateMidnight dateMidnight73 = dateTime72.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DurationField durationField76 = durationFieldType74.getField(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight73.withFieldAdded(durationFieldType74, 35268191);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean83 = localDateTime79.isSupported(dateTimeFieldType82);
        org.joda.time.DateMidnight.Property property84 = dateMidnight78.property(dateTimeFieldType82);
        org.joda.time.DateMidnight dateMidnight85 = property84.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plus((long) 607);
        int int88 = dateMidnight87.getHourOfDay();
        int int89 = dateMidnight87.getWeekyear();
        boolean boolean90 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTime.Property property92 = dateTime58.property(dateTimeFieldType91);
        org.joda.time.DateTime.Property property93 = dateTime28.property(dateTimeFieldType91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField54", (durationField22.compareTo(durationField54) == 0) == durationField22.equals(durationField54));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) dateMidnight2);
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours(363120000);
        int int8 = dateTime5.getYearOfEra();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime5.toDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withPeriodAdded(readablePeriod31, (int) '#');
        int[] intArray34 = localDateTime30.getValues();
        boolean boolean35 = dateTimeZone29.isLocalDateTimeGap(localDateTime30);
        org.joda.time.LocalDateTime.Property property36 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMaximumValue();
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear(900);
        java.lang.Object obj43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval(obj43, chronology44);
        boolean boolean46 = interval45.containsNow();
        org.joda.time.Duration duration47 = interval45.toDuration();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime49 = dateTime5.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks(151);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and dateTime26", (dateTime49.compareTo(dateTime26) == 0) == dateTime49.equals(dateTime26));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime13.getEra();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime17 = dateTime13.withFieldAdded(durationFieldType15, 11);
        int int18 = dateTime13.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        java.lang.Integer int21 = dateTimeFormatter19.getPivotYear();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        boolean boolean33 = calendar24.after((java.lang.Object) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter19.withChronology(chronology34);
        org.joda.time.DurationField durationField39 = chronology34.seconds();
        org.joda.time.DateTime dateTime40 = dateTime13.toDateTime(chronology34);
        org.joda.time.DurationField durationField41 = chronology34.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime40", (dateTime13.compareTo(dateTime40) == 0) == dateTime13.equals(dateTime40));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1644606480000L, chronology42);
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(chronology42);
        int int47 = dateTime22.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime46", (dateTime22.compareTo(dateTime46) == 0) == dateTime22.equals(dateTime46));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.minuteOfHour();
        boolean boolean14 = calendar5.after((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        boolean boolean17 = dateTimeFieldType2.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 10, (long) 358, chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField22", (durationField18.compareTo(durationField22) == 0) == durationField18.equals(durationField22));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight4.getZone();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight4.toMutableDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(1);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime16.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property22 = dateTime16.minuteOfHour();
        org.joda.time.DateTime.Property property23 = dateTime16.weekOfWeekyear();
        int int24 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(13);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 22, dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset(1644936203564L);
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property35 = dateTime25.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime34", (dateTime3.compareTo(dateTime34) == 0) == dateTime3.equals(dateTime34));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 13);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(dateTimeZone1);
        java.lang.String str5 = dateMidnight4.toString();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plusDays(2008);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        int int15 = localDateTime13.getMillisOfDay();
        int[] intArray16 = localDateTime13.getValues();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((int) (short) 1);
        int int22 = localDateTime21.getEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds(5);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(1);
        org.joda.time.DateTime dateTime31 = localDateTime30.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.withEra(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays(1);
        org.joda.time.DateTime dateTime39 = localDateTime38.toDateTime();
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekyear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withYearOfCentury(12);
        org.joda.time.Interval interval46 = dateMidnight40.toInterval();
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        java.lang.Object obj48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval(obj48, chronology49);
        boolean boolean51 = interval50.containsNow();
        org.joda.time.Duration duration52 = interval50.toDuration();
        org.joda.time.Interval interval53 = interval46.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime55 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration52, 11);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime27.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime13.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableDuration) duration52);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withPeriodAdded(readablePeriod63, (int) '#');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.minuteOfHour();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.minuteOfHour();
        boolean boolean70 = calendar61.after((java.lang.Object) localDateTime67);
        org.joda.time.Chronology chronology71 = localDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.year();
        org.joda.time.DurationField durationField73 = chronology71.hours();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.hourOfHalfday();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.weekyear();
        org.joda.time.DateTime dateTime78 = dateMidnight4.toDateTime(chronology71);
        org.joda.time.DateTimeZone dateTimeZone79 = chronology71.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight4 and dateTime78", (dateMidnight4.compareTo(dateTime78) == 0) == dateMidnight4.equals(dateTime78));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime48 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long55 = dateTimeZone51.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(0L, dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = localDateTime60.isSupported(dateTimeFieldType61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusMillis((int) (short) 10);
        boolean boolean65 = dateTimeZone51.isLocalDateTimeGap(localDateTime60);
        long long67 = dateTimeZone51.convertUTCToLocal(0L);
        int int69 = dateTimeZone51.getOffset((long) 35268191);
        java.lang.String str71 = dateTimeZone51.getNameKey((long) 70);
        long long74 = dateTimeZone51.adjustOffset(1644572926788L, false);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime25, dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime25", (dateTime46.compareTo(dateTime25) == 0) == dateTime46.equals(dateTime25));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(1);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime5.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime12 = dateTime5.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(255);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) 663, dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime15", (dateTime12.compareTo(dateTime15) == 0) == dateTime12.equals(dateTime15));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(chronology31);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.months();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long53 = dateTimeZone49.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = localDateTime58.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.minusMillis((int) (short) 10);
        boolean boolean63 = dateTimeZone49.isLocalDateTimeGap(localDateTime58);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusMinutes((int) (short) 1);
        long long67 = chronology45.set((org.joda.time.ReadablePartial) localDateTime65, (long) 32);
        org.joda.time.DateTimeField dateTimeField68 = chronology45.minuteOfDay();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime32.toMutableDateTime(chronology45);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime70", (dateTime4.compareTo(mutableDateTime70) == 0) == dateTime4.equals(mutableDateTime70));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime2.toMutableDateTime();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        long long30 = interval29.toDurationMillis();
        org.joda.time.Period period31 = interval29.toPeriod();
        java.lang.String str32 = period31.toString();
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period31, (long) (byte) 100, 0);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minus(readableDuration55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 100, chronology70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        java.lang.String str77 = period76.toString();
        long long80 = chronology70.add((org.joda.time.ReadablePeriod) period76, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight56.minus((org.joda.time.ReadablePeriod) period76);
        int[] intArray84 = chronology48.get((org.joda.time.ReadablePeriod) period76, (long) 47, 3801600000L);
        long long87 = chronology25.add((org.joda.time.ReadablePeriod) period76, (-363119994L), 19);
        org.joda.time.DateTime dateTime88 = dateTime2.toDateTime(chronology25);
        org.joda.time.DurationField durationField89 = chronology25.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime88", (dateTime2.compareTo(dateTime88) == 0) == dateTime2.equals(dateTime88));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfDay(35268191);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) 48, (int) (short) 0);
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant17", (dateTime16.compareTo(instant17) == 0) == dateTime16.equals(instant17));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean21 = localDateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withField(dateTimeFieldType20, 0);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((long) '#');
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withPeriodAdded(readablePeriod31, (int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        boolean boolean38 = calendar29.after((java.lang.Object) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology39.weeks();
        org.joda.time.Chronology chronology42 = chronology39.withUTC();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfYear();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateTime dateTime47 = dateMidnight25.toDateTime(chronology42);
        org.joda.time.DurationField durationField48 = chronology42.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight11 and dateTime47", (dateMidnight11.compareTo(dateTime47) == 0) == dateMidnight11.equals(dateTime47));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfYear((int) (byte) 100);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.millis();
        java.lang.String str26 = chronology21.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime2.toMutableDateTime(chronology21);
        org.joda.time.DurationField durationField28 = chronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime27", (dateTime2.compareTo(mutableDateTime27) == 0) == dateTime2.equals(mutableDateTime27));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology13.weeks();
        org.joda.time.Chronology chronology16 = chronology13.withUTC();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) 362, chronology13);
        org.joda.time.DurationField durationField18 = chronology13.hours();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DurationField durationField20 = chronology13.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField15, and durationField18", !(durationField20.compareTo(durationField15) == 0) || (Math.signum(durationField20.compareTo(durationField18)) == Math.signum(durationField15.compareTo(durationField18))));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 70);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis((int) (short) -1);
        int int4 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime1.withCenturyOfEra(2084);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(1);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateMidnight dateMidnight11 = dateTime10.toDateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withYearOfCentury(12);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        boolean boolean28 = calendar19.after((java.lang.Object) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight16.withChronology(chronology29);
        org.joda.time.DurationField durationField33 = chronology29.weeks();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        boolean boolean45 = calendar36.after((java.lang.Object) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.minus(readableDuration53);
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withPeriodAdded(readablePeriod60, (int) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.minuteOfHour();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.minuteOfHour();
        boolean boolean67 = calendar58.after((java.lang.Object) localDateTime64);
        org.joda.time.Chronology chronology68 = localDateTime64.getChronology();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 100, chronology68);
        java.lang.Object obj70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval(obj70, chronology71);
        long long73 = interval72.toDurationMillis();
        org.joda.time.Period period74 = interval72.toPeriod();
        java.lang.String str75 = period74.toString();
        long long78 = chronology68.add((org.joda.time.ReadablePeriod) period74, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight54.minus((org.joda.time.ReadablePeriod) period74);
        int[] intArray82 = chronology46.get((org.joda.time.ReadablePeriod) period74, (long) 47, 3801600000L);
        int[] intArray85 = chronology29.get((org.joda.time.ReadablePeriod) period74, (long) (short) 100, 1L);
        org.joda.time.DateTimeField dateTimeField86 = chronology29.era();
        org.joda.time.DateTime dateTime87 = dateTime6.toDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime88 = org.joda.time.LocalDateTime.now(chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime87", (dateTime6.compareTo(dateTime87) == 0) == dateTime6.equals(dateTime87));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = localDate1.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        org.joda.time.DateTime dateTime15 = dateTime10.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime10.minusMillis((-17522));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime15", (dateTime10.compareTo(dateTime15) == 0) == dateTime10.equals(dateTime15));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus(readableDuration4);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 100, chronology19);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        long long24 = interval23.toDurationMillis();
        org.joda.time.Period period25 = interval23.toPeriod();
        java.lang.String str26 = period25.toString();
        long long29 = chronology19.add((org.joda.time.ReadablePeriod) period25, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight5.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        boolean boolean32 = property31.isLeap();
        org.joda.time.Interval interval33 = property31.toInterval();
        long long34 = interval33.getEndMillis();
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1, chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.hourOfHalfday();
        org.joda.time.DurationField durationField54 = chronology48.millis();
        org.joda.time.DurationField durationField55 = chronology48.eras();
        org.joda.time.Interval interval56 = interval33.withChronology(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField54 and durationField55", Math.signum(durationField54.compareTo(durationField55)) == -Math.signum(durationField55.compareTo(durationField54)));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, (int) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        boolean boolean13 = calendar4.after((java.lang.Object) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) 1, 363120000L, chronology14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 10, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 2022);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        java.lang.Object obj32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval(obj32, chronology33);
        long long35 = interval34.toDurationMillis();
        org.joda.time.Period period36 = interval34.toPeriod();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime21.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withPeriodAdded(readablePeriod43, (int) '#');
        int[] intArray46 = localDateTime42.getValues();
        boolean boolean47 = dateTimeZone41.isLocalDateTimeGap(localDateTime42);
        org.joda.time.DateTime dateTime48 = dateTime21.withZone(dateTimeZone41);
        boolean boolean49 = interval16.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int50 = dateTime21.getHourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime21.plusMinutes(185);
        org.joda.time.DateTime dateTime53 = dateTime21.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime48", (dateTime53.compareTo(dateTime48) == 0) == dateTime53.equals(dateTime48));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(362);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(880);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        long long16 = interval15.toDurationMillis();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean21 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval15.getStartMillis();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        boolean boolean27 = interval25.containsNow();
        boolean boolean28 = interval15.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration29 = interval15.toDuration();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(1);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime42.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property48 = dateTime42.minuteOfHour();
        org.joda.time.DateTime.Property property49 = dateTime42.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime42.withMillisOfDay(35268191);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long58 = dateTimeZone54.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(0L, dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMillis((int) (short) 10);
        boolean boolean68 = dateTimeZone54.isLocalDateTimeGap(localDateTime63);
        long long70 = dateTimeZone54.convertUTCToLocal(0L);
        int int72 = dateTimeZone54.getOffset((long) 35268191);
        java.lang.String str74 = dateTimeZone54.getNameKey((long) 70);
        org.joda.time.DateTime dateTime75 = dateTime51.withZone(dateTimeZone54);
        boolean boolean76 = dateTimeZone54.isFixed();
        long long78 = dateTimeZone54.previousTransition(19037L);
        org.joda.time.DateTime dateTime79 = dateTime36.toDateTime(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime51 and dateTime75", (dateTime51.compareTo(dateTime75) == 0) == dateTime51.equals(dateTime75));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        int int5 = dateTime3.getWeekyear();
        boolean boolean7 = dateTime3.isBefore((long) 11);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime3.withChronology(chronology21);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime27", (dateTime3.compareTo(dateTime27) == 0) == dateTime3.equals(dateTime27));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.minuteOfHour();
        boolean boolean15 = calendar6.after((java.lang.Object) localDateTime12);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) calendar2, chronology16);
        calendar2.setFirstDayOfWeek(12);
        java.lang.String str21 = calendar2.getCalendarType();
        calendar2.set(4, 52, 52816456);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        boolean boolean31 = calendar2.equals((java.lang.Object) calendar30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar29", (calendar6.compareTo(calendar29) == 0) == calendar6.equals(calendar29));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = localDate1.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(22);
        org.joda.time.DateTime.Property property13 = dateTime10.year();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.minus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays(28);
        org.joda.time.Instant instant22 = dateMidnight21.toInstant();
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateTimeField dateTimeField24 = property13.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight21 and instant22", (dateMidnight21.compareTo(instant22) == 0) == dateMidnight21.equals(instant22));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(362);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(880);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        long long16 = interval15.toDurationMillis();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean21 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval15.getStartMillis();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        boolean boolean27 = interval25.containsNow();
        boolean boolean28 = interval15.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration29 = interval15.toDuration();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.minus(readableDuration42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays(28);
        org.joda.time.Instant instant46 = dateMidnight45.toInstant();
        boolean boolean47 = interval37.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean48 = interval37.containsNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight45 and instant46", (dateMidnight45.compareTo(instant46) == 0) == dateMidnight45.equals(instant46));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(chronology31);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.months();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long53 = dateTimeZone49.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(0L, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = localDateTime58.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.minusMillis((int) (short) 10);
        boolean boolean63 = dateTimeZone49.isLocalDateTimeGap(localDateTime58);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusMinutes((int) (short) 1);
        long long67 = chronology45.set((org.joda.time.ReadablePartial) localDateTime65, (long) 32);
        org.joda.time.DateTimeField dateTimeField68 = chronology45.minuteOfDay();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime32.toMutableDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withPeriodAdded(readablePeriod72, (int) '#');
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.minuteOfHour();
        java.lang.Object obj78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval(obj78, chronology79);
        long long81 = interval80.toDurationMillis();
        org.joda.time.Period period82 = interval80.toPeriod();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime76.minus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.PeriodType periodType84 = period82.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod85 = period82.toMutablePeriod();
        int[] intArray88 = chronology45.get((org.joda.time.ReadablePeriod) period82, 1644573145349L, (long) 2000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime70", (dateTime4.compareTo(mutableDateTime70) == 0) == dateTime4.equals(mutableDateTime70));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfDay(35268191);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long20 = dateTimeZone16.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMillis((int) (short) 10);
        boolean boolean30 = dateTimeZone16.isLocalDateTimeGap(localDateTime25);
        long long32 = dateTimeZone16.convertUTCToLocal(0L);
        int int34 = dateTimeZone16.getOffset((long) 35268191);
        java.lang.String str36 = dateTimeZone16.getNameKey((long) 70);
        org.joda.time.DateTime dateTime37 = dateTime13.withZone(dateTimeZone16);
        java.lang.String str39 = dateTimeZone16.getName(382243697041130L);
        int int41 = dateTimeZone16.getOffset((long) 52968030);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        int int31 = dateTime27.getHourOfDay();
        org.joda.time.DateTime.Property property32 = dateTime27.centuryOfEra();
        int int33 = property32.getMinimumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfDay(35268191);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long20 = dateTimeZone16.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMillis((int) (short) 10);
        boolean boolean30 = dateTimeZone16.isLocalDateTimeGap(localDateTime25);
        long long32 = dateTimeZone16.convertUTCToLocal(0L);
        int int34 = dateTimeZone16.getOffset((long) 35268191);
        java.lang.String str36 = dateTimeZone16.getNameKey((long) 70);
        org.joda.time.DateTime dateTime37 = dateTime13.withZone(dateTimeZone16);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime21 = dateTime18.withField(dateTimeFieldType19, 2022);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        int int23 = dateMidnight22.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property24 = dateMidnight22.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = dateMidnight22.get(dateTimeFieldType25);
        java.lang.Object obj27 = null;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, (int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.minuteOfHour();
        boolean boolean39 = calendar30.after((java.lang.Object) localDateTime36);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(obj27, chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType25.getField(chronology40);
        int int46 = localDateTime12.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.DateTime.Property property51 = dateTime47.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime47", (dateTime43.compareTo(dateTime47) == 0) == dateTime43.equals(dateTime47));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.minuteOfHour();
        boolean boolean15 = calendar6.after((java.lang.Object) localDateTime12);
        org.joda.time.Chronology chronology16 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) calendar2, chronology16);
        java.util.TimeZone timeZone19 = calendar2.getTimeZone();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getISO3Language();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.lang.String str31 = locale27.getDisplayScript(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone26, locale30);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withPeriodAdded(readablePeriod39, (int) '#');
        int[] intArray42 = localDateTime38.getValues();
        boolean boolean43 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        int int45 = dateTimeZone37.getOffsetFromLocal((long) 4);
        java.util.Locale locale48 = new java.util.Locale("");
        java.lang.String str49 = dateTimeZone37.getName((long) 9, locale48);
        java.lang.String str50 = locale34.getDisplayLanguage(locale48);
        java.util.Locale.Builder builder51 = builder33.setLocale(locale48);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale52.getDisplayVariant(locale53);
        java.util.Locale.Builder builder56 = builder33.setLocale(locale52);
        java.util.Locale locale57 = builder56.build();
        java.lang.String str58 = locale30.getDisplayScript(locale57);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone19, locale30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar32", (calendar6.compareTo(calendar32) == 0) == calendar6.equals(calendar32));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury(12);
        org.joda.time.Interval interval10 = dateMidnight4.toInterval();
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        boolean boolean15 = interval14.containsNow();
        org.joda.time.Duration duration16 = interval14.toDuration();
        org.joda.time.Interval interval17 = interval10.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(12);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(1);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DurationField durationField32 = durationFieldType30.getField(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withFieldAdded(durationFieldType30, 35268191);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean39 = localDateTime35.isSupported(dateTimeFieldType38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight34.property(dateTimeFieldType38);
        org.joda.time.DateTime.Property property41 = dateTime23.property(dateTimeFieldType38);
        boolean boolean43 = dateTime23.isEqual(363120010L);
        int int44 = dateTime23.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        int[] intArray53 = localDateTime49.getValues();
        boolean boolean54 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone48);
        java.util.TimeZone timeZone56 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime57 = dateTime23.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime23.minusYears(504);
        boolean boolean60 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.millis();
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.minuteOfHour();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.minuteOfHour();
        boolean boolean74 = calendar65.after((java.lang.Object) localDateTime71);
        org.joda.time.Chronology chronology75 = localDateTime71.getChronology();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (byte) 100, chronology75);
        java.lang.Object obj77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval(obj77, chronology78);
        long long80 = interval79.toDurationMillis();
        org.joda.time.Period period81 = interval79.toPeriod();
        java.lang.String str82 = period81.toString();
        long long85 = chronology75.add((org.joda.time.ReadablePeriod) period81, (long) (byte) 100, 0);
        boolean boolean86 = durationFieldType61.isSupported(chronology75);
        org.joda.time.DurationField durationField87 = chronology75.months();
        org.joda.time.DateTimeField dateTimeField88 = chronology75.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology75.secondOfDay();
        org.joda.time.DurationField durationField90 = chronology75.centuries();
        org.joda.time.Interval interval91 = interval17.withChronology(chronology75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField32 and durationField87", (durationField32.compareTo(durationField87) == 0) == durationField32.equals(durationField87));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withChronology(chronology6);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight4.toMutableDateTime(chronology21);
        org.joda.time.LocalDate localDate30 = dateMidnight4.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight7 and mutableDateTime29", (dateMidnight7.compareTo(mutableDateTime29) == 0) == dateMidnight7.equals(mutableDateTime29));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        calendar2.setLenient(true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime46", (dateTime25.compareTo(dateTime46) == 0) == dateTime25.equals(dateTime46));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury(12);
        org.joda.time.Interval interval10 = dateMidnight4.toInterval();
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval(obj12, chronology13);
        boolean boolean15 = interval14.containsNow();
        org.joda.time.Duration duration16 = interval14.toDuration();
        org.joda.time.Interval interval17 = interval10.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(12);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(1);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DurationField durationField32 = durationFieldType30.getField(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withFieldAdded(durationFieldType30, 35268191);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean39 = localDateTime35.isSupported(dateTimeFieldType38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight34.property(dateTimeFieldType38);
        org.joda.time.DateTime.Property property41 = dateTime23.property(dateTimeFieldType38);
        boolean boolean43 = dateTime23.isEqual(363120010L);
        int int44 = dateTime23.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        int[] intArray53 = localDateTime49.getValues();
        boolean boolean54 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone48);
        java.util.TimeZone timeZone56 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime57 = dateTime23.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime23.minusYears(504);
        boolean boolean60 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval17.isAfter(1644573104783L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime57", (dateTime23.compareTo(dateTime57) == 0) == dateTime23.equals(dateTime57));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(1);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime17.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.DateTime.Property property24 = dateTime17.weekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfDay(35268191);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus(readableDuration30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withFieldAdded(durationFieldType32, 0);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.plusDays(35268191);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withWeekyear(20);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withPeriodAdded(readablePeriod44, (int) '#');
        int[] intArray47 = localDateTime43.getValues();
        boolean boolean48 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        org.joda.time.LocalDateTime.Property property49 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property49.getFieldType();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight39.withField(dateTimeFieldType51, 35268191);
        int int54 = dateMidnight39.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withPeriodAdded(readablePeriod56, (int) '#');
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.minuteOfHour();
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval(obj62, chronology63);
        long long65 = interval64.toDurationMillis();
        org.joda.time.Period period66 = interval64.toPeriod();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight39.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime dateTime69 = dateTime26.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long77 = dateTimeZone73.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(0L, dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        boolean boolean84 = localDateTime82.isSupported(dateTimeFieldType83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.minusMillis((int) (short) 10);
        boolean boolean87 = dateTimeZone73.isLocalDateTimeGap(localDateTime82);
        long long89 = dateTimeZone73.convertUTCToLocal(0L);
        int int91 = dateTimeZone73.getOffset((long) 35268191);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime94 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime95 = dateTime69.withZone(dateTimeZone73);
        org.joda.time.Chronology chronology96 = chronology12.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField97 = chronology12.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime95", (dateTime26.compareTo(dateTime95) == 0) == dateTime26.equals(dateTime95));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.withDayOfYear(100);
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(11);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(9);
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime9.plusDays(999);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        boolean boolean37 = calendar28.after((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withYear(35268191);
        boolean boolean40 = dateTimeZone19.equals((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(1);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        int int46 = dateTime44.getWeekyear();
        org.joda.time.DateTime.Property property47 = dateTime44.weekOfWeekyear();
        java.util.Locale locale49 = new java.util.Locale("");
        java.lang.String str50 = locale49.getDisplayLanguage();
        int int51 = property47.getMaximumShortTextLength(locale49);
        org.joda.time.DateTime dateTime52 = property47.withMinimumValue();
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withYearOfCentury(0);
        int int56 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime9.toMutableDateTime(dateTimeZone19);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.months();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long78 = dateTimeZone74.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(0L, dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        boolean boolean85 = localDateTime83.isSupported(dateTimeFieldType84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.minusMillis((int) (short) 10);
        boolean boolean88 = dateTimeZone74.isLocalDateTimeGap(localDateTime83);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.plusMinutes((int) (short) 1);
        long long92 = chronology70.set((org.joda.time.ReadablePartial) localDateTime90, (long) 32);
        org.joda.time.DateTimeZone dateTimeZone93 = chronology70.getZone();
        org.joda.time.DateTime dateTime94 = dateTime9.toDateTime(chronology70);
        org.joda.time.DateTime dateTime95 = dateTime94.toDateTime();
        org.joda.time.DateTime dateTime97 = dateTime94.withDayOfYear(151);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime94", (dateTime9.compareTo(dateTime94) == 0) == dateTime9.equals(dateTime94));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(32769);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        int[] intArray16 = localDateTime12.getValues();
        boolean boolean17 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        boolean boolean29 = calendar20.after((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withYear(35268191);
        boolean boolean32 = dateTimeZone11.equals((java.lang.Object) localDateTime26);
        long long34 = dateTimeZone11.convertUTCToLocal((long) 20);
        java.lang.String str36 = dateTimeZone11.getNameKey(1640995200000L);
        org.joda.time.DateTime dateTime37 = dateTime6.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withField(dateTimeFieldType43, 2022);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval(obj53, chronology54);
        long long56 = interval55.toDurationMillis();
        org.joda.time.Period period57 = interval55.toPeriod();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime42.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime60 = dateTime59.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime62 = dateTime59.minusMillis(52810033);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.minuteOfHour();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.minuteOfHour();
        boolean boolean74 = calendar65.after((java.lang.Object) localDateTime71);
        org.joda.time.Chronology chronology75 = localDateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.year();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.DateTime dateTime79 = dateTime59.withChronology(chronology75);
        int int80 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime79", (dateTime4.compareTo(dateTime79) == 0) == dateTime4.equals(dateTime79));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DurationField durationField7 = durationFieldType5.getField(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withFieldAdded(durationFieldType5, 35268191);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = localDateTime10.isSupported(dateTimeFieldType13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight9.property(dateTimeFieldType13);
        org.joda.time.DateMidnight dateMidnight16 = property15.getDateMidnight();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale17.getDisplayVariant(locale18);
        java.lang.String str21 = property15.getAsShortText(locale17);
        org.joda.time.DateMidnight dateMidnight22 = property15.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight23 = property15.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plus((long) '#');
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plusWeeks(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.secondOfDay();
        org.joda.time.DurationField durationField46 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology41);
        int int49 = dateMidnight25.compareTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays(1);
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        int int55 = dateTime53.getWeekyear();
        org.joda.time.DateTime.Property property56 = dateTime53.weekOfWeekyear();
        java.util.Locale locale58 = new java.util.Locale("");
        java.lang.String str59 = locale58.getDisplayLanguage();
        int int60 = property56.getMaximumShortTextLength(locale58);
        org.joda.time.DateTime dateTime62 = property56.addWrapFieldToCopy(51069804);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.minuteOfHour();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.minuteOfHour();
        boolean boolean74 = calendar65.after((java.lang.Object) localDateTime71);
        org.joda.time.Chronology chronology75 = localDateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.weekOfWeekyear();
        org.joda.time.DurationField durationField77 = chronology75.weeks();
        org.joda.time.Chronology chronology78 = chronology75.withUTC();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.clockhourOfHalfday();
        org.joda.time.DateTime dateTime82 = dateTime62.withChronology(chronology78);
        org.joda.time.DateTime dateTime83 = dateTime62.toDateTime();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight48, (org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime82 and dateTime62", (dateTime82.compareTo(dateTime62) == 0) == dateTime82.equals(dateTime62));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        int int31 = dateTime27.getHourOfDay();
        org.joda.time.DateTime.Property property32 = dateTime27.centuryOfEra();
        int int33 = property32.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        long long33 = interval32.toDurationMillis();
        org.joda.time.Period period34 = interval32.toPeriod();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime37 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(2022);
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Integer int45 = dateTimeFormatter43.getPivotYear();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.seconds();
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology58);
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(chronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime4.minusMonths(358);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime11 = dateTime8.withFieldAdded(durationFieldType9, 0);
        org.joda.time.DateTime dateTime13 = dateTime8.plusMonths(17520);
        org.joda.time.DateTime.Property property14 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime18 = dateTime15.minus((long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.era();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) dateMidnight21);
        org.joda.time.DateTime dateTime24 = dateTime22.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(363120000);
        int int27 = dateTime24.getYearOfEra();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, (int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.minuteOfHour();
        boolean boolean39 = calendar30.after((java.lang.Object) localDateTime36);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DurationField durationField42 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfHalfday();
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(chronology40);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        int[] intArray53 = localDateTime49.getValues();
        boolean boolean54 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = property57.withMaximumValue();
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear(900);
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval(obj62, chronology63);
        boolean boolean65 = interval64.containsNow();
        org.joda.time.Duration duration66 = interval64.toDuration();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime68 = dateTime24.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime70 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration66, 53034);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime45", (dateTime24.compareTo(dateTime45) == 0) == dateTime24.equals(dateTime45));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.util.Date date3 = new java.util.Date(363120000, 2, 880);
        int int4 = date3.getHours();
        int int5 = date3.getTimezoneOffset();
        java.time.Instant instant6 = date3.toInstant();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        java.util.Date date10 = dateTime9.toDate();
        org.joda.time.DateTime dateTime12 = dateTime9.withYearOfEra(1);
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property16 = dateTime9.secondOfMinute();
        org.joda.time.DateTime.Property property17 = dateTime9.era();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime9.toMutableDateTime();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.minuteOfHour();
        boolean boolean31 = calendar22.after((java.lang.Object) localDateTime28);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 100, chronology32);
        java.lang.Object obj34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval(obj34, chronology35);
        long long37 = interval36.toDurationMillis();
        org.joda.time.Period period38 = interval36.toPeriod();
        java.lang.String str39 = period38.toString();
        long long42 = chronology32.add((org.joda.time.ReadablePeriod) period38, (long) (byte) 100, 0);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, (int) '#');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.minuteOfHour();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.minuteOfHour();
        boolean boolean54 = calendar45.after((java.lang.Object) localDateTime51);
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight57 = org.joda.time.DateMidnight.now(chronology55);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.minus(readableDuration62);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withPeriodAdded(readablePeriod69, (int) '#');
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime73 = property72.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.minuteOfHour();
        boolean boolean76 = calendar67.after((java.lang.Object) localDateTime73);
        org.joda.time.Chronology chronology77 = localDateTime73.getChronology();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 100, chronology77);
        java.lang.Object obj79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Interval interval81 = new org.joda.time.Interval(obj79, chronology80);
        long long82 = interval81.toDurationMillis();
        org.joda.time.Period period83 = interval81.toPeriod();
        java.lang.String str84 = period83.toString();
        long long87 = chronology77.add((org.joda.time.ReadablePeriod) period83, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight63.minus((org.joda.time.ReadablePeriod) period83);
        int[] intArray91 = chronology55.get((org.joda.time.ReadablePeriod) period83, (long) 47, 3801600000L);
        long long94 = chronology32.add((org.joda.time.ReadablePeriod) period83, (-363119994L), 19);
        org.joda.time.DateTime dateTime95 = dateTime9.toDateTime(chronology32);
        org.joda.time.DateTime dateTime97 = dateTime95.minusHours(52913996);
        java.util.Date date98 = dateTime95.toDate();
        boolean boolean99 = date3.before(date98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime95", (dateTime9.compareTo(dateTime95) == 0) == dateTime9.equals(dateTime95));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        long long33 = interval32.toDurationMillis();
        org.joda.time.Period period34 = interval32.toPeriod();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime37 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(2022);
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Integer int45 = dateTimeFormatter43.getPivotYear();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.seconds();
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology58);
        org.joda.time.DateTimeZone dateTimeZone65 = chronology58.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = locale14.stripExtensions();
        int int16 = dateTimeField13.getMaximumTextLength(locale14);
        int int18 = dateTimeField13.getLeapAmount((long) 15);
        long long20 = dateTimeField13.roundHalfCeiling((-31172820000L));
        int int21 = dateTimeField13.getMinimumValue();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfHalfday();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        int int43 = dateTimeField38.getMaximumTextLength(locale39);
        java.lang.String str44 = dateTimeField13.getAsText(52879599, locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear((int) '#');
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = locale48.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter47.withLocale(locale49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        int[] intArray58 = localDateTime54.getValues();
        boolean boolean59 = dateTimeZone53.isLocalDateTimeGap(localDateTime54);
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(dateTimeZone53);
        java.lang.String str61 = dateTimeFormatter50.print((org.joda.time.ReadableInstant) dateMidnight60);
        java.util.Locale locale62 = dateTimeFormatter50.getLocale();
        java.lang.String str63 = locale62.getScript();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone68);
        java.util.TimeZone timeZone70 = dateTimeZone68.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter71.withPivotYear((int) '#');
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.util.Locale locale75 = locale74.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter73.withLocale(locale75);
        java.util.Locale locale77 = dateTimeFormatter76.getLocale();
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone70, locale77);
        java.lang.String str80 = locale62.getDisplayScript(locale77);
        int int81 = dateTimeField13.getMaximumTextLength(locale62);
        java.lang.String str82 = locale62.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar79", (calendar2.compareTo(calendar79) == 0) == calendar2.equals(calendar79));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime.Property property7 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTime();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(1);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter16.getZone();
        java.lang.String str19 = dateTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury(4);
        boolean boolean22 = dateTime14.isBeforeNow();
        org.joda.time.DateTime.Property property23 = dateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(1);
        org.joda.time.DateTime dateTime27 = localDateTime26.toDateTime();
        org.joda.time.DateMidnight dateMidnight28 = dateTime27.toDateMidnight();
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.weekyear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withChronology(chronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, (int) '#');
        int[] intArray39 = localDateTime35.getValues();
        boolean boolean40 = dateTimeZone34.isLocalDateTimeGap(localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property41.getFieldType();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.withField(dateTimeFieldType43, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusDays(1);
        org.joda.time.DateTime dateTime49 = localDateTime48.toDateTime();
        org.joda.time.DateMidnight dateMidnight50 = dateTime49.toDateMidnight();
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.weekyear();
        org.joda.time.DateMidnight dateMidnight53 = property51.addToCopy((long) (short) 0);
        int int54 = dateMidnight28.compareTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight28.year();
        org.joda.time.DateMidnight dateMidnight56 = property55.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight57 = property55.roundCeilingCopy();
        org.joda.time.Instant instant58 = dateMidnight57.toInstant();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.minusYears(35268191);
        boolean boolean61 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateMidnight57);
        int int62 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight57 and instant58", (dateMidnight57.compareTo(instant58) == 0) == dateMidnight57.equals(instant58));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar2);
        int int8 = calendar2.getWeekYear();
        long long9 = calendar2.getTimeInMillis();
        int int10 = calendar2.getFirstDayOfWeek();
        java.lang.String str11 = calendar2.getCalendarType();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        calendar14.clear();
        calendar14.roll(363120000, (int) (short) 0);
        calendar14.set((int) '#', (int) (byte) 0, 8, 2022, 0, 9);
        calendar14.set(39, (int) (short) 10, 1970, 86399999, (int) (short) 10);
        calendar14.setLenient(true);
        calendar14.setMinimalDaysInFirstWeek(52827740);
        int int36 = calendar14.getWeekYear();
        java.util.Date date37 = calendar14.getTime();
        calendar2.setTime(date37);
        int int39 = date37.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar14", (calendar2.compareTo(calendar14) == 0) == calendar2.equals(calendar14));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus(readableDuration16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withFieldAdded(durationFieldType18, 0);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight15.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight.Property property24 = dateMidnight15.era();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight15.withMillis(0L);
        boolean boolean27 = localDateTime12.equals((java.lang.Object) dateMidnight15);
        org.joda.time.DateMidnight.Property property28 = dateMidnight15.monthOfYear();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.minuteOfHour();
        boolean boolean62 = calendar53.after((java.lang.Object) localDateTime59);
        org.joda.time.Chronology chronology63 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) -1, chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.year();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 10, chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime75 = dateTime72.withField(dateTimeFieldType73, 2022);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, (int) '#');
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = property80.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.minuteOfHour();
        java.lang.Object obj83 = null;
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Interval interval85 = new org.joda.time.Interval(obj83, chronology84);
        long long86 = interval85.toDurationMillis();
        org.joda.time.Period period87 = interval85.toPeriod();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime81.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime89 = dateTime72.minus((org.joda.time.ReadablePeriod) period87);
        java.lang.String str90 = period87.toString();
        int[] intArray93 = chronology63.get((org.joda.time.ReadablePeriod) period87, (long) 'a', 0L);
        int[] intArray95 = chronology42.get((org.joda.time.ReadablePeriod) period87, 1644573039309L);
        org.joda.time.DateTime dateTime96 = dateMidnight15.toDateTime(chronology42);
        org.joda.time.DurationField durationField97 = chronology42.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight15 and dateTime96", (dateMidnight15.compareTo(dateTime96) == 0) == dateMidnight15.equals(dateTime96));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getNameKey((long) 12);
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        long long9 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval8.toPeriod(periodType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean14 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property15 = dateTime13.weekOfWeekyear();
        int int16 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears((int) (byte) 0);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.minuteOfHour();
        boolean boolean30 = calendar21.after((java.lang.Object) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime18.toMutableDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) 1644573226443L, chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime34", (dateTime13.compareTo(mutableDateTime34) == 0) == dateTime13.equals(mutableDateTime34));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.year();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withField(dateTimeFieldType23, 2022);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        long long36 = interval35.toDurationMillis();
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime22.minus((org.joda.time.ReadablePeriod) period37);
        java.lang.String str40 = period37.toString();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) period37, (long) 'a', 0L);
        org.joda.time.DurationField durationField44 = chronology13.minutes();
        org.joda.time.DurationField durationField45 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology13.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField44 and durationField45", Math.signum(durationField44.compareTo(durationField45)) == -Math.signum(durationField45.compareTo(durationField44)));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(1);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.weekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withChronology(chronology17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) '#');
        int[] intArray26 = localDateTime22.getValues();
        boolean boolean27 = dateTimeZone21.isLocalDateTimeGap(localDateTime22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property28.getFieldType();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.withField(dateTimeFieldType30, (int) (short) 10);
        org.joda.time.DateTime dateTime33 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, (int) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        long long44 = interval43.toDurationMillis();
        org.joda.time.Period period45 = interval43.toPeriod();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight32.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime48 = dateTime1.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DurationFieldType durationFieldType50 = period45.getFieldType((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        java.util.Date date54 = dateTime53.toDate();
        org.joda.time.DateTime dateTime56 = dateTime53.withYearOfEra(1);
        org.joda.time.DateTime.Property property57 = dateTime53.yearOfEra();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withPeriodAdded(readablePeriod64, (int) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.minuteOfHour();
        boolean boolean71 = calendar62.after((java.lang.Object) localDateTime68);
        org.joda.time.Chronology chronology72 = localDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.year();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) -1, chronology72);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = chronology72.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 52870427, chronology72);
        org.joda.time.DateTimeField dateTimeField80 = chronology72.yearOfCentury();
        org.joda.time.DurationField durationField81 = chronology72.weekyears();
        org.joda.time.DateTime dateTime82 = dateTime53.toDateTime(chronology72);
        boolean boolean83 = durationFieldType50.isSupported(chronology72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime82", (dateTime53.compareTo(dateTime82) == 0) == dateTime53.equals(dateTime82));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minus(readableDuration7);
        boolean boolean9 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        java.lang.String str11 = dateTimeZone2.getNameKey(1644572982422L);
        java.util.TimeZone timeZone12 = dateTimeZone2.toTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.lang.String str18 = locale14.getDisplayScript(locale17);
        boolean boolean19 = locale14.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        int[] intArray30 = localDateTime26.getValues();
        boolean boolean31 = dateTimeZone25.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        java.util.Date date34 = localDateTime33.toDate();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromDateFields(date34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = localDateTime35.toString("35271248", locale38);
        java.lang.String str40 = locale21.getDisplayLanguage(locale38);
        java.lang.String str41 = locale14.getDisplayScript(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone12, locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar22", (calendar13.compareTo(calendar22) == 0) == calendar13.equals(calendar22));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(32);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight13.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight13.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = localDateTime29.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight23.withField(dateTimeFieldType32, 0);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((long) '#');
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusWeeks(0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDurationAdded((long) 'a', 362);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight37.withWeekyear(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        boolean boolean60 = dateTimeFieldType45.isSupported(chronology58);
        org.joda.time.DateMidnight.Property property61 = dateMidnight37.property(dateTimeFieldType45);
        org.joda.time.DateTime.Property property62 = dateTime11.property(dateTimeFieldType45);
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime11", (dateTime6.compareTo(dateTime11) == 0) == dateTime6.equals(dateTime11));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        boolean boolean25 = dateTimeFieldType10.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.DateTime dateTime27 = dateTime4.withChronology(chronology23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = dateTime27.toString("09:47:54.770", locale29);
        int int31 = dateTime27.getHourOfDay();
        org.joda.time.DateTime.Property property32 = dateTime27.centuryOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.LocalDate localDate36 = localDate34.plusWeeks(6);
        org.joda.time.LocalDate localDate38 = localDate34.minusWeeks(7);
        org.joda.time.LocalDate.Property property39 = localDate38.year();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plus(readableDuration42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withFieldAdded(durationFieldType44, 0);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withDurationAdded(readableDuration47, 0);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.minus(readableDuration50);
        org.joda.time.DateTime dateTime52 = localDate38.toDateTime((org.joda.time.ReadableInstant) dateMidnight46);
        int int53 = dateTime52.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(72);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(63433187324011L, dateTimeZone56);
        long long60 = dateTimeZone56.previousTransition(1644572989021L);
        org.joda.time.DateTime dateTime61 = dateTime52.toDateTime(dateTimeZone56);
        int int62 = property32.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(1);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.DateMidnight dateMidnight5 = dateTime4.toDateMidnight();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plus((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight5.getZone();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight5.toMutableDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(1);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime17.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.DateTime.Property property24 = dateTime17.weekOfWeekyear();
        int int25 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime26 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(13);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 22, dateTimeZone31);
        int int34 = dateTimeZone31.getStandardOffset(1644936203564L);
        org.joda.time.DateTime dateTime35 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1644573241808L, dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime35", (dateTime4.compareTo(dateTime35) == 0) == dateTime4.equals(dateTime35));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime4.minusMillis(1970);
        org.joda.time.DateTime dateTime25 = dateTime4.plusWeeks((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.joda.time.DateTime dateTime28 = property26.roundCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        org.joda.time.DurationField durationField50 = chronology42.eras();
        org.joda.time.DateTime dateTime51 = dateTime28.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField52 = chronology42.clockhourOfHalfday();
        java.lang.String str53 = chronology42.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime51", (dateTime28.compareTo(dateTime51) == 0) == dateTime28.equals(dateTime51));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(3);
        boolean boolean3 = dateTimeFormatter0.isOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear(52810033);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTimeFormatter8.parseMutableDateTime("1969-01-05T04:52:00.000");
        int int13 = dateTimeFormatter5.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "Koreanisch", 52869635);
        boolean boolean15 = mutableDateTime10.isEqual((long) 2011);
        int int18 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "14:40:23.376", 2021);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime22 = mutableDateTime10.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime22", (mutableDateTime10.compareTo(dateTime22) == 0) == mutableDateTime10.equals(dateTime22));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology13.weeks();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateTime18.toDateMidnight();
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval(obj21, chronology22);
        boolean boolean24 = interval23.containsNow();
        org.joda.time.DateTime dateTime25 = interval23.getStart();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(1);
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateMidnight dateMidnight30 = dateTime29.toDateMidnight();
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.weekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withChronology(chronology32);
        boolean boolean34 = interval23.isBefore((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTime dateTime35 = interval23.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withPivotYear((int) '#');
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = locale39.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withLocale(locale40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withPeriodAdded(readablePeriod46, (int) '#');
        int[] intArray49 = localDateTime45.getValues();
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(dateTimeZone44);
        java.lang.String str52 = dateTimeFormatter41.print((org.joda.time.ReadableInstant) dateMidnight51);
        java.util.Locale locale53 = dateTimeFormatter41.getLocale();
        java.util.Calendar calendar54 = dateTime35.toCalendar(locale53);
        org.joda.time.LocalDateTime localDateTime55 = dateTime35.toLocalDateTime();
        org.joda.time.DateTime dateTime57 = dateTime35.plusMonths(69);
        boolean boolean58 = dateMidnight20.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime25", (dateTime18.compareTo(dateTime25) == 0) == dateTime18.equals(dateTime25));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        int int10 = dateTimeZone2.getOffsetFromLocal((long) 4);
        java.util.Locale locale13 = new java.util.Locale("");
        java.lang.String str14 = dateTimeZone2.getName((long) 9, locale13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 10, chronology17);
        java.util.Date date19 = dateTime18.toDate();
        org.joda.time.DateTime dateTime21 = dateTime18.withYearOfEra(1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfMonth(12);
        int int24 = dateTime21.getDayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime21.withHourOfDay(2);
        int int27 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime(dateTimeZone29);
        long long32 = dateTimeZone29.previousTransition(1644573108580L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime30", (dateTime26.compareTo(dateTime30) == 0) == dateTime26.equals(dateTime30));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property2.addToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate5 = property2.getLocalDate();
        org.joda.time.LocalDate localDate7 = property2.addWrapFieldToCopy(1);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getNameKey((long) 12);
        java.lang.String str14 = dateTimeZone9.getNameKey((long) 'u');
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean17 = dateTime15.isSupported(dateTimeFieldType16);
        boolean boolean18 = localDate7.isSupported(dateTimeFieldType16);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 8, dateTimeZone24);
        java.lang.String str29 = dateTimeZone24.getShortName((-1953900028000L));
        org.joda.time.Interval interval30 = localDate7.toInterval(dateTimeZone24);
        java.lang.String str31 = localDate7.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.LocalDate localDate36 = property34.addToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate38 = localDate36.plusYears((int) '4');
        int int39 = localDate36.getDayOfMonth();
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate7.toDateTimeAtMidnight(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime43", (dateTime40.compareTo(dateTime43) == 0) == dateTime40.equals(dateTime43));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField19, durationField14, and durationField18", !(durationField19.compareTo(durationField14) == 0) || (Math.signum(durationField19.compareTo(durationField18)) == Math.signum(durationField14.compareTo(durationField18))));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.minuteOfHour();
        boolean boolean41 = calendar32.after((java.lang.Object) localDateTime38);
        org.joda.time.Chronology chronology42 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1644606480000L, chronology42);
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(chronology42);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis(55195L);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime46", (dateTime4.compareTo(dateTime46) == 0) == dateTime4.equals(dateTime46));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.millisOfDay();
        int int11 = property10.getMinimumValue();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime13 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = property10.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        boolean boolean17 = localDateTime15.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(1);
        java.lang.String str21 = localDateTime18.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long34 = dateTimeZone30.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(0L, dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusMillis((int) (short) 10);
        boolean boolean44 = dateTimeZone30.isLocalDateTimeGap(localDateTime39);
        long long46 = dateTimeZone30.convertUTCToLocal(0L);
        int int48 = dateTimeZone30.getOffset((long) 35268191);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime50 = localDateTime27.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime27.withYear(28);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusDays((int) (short) 1);
        org.joda.time.Chronology chronology55 = localDateTime52.getChronology();
        boolean boolean56 = durationFieldType16.isSupported(chronology55);
        org.joda.time.DurationField durationField57 = chronology55.days();
        org.joda.time.DurationField durationField58 = chronology55.eras();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromMillisOfDay((long) 398869108, chronology55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField57 and durationField58", Math.signum(durationField57.compareTo(durationField58)) == -Math.signum(durationField58.compareTo(durationField57)));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) 1644572872597L, chronology45);
        org.joda.time.DateTime dateTime52 = dateTime22.toDateTime(chronology45);
        org.joda.time.DateTime dateTime54 = dateTime22.plusMinutes(215);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime52", (dateTime22.compareTo(dateTime52) == 0) == dateTime22.equals(dateTime52));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        int int11 = localDateTime10.getYearOfEra();
        int int12 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYear(17520000);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.DateTime.Property property27 = dateTime20.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime20.withField(dateTimeFieldType28, 86399999);
        org.joda.time.LocalDateTime.Property property31 = localDateTime14.property(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType28.getRangeDurationType();
        java.lang.String str33 = durationFieldType32.toString();
        java.lang.String str34 = durationFieldType32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYear(12);
        org.joda.time.DateTime dateTime41 = dateTime37.plusSeconds(13);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withPeriodAdded(readablePeriod46, (int) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.minuteOfHour();
        boolean boolean53 = calendar44.after((java.lang.Object) localDateTime50);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        org.joda.time.DurationField durationField56 = chronology54.eras();
        boolean boolean57 = dateTime41.equals((java.lang.Object) chronology54);
        org.joda.time.DurationField durationField58 = durationFieldType32.getField(chronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField56, durationField58, and durationField56", !(durationField56.compareTo(durationField58) == 0) || (Math.signum(durationField56.compareTo(durationField56)) == Math.signum(durationField58.compareTo(durationField56))));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(362);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(880);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        long long16 = interval15.toDurationMillis();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean21 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval15.getStartMillis();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        boolean boolean27 = interval25.containsNow();
        boolean boolean28 = interval15.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration29 = interval15.toDuration();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(1);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime42.withTime(0, 1, 12, 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int49 = dateTime42.get(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime42.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime53 = property50.roundCeilingCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(398561013);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(47, 0);
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.Interval interval60 = interval37.withStart((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime61 = interval37.getEnd();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime59", (dateTime55.compareTo(dateTime59) == 0) == dateTime55.equals(dateTime59));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) 1644572872597L, chronology45);
        org.joda.time.DateTime dateTime52 = dateTime22.toDateTime(chronology45);
        org.joda.time.DateTime dateTime53 = dateTime22.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime52", (dateTime53.compareTo(dateTime52) == 0) == dateTime53.equals(dateTime52));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        boolean boolean22 = calendar13.after((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plusYears(14);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withPeriodAdded(readablePeriod32, (int) '#');
        int[] intArray35 = localDateTime31.getValues();
        boolean boolean36 = dateTimeZone30.isLocalDateTimeGap(localDateTime31);
        int int38 = dateTimeZone30.getOffsetFromLocal((long) 4);
        int int40 = dateTimeZone30.getOffset((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight25.toMutableDateTime(dateTimeZone30);
        int int44 = dateTimeFormatter10.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime41, "14:40:39.212", 27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter10.withOffsetParsed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight25 and mutableDateTime41", (dateMidnight25.compareTo(mutableDateTime41) == 0) == dateMidnight25.equals(mutableDateTime41));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfHalfday();
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField18.getType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        boolean boolean34 = calendar25.after((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 10, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 2022);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withPeriodAdded(readablePeriod49, (int) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.lang.Object obj55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval(obj55, chronology56);
        long long58 = interval57.toDurationMillis();
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime44.minus((org.joda.time.ReadablePeriod) period59);
        java.lang.String str62 = period59.toString();
        int[] intArray65 = chronology35.get((org.joda.time.ReadablePeriod) period59, (long) 'a', 0L);
        org.joda.time.DurationField durationField66 = chronology35.minutes();
        org.joda.time.DurationField durationField67 = chronology35.eras();
        org.joda.time.DurationField durationField68 = durationFieldType21.getField(chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField66 and durationField67", Math.signum(durationField66.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField66)));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfDay();
        int int17 = dateTimeField15.getMinimumValue(363120074L);
        boolean boolean18 = dateTimeField15.isSupported();
        boolean boolean20 = dateTimeField15.isLeap((long) 4);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        int[] intArray28 = localDateTime24.getValues();
        boolean boolean29 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        int int32 = localDateTime31.getWeekOfWeekyear();
        int int33 = localDateTime31.size();
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.dayOfYear();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar36", (calendar2.compareTo(calendar36) == 0) == calendar2.equals(calendar36));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Interval interval2 = new org.joda.time.Interval(obj0, chronology1);
        boolean boolean3 = interval2.containsNow();
        org.joda.time.DateTime dateTime4 = interval2.getStart();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(1);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.weekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withChronology(chronology11);
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.DateTime dateTime14 = interval2.getStart();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((int) '#');
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = locale18.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter17.withLocale(locale19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        int[] intArray28 = localDateTime24.getValues();
        boolean boolean29 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(dateTimeZone23);
        java.lang.String str31 = dateTimeFormatter20.print((org.joda.time.ReadableInstant) dateMidnight30);
        java.util.Locale locale32 = dateTimeFormatter20.getLocale();
        java.util.Calendar calendar33 = dateTime14.toCalendar(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        boolean boolean35 = calendar33.after((java.lang.Object) dateTimeFormatter34);
        calendar33.clear(15);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        calendar40.clear();
        calendar40.roll(363120000, (int) (short) 0);
        calendar40.set((int) '#', (int) (byte) 0, 8, 2022, 0, 9);
        int int52 = calendar40.getMinimalDaysInFirstWeek();
        calendar40.setLenient(true);
        int int55 = calendar40.getFirstDayOfWeek();
        java.util.TimeZone timeZone56 = calendar40.getTimeZone();
        boolean boolean57 = calendar33.before((java.lang.Object) calendar40);
        long long58 = calendar40.getTimeInMillis();
        int int59 = calendar40.getFirstDayOfWeek();
        java.util.Date date60 = new java.util.Date();
        calendar40.setTime(date60);
        int int62 = date60.getSeconds();
        int int63 = date60.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar40", (calendar33.compareTo(calendar40) == 0) == calendar33.equals(calendar40));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight9 = property5.addToCopy(70);
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        org.joda.time.DateMidnight dateMidnight11 = property5.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight12 = property5.roundHalfCeilingCopy();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        boolean boolean26 = calendar17.after((java.lang.Object) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1, chronology27);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays(1);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.weekyear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withChronology(chronology48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, (int) '#');
        int[] intArray57 = localDateTime53.getValues();
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalDateTime.Property property59 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property59.getFieldType();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight46.withField(dateTimeFieldType61, (int) (short) 10);
        org.joda.time.DateTime dateTime64 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, (int) '#');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.minuteOfHour();
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime70.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight63.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTime dateTime79 = dateTime32.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DurationFieldType durationFieldType81 = period76.getFieldType((int) (short) 0);
        long long84 = chronology27.add((org.joda.time.ReadablePeriod) period76, (-62163607920000L), 32);
        org.joda.time.Period period85 = period76.toPeriod();
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight12.withPeriodAdded((org.joda.time.ReadablePeriod) period85, (-58));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight11 and instant13", (dateMidnight11.compareTo(instant13) == 0) == dateMidnight11.equals(instant13));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.clear();
        calendar2.roll(363120000, (int) (short) 0);
        int int7 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        calendar2.setTimeZone(timeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(1);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime20.withTime(0, 1, 12, 6);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, (int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        boolean boolean40 = calendar31.after((java.lang.Object) localDateTime37);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        boolean boolean43 = dateTimeFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfCentury();
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology41);
        boolean boolean47 = calendar2.before((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime48 = dateTime25.toDateTime();
        long long49 = dateTime48.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime46", (dateTime48.compareTo(dateTime46) == 0) == dateTime48.equals(dateTime46));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) dateMidnight2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) 86399999);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime9 = localTime7.minusHours(8);
        org.joda.time.LocalTime localTime11 = localTime7.withSecondOfMinute(4);
        java.lang.String str12 = localTime7.toString();
        org.joda.time.LocalTime localTime14 = localTime7.minusMinutes(841);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime3.toMutableDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime3.minusDays(53062958);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight0 and mutableDateTime16", (dateMidnight0.compareTo(mutableDateTime16) == 0) == dateMidnight0.equals(mutableDateTime16));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfYear((int) (byte) 100);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        boolean boolean20 = calendar11.after((java.lang.Object) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DurationField durationField23 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.millis();
        java.lang.String str26 = chronology21.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime2.toMutableDateTime(chronology21);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime27", (dateTime2.compareTo(mutableDateTime27) == 0) == dateTime2.equals(mutableDateTime27));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 27);
        boolean boolean3 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(52810033);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, (int) '#');
        int[] intArray19 = localDateTime15.getValues();
        boolean boolean20 = dateTimeZone14.isLocalDateTimeGap(localDateTime15);
        int int22 = dateTimeZone14.getOffsetFromLocal((long) 4);
        java.util.Locale locale25 = new java.util.Locale("");
        java.lang.String str26 = dateTimeZone14.getName((long) 9, locale25);
        java.lang.String str27 = locale11.getDisplayLanguage(locale25);
        java.lang.String str28 = locale7.getDisplayCountry(locale25);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(1);
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        int int34 = dateTime32.getWeekyear();
        org.joda.time.DateTime.Property property35 = dateTime32.weekOfWeekyear();
        java.util.Locale locale37 = new java.util.Locale("");
        java.lang.String str38 = locale37.getDisplayLanguage();
        int int39 = property35.getMaximumShortTextLength(locale37);
        java.lang.String str40 = locale25.getDisplayVariant(locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter6.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter0.withLocale(locale25);
        boolean boolean43 = dateTimeFormatter0.isPrinter();
        org.joda.time.LocalDateTime localDateTime45 = dateTimeFormatter0.parseLocalDateTime("2022-02-15T14:40:41.303");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime53 = dateTime50.withField(dateTimeFieldType51, 2022);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        java.lang.Object obj61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval(obj61, chronology62);
        long long64 = interval63.toDurationMillis();
        org.joda.time.Period period65 = interval63.toPeriod();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime50.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime68 = dateTime67.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime70 = dateTime67.minusMillis(52810033);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale72);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withPeriodAdded(readablePeriod75, (int) '#');
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = property78.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.minuteOfHour();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.minuteOfHour();
        boolean boolean82 = calendar73.after((java.lang.Object) localDateTime79);
        org.joda.time.Chronology chronology83 = localDateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.year();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology83.getZone();
        org.joda.time.DateTime dateTime87 = dateTime67.withChronology(chronology83);
        java.lang.String str88 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime67 and dateTime87", (dateTime67.compareTo(dateTime87) == 0) == dateTime67.equals(dateTime87));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long20 = dateTimeZone16.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMillis((int) (short) 10);
        boolean boolean30 = dateTimeZone16.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusMinutes((int) (short) 1);
        long long34 = chronology12.set((org.joda.time.ReadablePartial) localDateTime32, (long) 32);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMonths(0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        java.util.Date date41 = dateTime40.toDate();
        org.joda.time.DateTime dateTime43 = dateTime40.withYearOfEra(1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfMonth(12);
        int int46 = dateTime43.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = dateTime43.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDateTime32.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.minus((-734178L));
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime50", (dateTime43.compareTo(dateTime50) == 0) == dateTime43.equals(dateTime50));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfEra(6);
        java.lang.Object obj9 = null;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj9, chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime4.toDateTime(chronology22);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, (int) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.minuteOfHour();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        boolean boolean42 = calendar33.after((java.lang.Object) localDateTime39);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology43.centuries();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 32, chronology43);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight51.minus(readableDuration54);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withPeriodAdded(readablePeriod61, (int) '#');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.minuteOfHour();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.minuteOfHour();
        boolean boolean68 = calendar59.after((java.lang.Object) localDateTime65);
        org.joda.time.Chronology chronology69 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 100, chronology69);
        java.lang.Object obj71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval(obj71, chronology72);
        long long74 = interval73.toDurationMillis();
        org.joda.time.Period period75 = interval73.toPeriod();
        java.lang.String str76 = period75.toString();
        long long79 = chronology69.add((org.joda.time.ReadablePeriod) period75, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight55.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.MutablePeriod mutablePeriod81 = period75.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.centuries();
        boolean boolean83 = mutablePeriod81.isSupported(durationFieldType82);
        org.joda.time.DateTime dateTime84 = dateTime49.plus((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.PeriodType periodType85 = mutablePeriod81.getPeriodType();
        org.joda.time.DateTime dateTime86 = dateTime28.plus((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTime dateTime88 = dateTime28.minusMinutes(2719);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy((long) (short) 0);
        long long8 = property5.remainder();
        org.joda.time.DateMidnight dateMidnight9 = property5.roundHalfFloorCopy();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology22.weekyears();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight9.toMutableDateTime(chronology22);
        org.joda.time.DateMidnight.Property property30 = dateMidnight9.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and mutableDateTime29", (dateMidnight9.compareTo(mutableDateTime29) == 0) == dateMidnight9.equals(mutableDateTime29));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        boolean boolean11 = calendar2.after((java.lang.Object) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology12);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusYears(14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        int int27 = dateTimeZone19.getOffsetFromLocal((long) 4);
        int int29 = dateTimeZone19.getOffset((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight14.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusDays(1);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        int int42 = dateTime40.getWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime40.weekOfWeekyear();
        org.joda.time.DateTime.Property property44 = dateTime40.yearOfCentury();
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTimeISO();
        boolean boolean46 = dateMidnight32.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight32.minusYears(52851532);
        org.joda.time.DateMidnight.Property property49 = dateMidnight32.monthOfYear();
        org.joda.time.DateMidnight dateMidnight50 = property49.roundHalfCeilingCopy();
        boolean boolean51 = dateMidnight14.isEqual((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusDays(1);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        org.joda.time.DateMidnight dateMidnight56 = dateTime55.toDateMidnight();
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.weekyear();
        org.joda.time.DateMidnight dateMidnight59 = property57.addToCopy((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight61 = property57.addToCopy(70);
        org.joda.time.DateMidnight dateMidnight62 = property57.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight64 = property57.setCopy((-1));
        org.joda.time.DateMidnight dateMidnight65 = property57.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withWeekyear(52865905);
        java.lang.Object obj68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval(obj68, chronology69);
        boolean boolean71 = interval70.containsNow();
        long long72 = interval70.getStartMillis();
        boolean boolean74 = interval70.isAfter(1644572939300L);
        java.lang.Object obj75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval(obj75, chronology76);
        boolean boolean78 = interval77.containsNow();
        org.joda.time.Duration duration79 = interval77.toDuration();
        org.joda.time.Interval interval80 = interval70.withDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight67.withDurationAdded((org.joda.time.ReadableDuration) duration79, 53058542);
        boolean boolean83 = dateMidnight50.equals((java.lang.Object) 53058542);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight14 and mutableDateTime30", (dateMidnight14.compareTo(mutableDateTime30) == 0) == dateMidnight14.equals(mutableDateTime30));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) '#');
        int[] intArray10 = localDateTime6.getValues();
        boolean boolean11 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 6, dateTimeZone5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(14);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 45);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.millis();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        boolean boolean32 = calendar23.after((java.lang.Object) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 100, chronology33);
        java.lang.Object obj35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval(obj35, chronology36);
        long long38 = interval37.toDurationMillis();
        org.joda.time.Period period39 = interval37.toPeriod();
        java.lang.String str40 = period39.toString();
        long long43 = chronology33.add((org.joda.time.ReadablePeriod) period39, (long) (byte) 100, 0);
        boolean boolean44 = durationFieldType19.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField45 = chronology33.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime18.withChronology(chronology33);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(1644572993115L, chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime46", (dateTime18.compareTo(dateTime46) == 0) == dateTime18.equals(dateTime46));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        int[] intArray8 = localDateTime4.getValues();
        boolean boolean9 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withFieldAdded(durationFieldType11, 32);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        boolean boolean26 = calendar17.after((java.lang.Object) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1, chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.year();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime39 = dateTime36.withField(dateTimeFieldType37, 2022);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withPeriodAdded(readablePeriod41, (int) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        java.lang.Object obj47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval(obj47, chronology48);
        long long50 = interval49.toDurationMillis();
        org.joda.time.Period period51 = interval49.toPeriod();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime36.minus((org.joda.time.ReadablePeriod) period51);
        java.lang.String str54 = period51.toString();
        int[] intArray57 = chronology27.get((org.joda.time.ReadablePeriod) period51, (long) 'a', 0L);
        org.joda.time.DurationField durationField58 = durationFieldType11.getField(chronology27);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DurationField durationField60 = chronology27.eras();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(0L, chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField58 and durationField60", Math.signum(durationField58.compareTo(durationField60)) == -Math.signum(durationField60.compareTo(durationField58)));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        int int4 = dateTime2.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        boolean boolean17 = calendar8.after((java.lang.Object) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology18.weeks();
        boolean boolean21 = durationFieldType5.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(chronology18);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("\ud654");
        java.util.Calendar calendar28 = dateTime25.toCalendar(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        calendar31.clear();
        calendar31.roll(363120000, (int) (short) 0);
        int int36 = calendar31.getMinimalDaysInFirstWeek();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        java.util.Date date39 = localDate38.toDate();
        calendar31.setTime(date39);
        java.lang.String str41 = date39.toLocaleString();
        int int42 = date39.getDay();
        int int43 = date39.getDay();
        java.time.Instant instant44 = date39.toInstant();
        calendar28.setTime(date39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(0L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(362);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(880);
        java.lang.Object obj13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval(obj13, chronology14);
        long long16 = interval15.toDurationMillis();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean21 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval15.getStartMillis();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        boolean boolean27 = interval25.containsNow();
        boolean boolean28 = interval15.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration29 = interval15.toDuration();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime10.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(12);
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(1);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime47 = dateTime42.withTime(0, 1, 12, 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int49 = dateTime42.get(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime42.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime53 = property50.roundCeilingCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(398561013);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(47, 0);
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime(dateTimeZone58);
        org.joda.time.Interval interval60 = interval37.withStart((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale63);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, (int) '#');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.millisOfDay();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.minuteOfHour();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.minuteOfHour();
        boolean boolean73 = calendar64.after((java.lang.Object) localDateTime70);
        org.joda.time.Chronology chronology74 = localDateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        boolean boolean76 = dateTimeFieldType61.isSupported(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.weekyears();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.secondOfDay();
        org.joda.time.DurationField durationField79 = chronology74.days();
        org.joda.time.DateTimeField dateTimeField80 = chronology74.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology74);
        boolean boolean83 = interval60.equals((java.lang.Object) chronology74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime59", (dateTime55.compareTo(dateTime59) == 0) == dateTime55.equals(dateTime59));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.withDayOfYear(100);
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(11);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(9);
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime9.plusDays(999);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, (int) '#');
        int[] intArray24 = localDateTime20.getValues();
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        boolean boolean37 = calendar28.after((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withYear(35268191);
        boolean boolean40 = dateTimeZone19.equals((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(1);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime44.withEarlierOffsetAtOverlap();
        int int46 = dateTime44.getWeekyear();
        org.joda.time.DateTime.Property property47 = dateTime44.weekOfWeekyear();
        java.util.Locale locale49 = new java.util.Locale("");
        java.lang.String str50 = locale49.getDisplayLanguage();
        int int51 = property47.getMaximumShortTextLength(locale49);
        org.joda.time.DateTime dateTime52 = property47.withMinimumValue();
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withYearOfCentury(0);
        int int56 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime9.toMutableDateTime(dateTimeZone19);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.months();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long78 = dateTimeZone74.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(0L, dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        boolean boolean85 = localDateTime83.isSupported(dateTimeFieldType84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.minusMillis((int) (short) 10);
        boolean boolean88 = dateTimeZone74.isLocalDateTimeGap(localDateTime83);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.plusMinutes((int) (short) 1);
        long long92 = chronology70.set((org.joda.time.ReadablePartial) localDateTime90, (long) 32);
        org.joda.time.DateTimeZone dateTimeZone93 = chronology70.getZone();
        org.joda.time.DateTime dateTime94 = dateTime9.toDateTime(chronology70);
        org.joda.time.DateTime.Property property95 = dateTime94.minuteOfHour();
        org.joda.time.DateTime dateTime97 = property95.addToCopy(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime97", (dateTime9.compareTo(dateTime97) == 0) == dateTime9.equals(dateTime97));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int11 = dateTime4.get(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime4.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withField(dateTimeFieldType14, 70);
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 122, (-46800000));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear(12);
        int int25 = dateTime24.getMillisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime24.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTimeISO();
        int int29 = mutableDateTime28.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int31 = mutableDateTime28.get(dateTimeFieldType30);
        boolean boolean32 = dateTime13.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(35268191);
        int int36 = dateTimeZone34.getOffsetFromLocal(518399999L);
        org.joda.time.DateTime dateTime37 = dateTime13.withZone(dateTimeZone34);
        long long39 = dateTimeZone34.nextTransition(1644573102805L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime37", (dateTime13.compareTo(dateTime37) == 0) == dateTime13.equals(dateTime37));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(32);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus(readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight13.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight13.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = localDateTime29.isSupported(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight23.withField(dateTimeFieldType32, 0);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((long) '#');
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusWeeks(0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDurationAdded((long) 'a', 362);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight37.withWeekyear(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        boolean boolean60 = dateTimeFieldType45.isSupported(chronology58);
        org.joda.time.DateMidnight.Property property61 = dateMidnight37.property(dateTimeFieldType45);
        org.joda.time.DateTime.Property property62 = dateTime11.property(dateTimeFieldType45);
        int int63 = property62.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime11", (dateTime6.compareTo(dateTime11) == 0) == dateTime6.equals(dateTime11));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        int int5 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime4.withDayOfYear(100);
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(11);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMonths(9);
        org.joda.time.DateTime dateTime14 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, (int) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.minuteOfHour();
        boolean boolean27 = calendar18.after((java.lang.Object) localDateTime24);
        org.joda.time.Chronology chronology28 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DurationField durationField30 = chronology28.years();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.hourOfHalfday();
        org.joda.time.DateTime dateTime34 = dateTime14.toDateTime(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime14.withYearOfEra(59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime34", (dateTime14.compareTo(dateTime34) == 0) == dateTime14.equals(dateTime34));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.plus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(32769);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, (int) '#');
        int[] intArray16 = localDateTime12.getValues();
        boolean boolean17 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, (int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        boolean boolean29 = calendar20.after((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withYear(35268191);
        boolean boolean32 = dateTimeZone11.equals((java.lang.Object) localDateTime26);
        long long34 = dateTimeZone11.convertUTCToLocal((long) 20);
        java.lang.String str36 = dateTimeZone11.getNameKey(1640995200000L);
        org.joda.time.DateTime dateTime37 = dateTime6.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property38 = dateTime6.millisOfDay();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withPeriodAdded(readablePeriod43, (int) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.minuteOfHour();
        boolean boolean50 = calendar41.after((java.lang.Object) localDateTime47);
        org.joda.time.Chronology chronology51 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.year();
        org.joda.time.DurationField durationField53 = chronology51.hours();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology51.getZone();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.millisOfDay();
        org.joda.time.DurationField durationField59 = chronology51.eras();
        org.joda.time.DateTime dateTime60 = dateTime6.withChronology(chronology51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField53 and durationField59", Math.signum(durationField53.compareTo(durationField59)) == -Math.signum(durationField59.compareTo(durationField53)));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        java.lang.String str2 = dateTimeFormatter0.print((long) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(15);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (int) '#');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        boolean boolean18 = calendar9.after((java.lang.Object) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1644606480000L, chronology19);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((int) (byte) 1, 12, 10, dateTimeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone27.getOffset(readableInstant31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight22.toMutableDateTime(dateTimeZone27);
        int int36 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime33, "14:40:37.405", (int) (short) -1);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plus(readableDuration39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withFieldAdded(durationFieldType41, 0);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight38.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean58 = localDateTime54.isSupported(dateTimeFieldType57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight48.withField(dateTimeFieldType57, 0);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((long) '#');
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, (int) '#');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.minuteOfHour();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.minuteOfHour();
        boolean boolean74 = calendar65.after((java.lang.Object) localDateTime71);
        org.joda.time.Chronology chronology75 = localDateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.clockhourOfHalfday();
        org.joda.time.DurationField durationField79 = chronology75.minutes();
        org.joda.time.DateTimeField dateTimeField80 = chronology75.clockhourOfHalfday();
        org.joda.time.DurationField durationField81 = chronology75.hours();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight60, chronology75);
        org.joda.time.DateTimeField dateTimeField83 = chronology75.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology75.centuryOfEra();
        org.joda.time.DateTime dateTime85 = mutableDateTime33.toDateTime(chronology75);
        org.joda.time.Chronology chronology86 = chronology75.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight22 and mutableDateTime33", (dateMidnight22.compareTo(mutableDateTime33) == 0) == dateMidnight22.equals(mutableDateTime33));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime2.toMutableDateTime();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        boolean boolean24 = calendar15.after((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 100, chronology25);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval(obj27, chronology28);
        long long30 = interval29.toDurationMillis();
        org.joda.time.Period period31 = interval29.toPeriod();
        java.lang.String str32 = period31.toString();
        long long35 = chronology25.add((org.joda.time.ReadablePeriod) period31, (long) (byte) 100, 0);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, (int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.minuteOfHour();
        boolean boolean47 = calendar38.after((java.lang.Object) localDateTime44);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.minus(readableDuration55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        boolean boolean69 = calendar60.after((java.lang.Object) localDateTime66);
        org.joda.time.Chronology chronology70 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 100, chronology70);
        java.lang.Object obj72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval(obj72, chronology73);
        long long75 = interval74.toDurationMillis();
        org.joda.time.Period period76 = interval74.toPeriod();
        java.lang.String str77 = period76.toString();
        long long80 = chronology70.add((org.joda.time.ReadablePeriod) period76, (long) (byte) 100, 0);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight56.minus((org.joda.time.ReadablePeriod) period76);
        int[] intArray84 = chronology48.get((org.joda.time.ReadablePeriod) period76, (long) 47, 3801600000L);
        long long87 = chronology25.add((org.joda.time.ReadablePeriod) period76, (-363119994L), 19);
        org.joda.time.DateTime dateTime88 = dateTime2.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField89 = chronology25.minuteOfHour();
        org.joda.time.LocalTime localTime90 = new org.joda.time.LocalTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime88", (dateTime2.compareTo(dateTime88) == 0) == dateTime2.equals(dateTime88));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int11 = dateTime4.get(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime4.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property12.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.minuteOfHour();
        boolean boolean30 = calendar21.after((java.lang.Object) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1, chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withPeriodAdded(readablePeriod45, (int) '#');
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.minuteOfHour();
        boolean boolean52 = calendar43.after((java.lang.Object) localDateTime49);
        org.joda.time.Chronology chronology53 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.year();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withPeriodAdded(readablePeriod64, (int) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.minuteOfHour();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.minuteOfHour();
        boolean boolean71 = calendar62.after((java.lang.Object) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withYear(35268191);
        int int74 = localDateTime68.getMonthOfYear();
        java.lang.Object obj75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Interval interval77 = new org.joda.time.Interval(obj75, chronology76);
        boolean boolean78 = interval77.containsNow();
        org.joda.time.DateTime dateTime79 = interval77.getStart();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusDays(1);
        org.joda.time.DateTime dateTime83 = localDateTime82.toDateTime();
        org.joda.time.DateMidnight dateMidnight84 = dateTime83.toDateMidnight();
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.weekyear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight84.withChronology(chronology86);
        boolean boolean88 = interval77.isBefore((org.joda.time.ReadableInstant) dateMidnight87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Interval interval90 = interval77.withDurationBeforeEnd(readableDuration89);
        org.joda.time.Period period91 = interval77.toPeriod();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime68.withPeriodAdded((org.joda.time.ReadablePeriod) period91, 52814315);
        long long96 = chronology53.add((org.joda.time.ReadablePeriod) period91, (-31172820000L), 23);
        boolean boolean97 = dateTimeFieldType39.isSupported(chronology53);
        org.joda.time.DateTime dateTime98 = dateTime15.toDateTime(chronology53);
        org.joda.time.DateTime dateTime99 = new org.joda.time.DateTime(chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime98", (dateTime15.compareTo(dateTime98) == 0) == dateTime15.equals(dateTime98));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property10 = dateTime4.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.withField(dateTimeFieldType12, 86399999);
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, (int) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minus(readableDuration23);
        boolean boolean25 = dateTimeZone18.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property27 = dateTime14.monthOfYear();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
        org.joda.time.DateTime dateTime29 = property27.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime31 = property27.addToCopy(225684657L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime26", (dateTime14.compareTo(dateTime26) == 0) == dateTime14.equals(dateTime26));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime3.getZone();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        boolean boolean7 = dateTime3.equals((java.lang.Object) category6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(12);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.plus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(1);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withEra(0);
        int int21 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(0L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) 'a');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMinutes((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 1);
        int int35 = localDateTime34.getEra();
        int int36 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime37 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime39 = dateTime18.withMillis((long) 32769);
        int int40 = dateTime18.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(255);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime18.toMutableDateTime(dateTimeZone42);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime46 = dateTime18.minus(363120999L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime43", (dateTime3.compareTo(mutableDateTime43) == 0) == dateTime3.equals(mutableDateTime43));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, (int) '#');
        int[] intArray5 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMonths((int) (short) 1);
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj8, chronology9);
        boolean boolean11 = interval10.containsNow();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime12.property(dateTimeFieldType15);
        int int17 = localDateTime1.get(dateTimeFieldType15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withField(dateTimeFieldType23, 2022);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval(obj33, chronology34);
        long long36 = interval35.toDurationMillis();
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime22.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime40 = dateTime22.withLaterOffsetAtOverlap();
        java.lang.Object obj41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval(obj41, chronology42);
        long long44 = interval43.toDurationMillis();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval43.toPeriod(periodType45);
        int int47 = period46.size();
        org.joda.time.DateTime dateTime48 = dateTime40.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime49 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime50 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.plusMonths(881);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, (int) '#');
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minus(readableDuration57);
        int int59 = localDateTime53.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime53.minusMillis(23);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.minutes();
        org.joda.time.DateTime dateTime64 = dateTime49.withChronology(chronology62);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(1644573204863L, chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime64", (dateTime22.compareTo(dateTime64) == 0) == dateTime22.equals(dateTime64));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(readableDuration2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withFieldAdded(durationFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withDurationAdded((long) (short) 0, 7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.plusYears((int) 'x');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.plusMonths(52853535);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        boolean boolean26 = calendar17.after((java.lang.Object) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1, chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        boolean boolean45 = calendar36.after((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withYear(35268191);
        int int48 = localDateTime42.getMonthOfYear();
        java.lang.Object obj49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval(obj49, chronology50);
        boolean boolean52 = interval51.containsNow();
        org.joda.time.DateTime dateTime53 = interval51.getStart();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusDays(1);
        org.joda.time.DateTime dateTime57 = localDateTime56.toDateTime();
        org.joda.time.DateMidnight dateMidnight58 = dateTime57.toDateMidnight();
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.weekyear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withChronology(chronology60);
        boolean boolean62 = interval51.isBefore((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = interval51.withDurationBeforeEnd(readableDuration63);
        org.joda.time.Period period65 = interval51.toPeriod();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 52814315);
        long long70 = chronology27.add((org.joda.time.ReadablePeriod) period65, (-31172820000L), 23);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateTimeField dateTimeField72 = chronology27.centuryOfEra();
        java.lang.Object obj73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval(obj73, chronology74);
        long long76 = interval75.toDurationMillis();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = interval75.toPeriod(periodType77);
        int[] intArray80 = chronology27.get((org.joda.time.ReadablePeriod) period78, 0L);
        org.joda.time.DateTime dateTime81 = dateMidnight13.toDateTime(chronology27);
        int int82 = dateMidnight13.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight13.plus(53119512L);
        int int85 = dateMidnight84.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight84 and dateTime81", (dateMidnight84.compareTo(dateTime81) == 0) == dateMidnight84.equals(dateTime81));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) 1644572872597L, chronology45);
        org.joda.time.DateTime dateTime52 = dateTime22.toDateTime(chronology45);
        org.joda.time.DurationField durationField53 = chronology45.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime52", (dateTime4.compareTo(dateTime52) == 0) == dateTime4.equals(dateTime52));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        java.util.Date date3 = dateTime2.toDate();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfEra(1);
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((-1953900028000L), 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 72, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear(12);
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableDuration13, (org.joda.time.ReadableInstant) dateTime18);
        long long20 = interval19.getStartMillis();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (short) 0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus(readableDuration23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withFieldAdded(durationFieldType25, 0);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) 100);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusWeeks((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.minus(readableDuration34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays(28);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(1);
        org.joda.time.DateTime dateTime41 = localDateTime40.toDateTime();
        org.joda.time.DateMidnight dateMidnight42 = dateTime41.toDateMidnight();
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.weekyear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.withYearOfCentury(12);
        org.joda.time.Interval interval48 = dateMidnight42.toInterval();
        boolean boolean49 = dateMidnight42.isBeforeNow();
        java.lang.String str50 = dateMidnight42.toString();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight42.minusWeeks(11);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withPeriodAdded(readablePeriod57, (int) '#');
        int[] intArray60 = localDateTime56.getValues();
        boolean boolean61 = dateTimeZone55.isLocalDateTimeGap(localDateTime56);
        org.joda.time.LocalDateTime.Property property62 = localDateTime56.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = property64.withMaximumValue();
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYear(900);
        java.lang.Object obj69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval(obj69, chronology70);
        boolean boolean72 = interval71.containsNow();
        org.joda.time.Duration duration73 = interval71.toDuration();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.minus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight42.plus((org.joda.time.ReadableDuration) duration73);
        java.lang.Object obj76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval(obj76, chronology77);
        long long79 = interval78.toDurationMillis();
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval78.toPeriod(periodType80);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period81, 14);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight35.withPeriodAdded((org.joda.time.ReadablePeriod) period81, 52836254);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight29.minus((org.joda.time.ReadablePeriod) period81);
        boolean boolean87 = interval19.isAfter((org.joda.time.ReadableInstant) dateMidnight29);
        int int88 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        org.joda.time.LocalDate localDate93 = new org.joda.time.LocalDate(dateTimeZone92);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime(0L, dateTimeZone92);
        org.joda.time.DateTime.Property property95 = dateTime94.millisOfDay();
        org.joda.time.DateTime dateTime97 = dateTime94.plusMonths(809);
        int int98 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime89", (dateTime8.compareTo(mutableDateTime89) == 0) == dateTime8.equals(mutableDateTime89));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis(52810033);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        boolean boolean36 = calendar27.after((java.lang.Object) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime21.withChronology(chronology37);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime41", (dateTime4.compareTo(dateTime41) == 0) == dateTime4.equals(dateTime41));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) 12);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.centuryOfEra();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, (int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        boolean boolean23 = calendar14.after((java.lang.Object) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.months();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        long long32 = dateTimeZone28.convertLocalToUTC((long) 35268191, false, (long) 35268191);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMillis((int) (short) 10);
        boolean boolean42 = dateTimeZone28.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.plusMinutes((int) (short) 1);
        long long46 = chronology24.set((org.joda.time.ReadablePartial) localDateTime44, (long) 32);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology24.hourOfDay();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(1644572920123L, chronology24);
        org.joda.time.DateTime dateTime50 = dateMidnight9.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField51 = chronology24.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight9 and dateTime50", (dateMidnight9.compareTo(dateTime50) == 0) == dateMidnight9.equals(dateTime50));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight4.getZone();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight4.toMutableDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(1);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime16.withTime(0, 1, 12, 6);
        org.joda.time.DateTime.Property property22 = dateTime16.minuteOfHour();
        org.joda.time.DateTime.Property property23 = dateTime16.weekOfWeekyear();
        int int24 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(1);
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours(682961);
        int int35 = dateTime34.getDayOfYear();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withPeriodAdded(readablePeriod41, (int) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.minuteOfHour();
        boolean boolean48 = calendar39.after((java.lang.Object) localDateTime45);
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1, chronology49);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.yearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime34.withChronology(chronology49);
        org.joda.time.DateTime dateTime57 = dateTime16.toDateTime(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime56", (dateTime34.compareTo(dateTime56) == 0) == dateTime34.equals(dateTime56));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        int int4 = localTime3.size();
        int int5 = localTime3.getMillisOfDay();
        java.lang.Object obj6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval(obj6, chronology7);
        long long9 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval8.toPeriod(periodType10);
        int int12 = period11.size();
        org.joda.time.LocalTime localTime14 = localTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 358);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 10, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(12);
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(52798648);
        org.joda.time.DateTime dateTime28 = dateTime19.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime19.withYear(50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime28", (dateTime19.compareTo(dateTime28) == 0) == dateTime19.equals(dateTime28));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        boolean boolean12 = calendar3.after((java.lang.Object) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology13.weeks();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology13.eras();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField18", Math.signum(durationField15.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField15)));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        java.lang.Object obj30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval(obj30, chronology31);
        long long33 = interval32.toDurationMillis();
        org.joda.time.Period period34 = interval32.toPeriod();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime37 = dateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(2022);
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(63433187299550L, 12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Integer int45 = dateTimeFormatter43.getPivotYear();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        boolean boolean57 = calendar48.after((java.lang.Object) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter43.withChronology(chronology58);
        org.joda.time.DurationField durationField63 = chronology58.seconds();
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology58);
        long long68 = chronology58.add(63780480000000L, (long) 53186575, 53176137);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 2022);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        java.lang.Object obj15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval(obj15, chronology16);
        long long18 = interval17.toDurationMillis();
        org.joda.time.Period period19 = interval17.toPeriod();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime4.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = dateTime4.withLaterOffsetAtOverlap();
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval(obj23, chronology24);
        long long26 = interval25.toDurationMillis();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval25.toPeriod(periodType27);
        int int29 = period28.size();
        org.joda.time.DateTime dateTime30 = dateTime22.plus((org.joda.time.ReadablePeriod) period28);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        boolean boolean44 = calendar35.after((java.lang.Object) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1, chronology45);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) 1644572872597L, chronology45);
        org.joda.time.DateTime dateTime52 = dateTime22.toDateTime(chronology45);
        org.joda.time.DateTime dateTime54 = dateTime22.minusMonths(1970);
        org.joda.time.DateTime dateTime56 = dateTime22.plusSeconds(728);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime52", (dateTime22.compareTo(dateTime52) == 0) == dateTime22.equals(dateTime52));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) 10, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(12);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(1);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (short) -1);
        boolean boolean14 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime11);
        java.lang.String str15 = interval6.toString();
        java.lang.Object obj16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval(obj16, chronology17);
        boolean boolean19 = interval18.containsNow();
        org.joda.time.DateTime dateTime20 = interval18.getStart();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withChronology(chronology27);
        boolean boolean29 = interval18.isBefore((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Interval interval31 = interval18.withDurationBeforeEnd(readableDuration30);
        boolean boolean32 = interval6.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.010Z");
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear(23);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(10);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMinutes(52817920);
        org.joda.time.DateTime dateTime42 = dateTime36.withYearOfEra(292278993);
        boolean boolean43 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime34", (dateTime3.compareTo(dateTime34) == 0) == dateTime3.equals(dateTime34));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfEra(6);
        java.lang.Object obj9 = null;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withPeriodAdded(readablePeriod14, (int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        boolean boolean21 = calendar12.after((java.lang.Object) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj9, chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime4.toDateTime(chronology22);
        org.joda.time.DurationField durationField29 = chronology22.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime28", (dateTime3.compareTo(dateTime28) == 0) == dateTime3.equals(dateTime28));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withPeriodAdded(readablePeriod4, (int) '#');
        int[] intArray7 = localDateTime3.getValues();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfDay();
        int int10 = property9.getMinimumValue();
        java.lang.String str11 = property9.getAsShortText();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        boolean boolean16 = localDateTime14.isSupported(durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMillis(52816456);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekOfWeekyear(7);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(1);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DurationField durationField28 = durationFieldType26.getField(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withFieldAdded(durationFieldType26, 35268191);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withFieldAdded(durationFieldType26, (int) (short) -1);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        boolean boolean45 = calendar36.after((java.lang.Object) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.year();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1, chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DurationField durationField54 = chronology46.centuries();
        org.joda.time.DurationField durationField55 = durationFieldType26.getField(chronology46);
        java.lang.String str56 = durationFieldType26.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField55", (durationField28.compareTo(durationField55) == 0) == durationField28.equals(durationField55));
    }
}

